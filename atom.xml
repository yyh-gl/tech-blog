<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ja"><generator uri="https://gohugo.io/" version="0.95.0">Hugo</generator><title type="html">yyh-gl's Tech Blog</title><link href="https://yyh-gl.github.io/tech-blog/" rel="alternate" type="text/html" title="HTML"/><link href="https://yyh-gl.github.io/tech-blog/index.json" rel="alternate" type="application/json" title="JSON"/><link href="https://yyh-gl.github.io/tech-blog/index.xml" rel="alternate" type="application/rss+xml" title="RSS"/><link href="https://yyh-gl.github.io/tech-blog/atom.xml" rel="self" type="application/atom+xml" title="Atom"/><updated>2022-03-23T16:27:37+00:00</updated><id>https://yyh-gl.github.io/tech-blog/</id><entry><title type="html">複数のdocker-compose.ymlを使って、設定の追加や上書きをやってみる</title><link href="https://yyh-gl.github.io/tech-blog/blog/docker-compose-override/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/activity-2021/?utm_source=atom_feed" rel="related" type="text/html" title="【2021年】アクティビティまとめ"/><link href="https://yyh-gl.github.io/tech-blog/blog/go-build/?utm_source=atom_feed" rel="related" type="text/html" title="徒然なるままに go build と build tag を見ていく"/><link href="https://yyh-gl.github.io/tech-blog/blog/activity-2020/?utm_source=atom_feed" rel="related" type="text/html" title="【2020年】アクティビティまとめ"/><link href="https://yyh-gl.github.io/tech-blog/blog/profile-readme-updater/?utm_source=atom_feed" rel="related" type="text/html" title="【GitHub Actions】GitHubのプロフィールを自動更新する仕組みを作った"/><link href="https://yyh-gl.github.io/tech-blog/blog/uncredible-codes-from-go-spec/?utm_source=atom_feed" rel="related" type="text/html" title="The Go Programming Language Specificationで知った「こんなことできるだ」を紹介"/><id>https://yyh-gl.github.io/tech-blog/blog/docker-compose-override/</id><author><name>yyh-gl</name></author><published>2022-03-18T15:55:40+00:00</published><updated>2022-03-18T15:55:40+00:00</updated><content type="html"><![CDATA[<blockquote>知識として知っているだけで実際に使ったことはない←</blockquote><h1 id="要約">要約</h1>
<p>Docker Composeの設定ファイルは複数指定できて、設定の追加や上書きができる。</p>
<br>
<br>
<p>早速詳細に見ていきましょう↓</p>
<h1 id="docker-composeymlは複数指定可能"><code>docker-compose.yml</code>は複数指定可能</h1>
<p><code>docker compose up</code>実行時に<code>-f</code>オプションを使うことで、
参照する<code>docker-compose.yml</code>ファイル（設定ファイル）を指定できることは、ご存知の方も多いと思います。<br>
しかし、複数の設定ファイルを指定できることはあまり知られていないと思います（勝手な決めつけ）。</p>
<p><a href="https://docs.docker.jp/index.html" target="_blank" rel="noopener noreferrer">Docker-docs-ja</a>
では、以下のページで説明がされています。</p>
<p><a href="https://docs.docker.jp/compose/extends.html" target="_blank" rel="noopener noreferrer">『ファイル間、プロジェクト間での Compose 設定の共有 』</a>
</p>
<h1 id="実際の動きを見てみる">実際の動きを見てみる</h1>
<p>以下のような<code>docker-compose.yml</code>を用意します。</p>
<p><code>docker-compose.yml</code></p>
<pre><code class="language-docker-compose">version: '3'
services:
  web:
    image: &quot;nginx:latest&quot;
</code></pre>
<p><code>docker compose -f docker-compose.yml up</code>でコンテナを起動した後に、
ブラウザを開いて<code>http://localhost/</code>にアクセスしてみます。</p>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2022/03/docker-compose-override/result1.webp" width="600">
<p>Webサイトにアクセスできませんでした。</p>
<p>ポートを公開していないので当然の結果ですね。</p>
<br>
<p>次に、以下のような<code>docker-compose.override.yml</code>を用意します。</p>
<p><code>docker-compose.override.yml</code></p>
<pre><code class="language-docker-compose">version: '3'
services:
  web:
    ports:
      - &quot;80:80&quot;
</code></pre>
<p>そして、今度は以下のようにして、複数の設定ファイルを指定します。</p>
<p><code>docker compose -f docker-compose.yml -f docker-compose.override.yml up</code></p>
<p>では、<code>http://localhost/</code>にアクセスしてみます。</p>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2022/03/docker-compose-override/result2.webp" width="600">
<p>今度は無事にアクセスできました。</p>
<p>ポート公開がうまくできているようです。<br></p>
<!-- textlint-disable ja-technical-writing/sentence-length -->
<p>上記の挙動を見ることで、<code>docker-compose.yml</code>で使用イメージの指定ができており、なおかつ、
<code>docker-compose.override.yml</code>でポート公開の設定ができていることが分かります。</p>
<!-- textlint-enable ja-technical-writing/sentence-length -->
<br>
<p>すなわち、Docker Composeは追加で設定ファイルを指定することで、設定を追加できます。</p>
<p>なお、今回はサンプルを省きましたが、追加だけではなく、上書きも可能です。<br>
（後ほど出てくるサンプルを見れば、上書きの挙動も分かると思います）</p>
<h1 id="重複した設定項目がある場合はどちらが優先される">重複した設定項目がある場合はどちらが優先される？</h1>
<p>前章の最後に、「追加だけではなく、上書きも可能です」と書きました。</p>
<p>本章では、複数の設定ファイルを指定したさいに、
例えば、同じ環境変数名に対して異なる値を設定していた場合どちらの設定が優先されるのかを解説します。</p>
<br>
<p>はじめに、ドキュメントを読んでみます。</p>
<p><a href="https://docs.docker.jp/compose/extends.html#adding-and-overriding-configuration" target="_blank" rel="noopener noreferrer">『設定の追加と上書き』</a>
の章に、</p>
<blockquote>
<p>設定オプションが元々のサービスとローカルのサービスの両方にて定義されていた場合は、
元のサービスの値はローカルの値によって<b>置き換えられる</b>か、あるいは<b>拡張されます</b>。</p>
</blockquote>
<p>とありますが、元のサービスってどっち？となります。<br>
なので、実際に動作を見てみます。</p>
<p>以下のファイルを用意します。</p>
<p><code>main.go</code></p>
<pre><code class="language-go">package main

import (
	&quot;fmt&quot;
	&quot;os&quot;
)

func main() {
	fmt.Println(os.Getenv(&quot;ENV&quot;))
}
</code></pre>
<p><code>docker-compose.yml</code></p>
<pre><code class="language-docker-compose">version: '3'
services:
  app:
    image: &quot;golang:latest&quot;
    working_dir: /app
    volumes:
      - .:/app
    environment:
      - ENV=local
    command: &quot;go run /app/main.go&quot;
</code></pre>
<p><code>docker-compose.override.yml</code></p>
<pre><code class="language-docker-compose">version: '3'
services:
  app:
    environment:
      - ENV=prod
</code></pre>
<p><code>docker compose up</code>するとGoのコードが動いて、環境変数<code>ENV</code>の内容が表示されるようになっています。</p>
<br>
<p>まずは、<code>docker compose -f docker-compose.yml -f docker-compose.override.yml up</code>してみます。</p>
<p>結果は以下のとおりです。</p>
<pre><code class="language-shell">[+] Running 1/1
 ⠿ Container test-app-1  Recreated                                                                                                                      0.1s
Attaching to test-app-1
test-app-1  | prod
test-app-1 exited with code 0
</code></pre>
<p>4行目で<code>prod</code>と表示されていますね。<br>
これは<code>docker-compose.override.yml</code>で設定した内容です。</p>
<p>よって、ドキュメントの言葉に当てはめると、</p>
<p>元々のサービス = <code>docker-compose.yml</code>で定義したサービス<br>
ローカルのサービス = <code>docker-compose.override.yml</code>で定義したサービス</p>
<p>となるので、<code>docker-compose.yml</code>の内容が<code>docker-compose.override.yml</code>の内容で上書きされていることになります。</p>
<br>
<p>では、次はファイルの指定順を逆にしてみます。</p>
<p><code>docker compose -f docker-compose.override.yml -f docker-compose.yml up</code></p>
<p>結果は以下のとおりです。</p>
<pre><code class="language-shell">[+] Running 1/1
 ⠿ Container test-app-1  Recreated                                                                                                                      0.1s
Attaching to test-app-1
test-app-1  | local
test-app-1 exited with code 0
</code></pre>
<p><code>local</code>と表示されました。<br>
<code>docker-compose.override.yml</code>の内容が<code>docker-compose.yml</code>の内容で上書きされたということですね。</p>
<br>
<p>以上、2つの検証から分かったことをまとめると、以下のとおりです。</p>
<ul>
<li>元々のサービスの値はローカルのサービスの値によって上書きされる
<ul>
<li>元々のサービス = 先に指定した設定ファイルの内容</li>
<li>ローカルのサービス = 後から指定した設定ファイルの内容</li>
</ul>
</li>
</ul>
<h1 id="ユースケース">ユースケース</h1>
<p>本機能のユースケースに関しては、ドキュメントに詳しく記載があるので、そちらをご覧ください。<br>
<a href="https://docs.docker.jp/compose/extends.html#id4" target="_blank" rel="noopener noreferrer">『利用例』</a>
の項です。</p>
<p>ちなみに今回の機能に関して、現状、僕はdocker-composeをローカルでしか使っていないのに加えて、
OSによる差分で困るといったこともなかったので使ったことはありません。</p>
<h1 id="まとめ">まとめ</h1>
<p>Docker Composeの設定ファイルは複数指定することで、設定の追加や上書きが可能です。</p>
<p>重複している設定内容については、先に指定した設定ファイルの内容が後に指定した設定ファイルの内容で上書きされます。</p>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/docker" term="docker" label="Docker"/><category scheme="https://yyh-gl.github.io/tech-blog/categories/docker-compose" term="docker-compose" label="Docker Compose"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">【2021年】アクティビティまとめ</title><link href="https://yyh-gl.github.io/tech-blog/blog/activity-2021/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/go-build/?utm_source=atom_feed" rel="related" type="text/html" title="徒然なるままに go build と build tag を見ていく"/><link href="https://yyh-gl.github.io/tech-blog/blog/activity-2020/?utm_source=atom_feed" rel="related" type="text/html" title="【2020年】アクティビティまとめ"/><link href="https://yyh-gl.github.io/tech-blog/blog/profile-readme-updater/?utm_source=atom_feed" rel="related" type="text/html" title="【GitHub Actions】GitHubのプロフィールを自動更新する仕組みを作った"/><link href="https://yyh-gl.github.io/tech-blog/blog/uncredible-codes-from-go-spec/?utm_source=atom_feed" rel="related" type="text/html" title="The Go Programming Language Specificationで知った「こんなことできるだ」を紹介"/><link href="https://yyh-gl.github.io/tech-blog/blog/support-webp/?utm_source=atom_feed" rel="related" type="text/html" title="ブログの画像をWebPに変えた話とSafariで表示されない件について"/><id>https://yyh-gl.github.io/tech-blog/blog/activity-2021/</id><author><name>yyh-gl</name></author><published>2022-01-02T11:59:04+00:00</published><updated>2022-01-02T11:59:04+00:00</updated><content type="html"><![CDATA[<blockquote>今年もいろいろと勉強会参加したなぁ</blockquote><h1 id="今年も">今年も…</h1>
<p><a href="https://yyh-gl.github.io/tech-blog/blog/activity-2020/" target="_blank" rel="noopener noreferrer">昨年に引き続き</a>
、
今年も<a href="https://lapras.com/" target="_blank" rel="noopener noreferrer">LAPRAS</a>
で1年間のアクティビティを出してみました。</p>
<p>コロナ禍真っ只中でも、オンラインでたくさんの勉強会に参加できました。</p>
<p>今年は良い出会いが特に多く、運営側として関わったものも増えました。</p>
<p>来年もさらに良い年になるように、多方面で頑張っていきます！</p>
<p>では、本題の2021年のアクティビティです↓</p>
<h1 id="2021年アクティビティ">2021年アクティビティ</h1>
<p>2021年のアウトプットと参加イベントを振り返ると</p>
<p>アウトプットしたものや参加したイベントなどをまとめてみました。</p>
<h2 id="connpass">connpass</h2>
<ul>
<li>2021/12/08
<ul>
<li><a href="https://modeling-how-to-learn.connpass.com/event/229330/" target="_blank" rel="noopener noreferrer">ユースケース駆動開発をやってみた</a>
</li>
</ul>
</li>
<li>2021/12/01
<ul>
<li><a href="https://gospecreading.connpass.com/event/231503/" target="_blank" rel="noopener noreferrer">Go Language Specification 輪読会 #32</a>
</li>
</ul>
</li>
<li>2021/11/25
<ul>
<li><a href="https://mercari.connpass.com/event/229218/" target="_blank" rel="noopener noreferrer">merpay Tech Talk 〜 決済基盤の未来〜</a>
</li>
</ul>
</li>
<li>2021/11/17
<ul>
<li><a href="https://gospecreading.connpass.com/event/228611/" target="_blank" rel="noopener noreferrer">Go Language Specification 輪読会 #31</a>
</li>
</ul>
</li>
<li>2021/11/03
<ul>
<li><a href="https://gospecreading.connpass.com/event/226564/" target="_blank" rel="noopener noreferrer">Go 1.18&#43; 言語仕様勉強会 #3 【Generics】</a>
</li>
</ul>
</li>
<li>2021/10/30
<ul>
<li><a href="https://ddd-community-jp.connpass.com/event/226482/" target="_blank" rel="noopener noreferrer">ライブモデリングとコーディングで理解するDDD (DDD勉強会2021#1)</a>
</li>
</ul>
</li>
<li>2021/10/21
<ul>
<li><a href="https://mercari.connpass.com/event/227024/" target="_blank" rel="noopener noreferrer">mercari.go #17 オンライン開催</a>
</li>
</ul>
</li>
<li>2021/10/20
<ul>
<li><a href="https://gospecreading.connpass.com/event/227239/" target="_blank" rel="noopener noreferrer">Go Language Specification 輪読会 #30</a>
</li>
</ul>
</li>
<li>2021/10/06
<ul>
<li><a href="https://gospecreading.connpass.com/event/224600/" target="_blank" rel="noopener noreferrer">Go Language Specification 輪読会 #29</a>
</li>
</ul>
</li>
<li>2021/09/22
<ul>
<li><a href="https://gospecreading.connpass.com/event/223987/" target="_blank" rel="noopener noreferrer">Go 1.18&#43; 言語仕様勉強会 #2 【Generics】</a>
</li>
</ul>
</li>
<li>2021/09/11
<ul>
<li><a href="https://ddd-community-jp.connpass.com/event/223444/" target="_blank" rel="noopener noreferrer">DDD質問箱のつまみ喰い - 1軒目</a>
</li>
</ul>
</li>
<li>2021/09/08
<ul>
<li><a href="https://gospecreading.connpass.com/event/223152/" target="_blank" rel="noopener noreferrer">Go Language Specification 輪読会 #28</a>
</li>
</ul>
</li>
<li>2021/09/07
<ul>
<li><a href="https://modeling-how-to-learn.connpass.com/event/223326/" target="_blank" rel="noopener noreferrer">モデリングの学び方：座談会</a>
</li>
</ul>
</li>
<li>2021/09/01
<ul>
<li><a href="https://lapras.connpass.com/event/222901/" target="_blank" rel="noopener noreferrer">LAPRAS公開設計レビュー 「t_wadaさんにこのテストでサバンナを生き抜けるか聞いてみた」</a>
</li>
</ul>
</li>
<li>2021/08/25
<ul>
<li><a href="https://gospecreading.connpass.com/event/220272/" target="_blank" rel="noopener noreferrer">Go Language Specification 輪読会 #27</a>
</li>
</ul>
</li>
<li>2021/08/22
<ul>
<li><a href="https://kyotogo.connpass.com/event/221655/" target="_blank" rel="noopener noreferrer">Kyoto.go remote #23 golang/go の Issues を読み漁る会</a>
</li>
</ul>
</li>
<li>2021/08/11
<ul>
<li><a href="https://showcase-gig.connpass.com/event/217914/" target="_blank" rel="noopener noreferrer">GeekGig #1 〜Goと私の一年〜</a>
</li>
</ul>
</li>
<li>2021/08/01
<ul>
<li><a href="https://gospecreading.connpass.com/event/220389/" target="_blank" rel="noopener noreferrer">Type Sets Proposal 勉強会</a>
</li>
</ul>
</li>
<li>2021/07/31
<ul>
<li><a href="https://ddd-community-jp.connpass.com/event/219778/" target="_blank" rel="noopener noreferrer">エリック・エヴァンスのドメイン駆動設計 輪読会「第17章 戦略をまとめ上げる&amp;amp;エピローグ」</a>
</li>
</ul>
</li>
<li>2021/07/26
<ul>
<li><a href="https://mercari.connpass.com/event/215035/" target="_blank" rel="noopener noreferrer">Merpay Tech Fest 2021</a>
</li>
</ul>
</li>
<li>2021/07/21
<ul>
<li><a href="https://gospecreading.connpass.com/event/219466/" target="_blank" rel="noopener noreferrer">Go Language Specification 輪読会 #26</a>
</li>
</ul>
</li>
<li>2021/07/20
<ul>
<li><a href="https://dmm.connpass.com/event/218192/" target="_blank" rel="noopener noreferrer">DMM.go #3</a>
</li>
</ul>
</li>
<li>2021/07/19
<ul>
<li><a href="https://mercari.connpass.com/event/218434/" target="_blank" rel="noopener noreferrer">mercari.go #16 オンライン開催</a>
</li>
</ul>
</li>
<li>2021/07/17
<ul>
<li><a href="https://ddd-community-jp.connpass.com/event/218316/" target="_blank" rel="noopener noreferrer">エリック・エヴァンスのドメイン駆動設計 輪読会「第16章 大規模な構造」後半</a>
</li>
</ul>
</li>
<li>2021/07/14
<ul>
<li><a href="https://gospecreading.connpass.com/event/217353/" target="_blank" rel="noopener noreferrer">Go Language Specification 輪読会 #25</a>
</li>
</ul>
</li>
<li>2021/07/06
<ul>
<li><a href="https://kichijojipm.connpass.com/event/217224/" target="_blank" rel="noopener noreferrer">吉祥寺.pm27【オンライン】</a>
</li>
</ul>
</li>
<li>2021/07/03
<ul>
<li><a href="https://ddd-community-jp.connpass.com/event/216909/" target="_blank" rel="noopener noreferrer">エリック・エヴァンスのドメイン駆動設計 輪読会「第16章 大規模な構造」前編</a>
</li>
</ul>
</li>
<li>2021/06/25
<ul>
<li><a href="https://future.connpass.com/event/216081/" target="_blank" rel="noopener noreferrer">Future Tech Night #12～Goで始めるサーバレスファーストという選択肢～</a>
</li>
</ul>
</li>
<li>2021/06/24
<ul>
<li><a href="https://k8sjp.connpass.com/event/214286/" target="_blank" rel="noopener noreferrer">Kubernetes Meetup Tokyo #42</a>
</li>
</ul>
</li>
<li>2021/06/23
<ul>
<li><a href="https://gospecreading.connpass.com/event/215963/" target="_blank" rel="noopener noreferrer">Go Language Specification 輪読会 #24</a>
</li>
</ul>
</li>
<li>2021/06/22
<ul>
<li><a href="https://techbookfest.connpass.com/event/210997/" target="_blank" rel="noopener noreferrer">【出版記念オンラインイベント】生産性を最大化する！『チームで育てるAndroidアプリ設計』</a>
</li>
</ul>
</li>
<li>2021/06/20
<ul>
<li><a href="https://kyotogo.connpass.com/event/214891/" target="_blank" rel="noopener noreferrer">Kyoto.go remote #21 Discord もくもく会</a>
</li>
</ul>
</li>
<li>2021/06/19
<ul>
<li><a href="https://ddd-community-jp.connpass.com/event/215541/" target="_blank" rel="noopener noreferrer">エリック・エヴァンスのドメイン駆動設計 輪読会「第15章 蒸留」後編</a>
</li>
</ul>
</li>
<li>2021/06/16
<ul>
<li><a href="https://mercari.connpass.com/event/213078/" target="_blank" rel="noopener noreferrer">iOS Tech Talk 〜 Multi module 戦略座談会 〜</a>
</li>
</ul>
</li>
<li>2021/06/11
<ul>
<li><a href="https://forkwell.connpass.com/event/212647/" target="_blank" rel="noopener noreferrer">Infra Study 2nd #2「クラウドネイティブを支えるインフラ技術」</a>
</li>
</ul>
</li>
<li>2021/06/10
<ul>
<li><a href="https://fukuokago.connpass.com/event/202570/" target="_blank" rel="noopener noreferrer">Fukuoka.go#17 (オンライン開催)</a>
</li>
</ul>
</li>
<li>2021/06/09
<ul>
<li><a href="https://lapras.connpass.com/event/214564/" target="_blank" rel="noopener noreferrer">公開設計レビュー「LAPRASのDB設計についてそーだいさんに相談してみた」</a>
</li>
</ul>
</li>
<li>2021/06/09
<ul>
<li><a href="https://gospecreading.connpass.com/event/214631/" target="_blank" rel="noopener noreferrer">Go Language Specification 輪読会 #23</a>
</li>
</ul>
</li>
<li>2021/06/08
<ul>
<li><a href="https://cartaholdings.connpass.com/event/212538/" target="_blank" rel="noopener noreferrer">『ドメイン駆動設計入門』×『事業をエンジニアリングする技術者たち』パネルディスカッション</a>
</li>
</ul>
</li>
<li>2021/06/05
<ul>
<li><a href="https://ddd-community-jp.connpass.com/event/214264/" target="_blank" rel="noopener noreferrer">エリック・エヴァンスのドメイン駆動設計 輪読会「第15章 蒸留」前編</a>
</li>
</ul>
</li>
<li>2021/05/30
<ul>
<li><a href="https://kyotogo.connpass.com/event/213814/" target="_blank" rel="noopener noreferrer">Kyoto.go remote #20 Discord LT会</a>
</li>
</ul>
</li>
<li>2021/05/28
<ul>
<li><a href="https://forkwell.connpass.com/event/214027/" target="_blank" rel="noopener noreferrer">The Global Dev Study #2 - JAMstack</a>
</li>
</ul>
</li>
<li>2021/05/26
<ul>
<li><a href="https://chatwork.connpass.com/event/204879/" target="_blank" rel="noopener noreferrer">Chatwork Dev Day 2021</a>
</li>
</ul>
</li>
<li>2021/05/26
<ul>
<li><a href="https://gospecreading.connpass.com/event/213272/" target="_blank" rel="noopener noreferrer">Go Language Specification 輪読会 #22</a>
</li>
</ul>
</li>
<li>2021/05/25
<ul>
<li><a href="https://chatwork.connpass.com/event/209207/" target="_blank" rel="noopener noreferrer">『レイヤードアーキテクチャと Redux』～ FPUI 研究ラジオ #3</a>
</li>
</ul>
</li>
<li>2021/05/22
<ul>
<li><a href="https://ddd-community-jp.connpass.com/event/212841/" target="_blank" rel="noopener noreferrer">エリック・エヴァンスのドメイン駆動設計 輪読会「第14章 モデルの整合性を維持する」後編</a>
</li>
</ul>
</li>
<li>2021/05/21
<ul>
<li><a href="https://future.connpass.com/event/211765/" target="_blank" rel="noopener noreferrer">Future Tech Night #10 ～進化するJava。標準API/Tomcat編～</a>
</li>
</ul>
</li>
<li>2021/05/20
<ul>
<li><a href="https://kaminashi.connpass.com/event/210006/" target="_blank" rel="noopener noreferrer">製造現場を変えろ。ソフトウェアエンジニアが挑む爆速DX</a>
</li>
</ul>
</li>
<li>2021/05/17
<ul>
<li><a href="https://forkwell.connpass.com/event/205147/" target="_blank" rel="noopener noreferrer">GaaS Study #1 ー平井大臣に聞く、デジタル庁が解くべき課題とITエンジニアの役割</a>
</li>
</ul>
</li>
<li>2021/05/12
<ul>
<li><a href="https://gospecreading.connpass.com/event/211338/" target="_blank" rel="noopener noreferrer">Go Language Specification 輪読会 #21</a>
</li>
</ul>
</li>
<li>2021/05/08
<ul>
<li><a href="https://ddd-community-jp.connpass.com/event/211642/" target="_blank" rel="noopener noreferrer">エリック・エヴァンスのドメイン駆動設計 輪読会「第14章 モデルの整合性を維持する」中編</a>
</li>
</ul>
</li>
<li>2021/04/25
<ul>
<li><a href="https://kyotogo.connpass.com/event/210336/" target="_blank" rel="noopener noreferrer">Kyoto.go remote #19 GoCon感想戦</a>
</li>
</ul>
</li>
<li>2021/04/24
<ul>
<li><a href="https://gocon.connpass.com/event/208896/" target="_blank" rel="noopener noreferrer">Go Conference 2021 Spring (Online)</a>
</li>
</ul>
</li>
<li>2021/04/24
<ul>
<li><a href="https://ddd-community-jp.connpass.com/event/209583/" target="_blank" rel="noopener noreferrer">エリック・エヴァンスのドメイン駆動設計 輪読会「第14章 モデルの整合性を維持する」前編</a>
</li>
</ul>
</li>
<li>2021/04/22
<ul>
<li><a href="https://gocon.connpass.com/event/210571/" target="_blank" rel="noopener noreferrer">Go Conference 2021 Spring Online 前夜祭</a>
</li>
</ul>
</li>
<li>2021/04/21
<ul>
<li><a href="https://gospecreading.connpass.com/event/209990/" target="_blank" rel="noopener noreferrer">Go Language Specification 輪読会 #20</a>
</li>
</ul>
</li>
<li>2021/04/20
<ul>
<li><a href="https://kichijojipm.connpass.com/event/210242/" target="_blank" rel="noopener noreferrer">吉祥寺.pm26【オンライン】</a>
</li>
</ul>
</li>
<li>2021/04/15
<ul>
<li><a href="https://gospecreading.connpass.com/event/208080/" target="_blank" rel="noopener noreferrer">入門Go言語仕様輪読会 第3回（初心者でも丁寧にサポート）</a>
</li>
</ul>
</li>
<li>2021/04/07
<ul>
<li><a href="https://mercari.connpass.com/event/207062/" target="_blank" rel="noopener noreferrer">Mercari Platform Group Tech Talk #1 (Day2)</a>
</li>
</ul>
</li>
<li>2021/04/07
<ul>
<li><a href="https://gospecreading.connpass.com/event/208563/" target="_blank" rel="noopener noreferrer">Go Language Specification 輪読会 #19</a>
</li>
</ul>
</li>
<li>2021/04/03
<ul>
<li><a href="https://ddd-community-jp.connpass.com/event/208197/" target="_blank" rel="noopener noreferrer">エリック・エヴァンスのドメイン駆動設計 輪読会「第12、13章」</a>
</li>
</ul>
</li>
<li>2021/03/31
<ul>
<li><a href="https://serverless-newworld.connpass.com/event/207516/" target="_blank" rel="noopener noreferrer">サーバーレスアンチパターン今昔物語 最終回</a>
</li>
</ul>
</li>
<li>2021/03/26
<ul>
<li><a href="https://chatwork.connpass.com/event/206713/" target="_blank" rel="noopener noreferrer">『クライアントサイド DDD を考える』～ FPUI 研究ラジオ #2</a>
</li>
</ul>
</li>
<li>2021/03/25
<ul>
<li><a href="https://k8sjp.connpass.com/event/206303/" target="_blank" rel="noopener noreferrer">Kubernetes Meetup Tokyo #40</a>
</li>
</ul>
</li>
<li>2021/03/24
<ul>
<li><a href="https://gospecreading.connpass.com/event/207204/" target="_blank" rel="noopener noreferrer">Go Language Specification 輪読会 #18</a>
</li>
</ul>
</li>
<li>2021/03/21
<ul>
<li><a href="https://kyotogo.connpass.com/event/205324/" target="_blank" rel="noopener noreferrer">Kyoto.go remote #18 Discord LT会</a>
</li>
</ul>
</li>
<li>2021/03/20
<ul>
<li><a href="https://ddd-community-jp.connpass.com/event/206838/" target="_blank" rel="noopener noreferrer">エリック・エヴァンスのドメイン駆動設計 輪読会「第11章 アナリシスパターンを適用する」</a>
</li>
</ul>
</li>
<li>2021/03/19
<ul>
<li><a href="https://future.connpass.com/event/206387/" target="_blank" rel="noopener noreferrer">Future Tech Night #7 〜フューチャーの開発事例と共に学べるGo勉強会〜</a>
</li>
</ul>
</li>
<li>2021/03/18
<ul>
<li><a href="https://gospecreading.connpass.com/event/205420/" target="_blank" rel="noopener noreferrer">入門Go言語仕様輪読会 第2回（初心者でも丁寧にサポート）</a>
</li>
</ul>
</li>
<li>2021/03/15
<ul>
<li><a href="https://http-tokyo.connpass.com/event/205846/" target="_blank" rel="noopener noreferrer">HTTP/Tokyo #2 (オンライン開催)</a>
</li>
</ul>
</li>
<li>2021/03/10
<ul>
<li><a href="https://gospecreading.connpass.com/event/205670/" target="_blank" rel="noopener noreferrer">Go Language Specification 輪読会 #17</a>
</li>
</ul>
</li>
<li>2021/03/08
<ul>
<li><a href="https://gcpug-tokyo.connpass.com/event/205839/" target="_blank" rel="noopener noreferrer">GCPUG Tokyo GKE Day March 2021</a>
</li>
</ul>
</li>
<li>2021/03/06
<ul>
<li><a href="https://ddd-community-jp.connpass.com/event/205302/" target="_blank" rel="noopener noreferrer">エリック・エヴァンスのドメイン駆動設計 輪読会「第10章 しなやかな設計」後半</a>
</li>
</ul>
</li>
<li>2021/03/03
<ul>
<li><a href="https://shuuu-mai.connpass.com/event/205747/" target="_blank" rel="noopener noreferrer">オンライン開催【シューマイ】Tech Lead Engineerから最新技術を学べ！Go編</a>
</li>
</ul>
</li>
<li>2021/03/02
<ul>
<li><a href="https://serverless-newworld.connpass.com/event/205373/" target="_blank" rel="noopener noreferrer">Monthly AWS Serverless Update 2021/02</a>
</li>
</ul>
</li>
<li>2021/02/24
<ul>
<li><a href="https://gospecreading.connpass.com/event/204419/" target="_blank" rel="noopener noreferrer">Go Language Specification 輪読会 #16</a>
</li>
</ul>
</li>
<li>2021/02/21
<ul>
<li><a href="https://kyotogo.connpass.com/event/203515/" target="_blank" rel="noopener noreferrer">Kyoto.go remote #17 Discord LT会</a>
</li>
</ul>
</li>
<li>2021/02/20
<ul>
<li><a href="https://ddd-community-jp.connpass.com/event/204026/" target="_blank" rel="noopener noreferrer">エリック・エヴァンスのドメイン駆動設計 輪読会「第10章 しなやかな設計」前半</a>
</li>
</ul>
</li>
<li>2021/02/19
<ul>
<li><a href="https://gcpug-tokyo.connpass.com/event/202656/" target="_blank" rel="noopener noreferrer">GAE 1st Gen Migration Plan Discussion Day Part 2</a>
</li>
</ul>
</li>
<li>2021/02/18
<ul>
<li><a href="https://gospecreading.connpass.com/event/202388/" target="_blank" rel="noopener noreferrer">入門Go言語仕様輪読会（初心者でも丁寧にサポート）</a>
</li>
</ul>
</li>
<li>2021/02/13
<ul>
<li><a href="https://nrs-seminar.connpass.com/event/202597/" target="_blank" rel="noopener noreferrer">『ドメイン駆動設計入門』パネルディスカッション with レビュアーズ</a>
</li>
</ul>
</li>
<li>2021/02/10
<ul>
<li><a href="https://gospecreading.connpass.com/event/202782/" target="_blank" rel="noopener noreferrer">Go Language Specification 輪読会 #15</a>
</li>
</ul>
</li>
<li>2021/02/06
<ul>
<li><a href="https://ddd-community-jp.connpass.com/event/202456/" target="_blank" rel="noopener noreferrer">エリック・エヴァンスのドメイン駆動設計 輪読会「第9章 暗黙的な概念を明示的にする」後半</a>
</li>
</ul>
</li>
<li>2021/02/05
<ul>
<li><a href="https://mercari.connpass.com/event/202053/" target="_blank" rel="noopener noreferrer">mercari.go #15 オンライン開催</a>
</li>
</ul>
</li>
<li>2021/02/03
<ul>
<li><a href="https://serverless-newworld.connpass.com/event/202818/" target="_blank" rel="noopener noreferrer">Monthly AWS Serverless Update 202101</a>
</li>
</ul>
</li>
<li>2021/01/28
<ul>
<li><a href="https://runtime.connpass.com/event/198071/" target="_blank" rel="noopener noreferrer">Container Runtime Meetup #3</a>
</li>
</ul>
</li>
<li>2021/01/28
<ul>
<li><a href="https://m3-engineer.connpass.com/event/200495/" target="_blank" rel="noopener noreferrer">エムスリーアンケートシステムの技術：マイクロサービス/認証</a>
</li>
</ul>
</li>
<li>2021/01/27
<ul>
<li><a href="https://mercari.connpass.com/event/196609/" target="_blank" rel="noopener noreferrer">merpay Tech Talk ~ BackendのテストとQAのフレームワークとツールについて</a>
</li>
</ul>
</li>
<li>2021/01/27
<ul>
<li><a href="https://gospecreading.connpass.com/event/201445/" target="_blank" rel="noopener noreferrer">Go Language Specification輪読会 #14</a>
</li>
</ul>
</li>
<li>2021/01/26
<ul>
<li><a href="https://forkwell.connpass.com/event/197119/" target="_blank" rel="noopener noreferrer">Infra Study Meetup #10 パネルディスカッション - 2021年インフラ始め編</a>
</li>
</ul>
</li>
<li>2021/01/23
<ul>
<li><a href="https://ddd-community-jp.connpass.com/event/201113/" target="_blank" rel="noopener noreferrer">エリック・エヴァンスのドメイン駆動設計 輪読会「第9章 暗黙的な概念を明示的にする」前半</a>
</li>
</ul>
</li>
<li>2021/01/20
<ul>
<li><a href="https://mercari.connpass.com/event/198772/" target="_blank" rel="noopener noreferrer">メルペイCTO &amp;amp; CBOによる、Fintech業界 現在のトレンドと未来の話 （つづき）</a>
</li>
</ul>
</li>
<li>2021/01/16
<ul>
<li><a href="https://kyotogo.connpass.com/event/199400/" target="_blank" rel="noopener noreferrer">Kyoto.go remote #16 あけましてLT会</a>
</li>
</ul>
</li>
<li>2021/01/15
<ul>
<li><a href="https://connpass.com/event/197484/" target="_blank" rel="noopener noreferrer">Qiita Advent Calendar Online Meetup</a>
</li>
</ul>
</li>
<li>2021/01/13
<ul>
<li><a href="https://gospecreading.connpass.com/event/198877/" target="_blank" rel="noopener noreferrer">Go Language Specification輪読会 #13</a>
</li>
</ul>
</li>
<li>2021/01/09
<ul>
<li><a href="https://ddd-community-jp.connpass.com/event/199503/" target="_blank" rel="noopener noreferrer">エリック・エヴァンスのドメイン駆動設計 輪読会「第8章 ブレイクスルー」</a>
</li>
</ul>
</li>
</ul>
<h2 id="github">Github</h2>
<ul>
<li>2021/10/16
<ul>
<li><a href="https://github.com/yyh-gl/gomish" target="_blank" rel="noopener noreferrer">yyh-gl/gomish</a>
</li>
</ul>
</li>
<li>2021/03/31
<ul>
<li><a href="https://github.com/yyh-gl/yyh-gl.deno.dev" target="_blank" rel="noopener noreferrer">yyh-gl/yyh-gl.deno.dev</a>
</li>
</ul>
</li>
<li>2021/03/07
<ul>
<li><a href="https://github.com/yyh-gl/JetBrainsIDE-settings" target="_blank" rel="noopener noreferrer">yyh-gl/JetBrainsIDE-settings</a>
</li>
</ul>
</li>
<li>2021/01/04
<ul>
<li><a href="https://github.com/yyh-gl/cron-jobs" target="_blank" rel="noopener noreferrer">yyh-gl/cron-jobs</a>
</li>
</ul>
</li>
</ul>
<p><a href="https://lapras.com/" title="LAPRASポートフォリオはこちらから" target="_blank" rel="noopener noreferrer">LAPRASポートフォリオはこちらから</a>
</p>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/%E5%8B%89%E5%BC%B7%E4%BC%9A" term="%E5%8B%89%E5%BC%B7%E4%BC%9A" label="勉強会"/><category scheme="https://yyh-gl.github.io/tech-blog/categories/%E3%82%A2%E3%82%AF%E3%83%86%E3%82%A3%E3%83%93%E3%83%86%E3%82%A3" term="%E3%82%A2%E3%82%AF%E3%83%86%E3%82%A3%E3%83%93%E3%83%86%E3%82%A3" label="アクティビティ"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">徒然なるままに go build と build tag を見ていく</title><link href="https://yyh-gl.github.io/tech-blog/blog/go-build/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/activity-2020/?utm_source=atom_feed" rel="related" type="text/html" title="【2020年】アクティビティまとめ"/><link href="https://yyh-gl.github.io/tech-blog/blog/profile-readme-updater/?utm_source=atom_feed" rel="related" type="text/html" title="【GitHub Actions】GitHubのプロフィールを自動更新する仕組みを作った"/><link href="https://yyh-gl.github.io/tech-blog/blog/uncredible-codes-from-go-spec/?utm_source=atom_feed" rel="related" type="text/html" title="The Go Programming Language Specificationで知った「こんなことできるだ」を紹介"/><link href="https://yyh-gl.github.io/tech-blog/blog/support-webp/?utm_source=atom_feed" rel="related" type="text/html" title="ブログの画像をWebPに変えた話とSafariで表示されない件について"/><link href="https://yyh-gl.github.io/tech-blog/blog/go-switch-fallthrough/?utm_source=atom_feed" rel="related" type="text/html" title="【Go】Switch文のfallthroughに関するまとめ"/><id>https://yyh-gl.github.io/tech-blog/blog/go-build/</id><author><name>yyh-gl</name></author><published>2021-12-19T00:00:00+00:00</published><updated>2021-12-19T00:00:00+00:00</updated><content type="html"><![CDATA[<blockquote>Go #1 Advent Calendar 2021 19日目</blockquote><br>
<p>本記事は『<a href="https://qiita.com/advent-calendar/2021/go" target="_blank" rel="noopener noreferrer">Go #1 Advent Calendar 2021 19日目</a>
』の記事です。</p>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2021/12/go-build/advent_calendar_2021.webp" width="500">
<h1 id="はじめに">はじめに</h1>
<p>Goには標準で便利なコマンドがたくさんあります。</p>
<p>有名どころで言えば、</p>
<ul>
<li><code>generate</code></li>
<li><code>fmt</code></li>
<li><code>vet</code></li>
</ul>
<p>などがあります。</p>
<p>中でも、Goのコードをコンパイルするための<code>build</code>コマンドは、
みなさんも日頃の開発で使用しているのではないでしょうか。</p>
<p><code>build</code>は特に難しいことをしなければ、とてもシンプルに使えるコマンドです。<br>
よって、直感的に「こうすればコンパイルできるんでしょー」くらいの感覚で、
ドキュメントを注視しなくても使い始められるでしょう。</p>
<p>しかし、<code>build</code>は深く見ていくと意外と奥が深いコマンドです。<br>
今回はそんな<code>build</code>について深ぼっていこうと思います。</p>
<h1 id="buildコマンドとは"><code>build</code>コマンドとは</h1>
<p>まずは<code>build</code>とはどういったコマンドなのか見ていきましょう。</p>
<p><code>help</code>を使って調べてみます。</p>
<pre><code class="language-shell">$ go help build

Build compiles the packages named by the import paths,
along with their dependencies, but it does not install the results.

&lt;省略&gt;

When compiling packages, build ignores files that end in '_test.go'.

&lt;省略&gt;

When compiling multiple packages or a single non-main package,
build compiles the packages but discards the resulting object,
serving only as a check that the packages can be built.

&lt;省略&gt;

	-tags tag,list
		a comma-separated list of build tags to consider satisfied during the
		build. For more information about build tags, see the description of
		build constraints in the documentation for the go/build package.
		(Earlier versions of Go used a space-separated list, and that form
		is deprecated but still recognized.)

&lt;省略&gt;
</code></pre>
<p><code>build</code>はコンパイルするやつですよという文章から始まり、
いろいろ書かれていますが、今回は以下の4点について見てみます。</p>
<ul>
<li><code>build</code>はインストールを行わない</li>
<li>コンパイル時に<code>_test.go</code>ファイルは無視する</li>
<li>複数パッケージor単一の非mainパッケージのコンパイル時は結果のオブジェクトを破棄する</li>
<li>build tagについて</li>
</ul>
<h1 id="buildはインストールを行わない"><code>build</code>はインストールを行わない</h1>
<p><code>build</code>はコンパイルだけを行い、インストールは行いません。</p>
<p>「え、そりゃそうでしょ」「インストール？」ってなる人も多いのではないでしょうか。<br>
当たり前と言われればそうですが、ヘルプにて丁寧に説明されています。</p>
<br>
<p>まず、インストールとはなにかを理解するために、<code>build</code>と<code>insatll</code>の挙動の違いを見てみましょう。<br></p>
<p>なぜ、<code>install</code>と比較するかと言うと、下記のとおり<code>install</code>はコンパイルとインストールを行うコマンドだからです。</p>
<pre><code class="language-shell">$ go help install
usage: go install [build flags] [packages]

Install compiles and installs the packages named by the import paths.
</code></pre>
<br>
<p>まずは<code>build</code>してみます。<br>
（インストール物は<code>GOBIN</code>配下に配置されます）</p>
<pre><code class="language-shell">$ go build main.go
$ ls -l $GOBIN/
total 33832
-rwxr-xr-x  1 yyh-gl  staff  13989584  8 17 02:05 go
-rwxr-xr-x  1 yyh-gl  staff   3326080  8 17 02:05 gofmt
</code></pre>
<p><code>main.go</code>のコンパイル&amp;インストールしたものがないですね。</p>
<p>次に<code>install</code>してみます。</p>
<pre><code class="language-shell">$ go install main.go
$ ls -l $GOBIN/
total 37488
-rwxr-xr-x  1 yyh-gl  staff  13989584  8 17 02:05 go
-rwxr-xr-x  1 yyh-gl  staff   3326080  8 17 02:05 gofmt
-rwxr-xr-x  1 yyh-gl  staff   1869456 12 17 22:30 main
</code></pre>
<p><code>main.go</code>のコンパイル物である<code>main</code>が<code>GOBIN</code>配下に設置されています。<br>
つまり、インストールが行われています。</p>
<p><code>build</code>と<code>install</code>には上記のような差があります。</p>
<br>
<p>両者の使い分けについては、以下の記事などを参考にすると良いのではないでしょうか。</p>
<ul>
<li><a href="https://esola.co/posts/2016/go-build-vs-go-install" target="_blank" rel="noopener noreferrer">go build vs go install</a>
</li>
<li><a href="https://peter.bourgon.org/go-best-practices-2016/#build-and-deploy" target="_blank" rel="noopener noreferrer">Go best practices, six years in</a>

<ul>
<li>翻訳記事：<a href="https://postd.cc/go-best-practices-2016/#build-and-deploy" target="_blank" rel="noopener noreferrer">6年間におけるGoのベストプラクティス</a>
</li>
</ul>
</li>
</ul>
<!-- textlint-disable ja-technical-writing/no-doubled-joshi -->
<p>僕は、自プロジェクトの開発物のコンパイルには<code>build</code>を使い、ツールのインストールには<code>install</code>を使うようにしています。<br>
開発物のコンパイル結果は<code>GOBIN</code>配下より、そのプロジェクト配下に入れておいた方がなにかと便利だからです。
コンパイル物を動かす場所がローカルではない場合、そもそも<code>GOBIN</code>配下にある必要もないですしね。<br>
逆にツール系は特に理由がないかぎりは、<code>GOBIN</code>配下にあった方がPATHが通っているので使い勝手がいいですよね。</p>
<!-- textlint-enable ja-technical-writing/no-doubled-joshi -->
<h1 id="コンパイル時に_testgoファイルは無視する">コンパイル時に<code>_test.go</code>ファイルは無視する</h1>
<p>これは知っている人も多いと思います。<br>
システムを動かす上でテストコードは不要ですし、無視されるのも納得ですね。</p>
<p>実際に挙動を見てみます。<br>
<code>invalid_test.go</code>（<a href="https://go.dev/play/p/aeFBAGvTQR3" target="_blank" rel="noopener noreferrer">Go Playground</a>
）というコンパイルエラーになるテストファイルを対象に<code>build</code>を実行してみます。</p>
<pre><code class="language-shell">$ go build invalid_test.go
&lt;正常終了するのでなにも表示されない&gt;
</code></pre>
<p>このように正常終了します。<br>
つまり、ビルド対象に含まれていないため、そもそもコンパイルされておらず、エラーが出ません。</p>
<p>同じファイルを<code>invalid_test2.go</code>という名前に変更し、もう一度<code>build</code>してみます。</p>
<pre><code class="language-shell">$ go build invalid_test2.go
# command-line-arguments
./invalid_test2.go:4:1: syntax error: unexpected EOF, expecting name or (
</code></pre>
<p>コンパイルエラーが出ましたね。<br>
今度はビルド対象に含まれたようです。</p>
<br>
<p><code>_test.go</code>という命名を基にビルド対象か否かを判定していることが分かります。</p>
<h1 id="複数パッケージor単一の非mainパッケージのコンパイル時は結果のオブジェクトを破棄する">複数パッケージor単一の非mainパッケージのコンパイル時は結果のオブジェクトを破棄する</h1>
<p><code>help</code>で言うと下記の記述に関しての内容です。</p>
<pre><code class="language-txt">When compiling multiple packages or a single non-main package,
build compiles the packages but discards the resulting object,
serving only as a check that the packages can be built.
</code></pre>
<p>実際にmainパッケージではない<code>not_main.go</code>（<a href="https://go.dev/play/p/vZX_f2qMhcO" target="_blank" rel="noopener noreferrer">Go Playground</a>
）に対して<code>build</code>を実行してみます。</p>
<pre><code class="language-shell">$ go build not_main.go
$ ls -l
total 8
-rw-r--r--  1 yyh-gl  staff  65 12 17 23:14 not_main.go
</code></pre>
<p>このようにビルド自体は正常終了しますが、生成物がありません。</p>
<p>次に、<code>not_main.go</code>にエラーを仕込んでみます。<br>
（<a href="https://go.dev/play/p/JrP55PnPYGI" target="_blank" rel="noopener noreferrer">Go Playground</a>
）</p>
<pre><code class="language-shell">$ go build not_main.go
# command-line-arguments
./not_main.go:4:2: undefined: fmt
$ ls -l
total 8
-rw-r--r--  1 yyh-gl  staff  51 12 17 23:16 not_main.go
</code></pre>
<p>エラーが出ました。<br>
もちろん生成物はありません。</p>
<blockquote>
<p>serving only as a check that the packages can be built.<br>
ビルド可能かどうかのチェックだけを行う</p>
</blockquote>
<p>ヘルプに記載のあるとおりですね。</p>
<br>
<p>複数パッケージに対してビルドをかけてみても、同様に生成物はありませんでした。<br>
（<a href="https://go.dev/play/p/mscomS3W0d7" target="_blank" rel="noopener noreferrer">Go Playground</a>
）</p>
<pre><code class="language-shell">$ go build ./...
$ ls -l
total 24
drwxr-xr-x  3 yyh-gl  staff    96 12 18 18:27 foo
-rw-r--r--  1 yyh-gl  staff   204 12 18 10:39 go.mod
-rw-r--r--  1 yyh-gl  staff  1526 12 17 23:41 go.sum
drwxr-xr-x  3 yyh-gl  staff    96 12 18 18:26 hoge
-rw-r--r--  1 yyh-gl  staff   145 12 18 18:28 main.go
</code></pre>
<p><code>hoge</code>と<code>foo</code>はディレクトリだから拡張子がないだけで実行ファイルではありません。</p>
<h1 id="build-tagについて">build tagについて</h1>
<p>最後にbuild tagについて見て終わろうと思います。</p>
<h2 id="build-tag-とは">build tag とは</h2>
<p><code>//go:build</code></p>
<p>↑コードの先頭付近に記載されているこんなやつです。<br>
<a href="https://pkg.go.dev/cmd/go#hdr-Build_constraints" target="_blank" rel="noopener noreferrer">公式Doc</a>
</p>
<p>ビルド対象を切り分けるのに使います。</p>
<p>実際に試してみます。</p>
<p>まずは以下のようなコードを用意します。<br>
<a href="https://go.dev/play/p/7C_jC-oc6-5" target="_blank" rel="noopener noreferrer">Go Playground</a>
</p>
<p><code>main.go</code></p>
<pre><code class="language-go">package main

import &quot;github.com/yyh-gl/go-playground/src&quot;

func main() {
	src.Hoge()
}
</code></pre>
<p><code>src/hoge1.go</code></p>
<pre><code class="language-go">//go:build hoge

package src

import &quot;fmt&quot;

func Hoge() {
	fmt.Println(&quot;hoge1: //go:build hoge&quot;)
}
</code></pre>
<p><code>src/hoge2.go</code></p>
<pre><code class="language-go">//go:build !hoge

package src

import &quot;fmt&quot;

func Hoge() {
	fmt.Println(&quot;hoge2: //go:build !hoge&quot;)
}
</code></pre>
<p>これらのファイルに対して、
<code>-tags</code>オプションを使い、ビルド対象を指定した上で<code>build</code>を実行してみます。</p>
<pre><code class="language-shell">$ go build -tags hoge main.go
$ ./main
hoge1: //go:build hoge
</code></pre>
<p><code>//go:build hoge</code>を持つ<code>hoge1.go</code>の内容が実行されましたね。<br>
逆に<code>//go:build !hoge</code>を持つ<code>hoge2.go</code>は無視されました。</p>
<p>今回は<code>-tags hoge</code>を指定したので、build tagとして<code>hoge</code>を指定したファイルがビルド対象となりました。</p>
<br>
<!-- textlint-disable ja-technical-writing/no-doubled-joshi -->
<p>逆に<code>//go:build !hoge</code>は<code>hoge</code>が指定されていないときにビルド対象になることを意味するので、
今回は無視されました。（<code>!</code>が否定を意味します）</p>
<!-- textlint-enable ja-technical-writing/no-doubled-joshi -->
<p><code>hoge2.go</code>をビルド対象としたい場合は以下のようにすればできます。</p>
<pre><code class="language-shell">$ go build -tags foo main.go
$ ./main
hoge2: //go:build !hoge
</code></pre>
<pre><code class="language-shell">$ go build main.go
$ ./main
hoge2: //go:build !hoge
</code></pre>
<p>特筆すべき点は<code>-tags</code>を指定しない場合もビルド対象になる点です。</p>
<br>
<p>AND条件やOR条件も使用できるので、できることはいろいろとありそうですね。<br>
<a href="https://pkg.go.dev/cmd/go#hdr-Build_constraints" target="_blank" rel="noopener noreferrer">参考</a>
</p>
<h3 id="build-tag-が使われている例">build tag が使われている例</h3>
<p>最後に build tag が実際どこで使われているのか紹介して終わります。</p>
<p>Googleが作成したツールで、<code>Wire</code>というDIツールがあります。<br>
<a href="https://github.com/google/wire" target="_blank" rel="noopener noreferrer">google/wire</a>
</p>
<br>
<p>Wireでは、依存関係を定義したGoファイル（<code>wire.go</code>）を見て、
依存関係を解決し、必要なコード郡（<code>wire_gen.go</code>）を生成します。</p>
<p>システムを動かすにあたって必要になるコードは<code>wire_gen.go</code>のみです。<br>
<code>wire.go</code>はコード生成時には必要ですが、システムを動かすときには必要ありません。<br>
したがって、各ファイルのbuild tagは以下のようになっています。</p>
<ul>
<li><code>wire.go</code>: <code>wireinject</code></li>
<li><code>wire_gen.go</code>: <code>!wireinject</code></li>
</ul>
<p>すなわち、build tagの指定なしで<code>build</code>を実行すると、
<code>wire.go</code>は無視して<code>wire_gen.go</code>だけを見るようになっています。</p>
<p>ちなみに、<code>wireinject</code>タグはWireによるコード生成時にのみ指定されます。<br>
<a href="https://github.com/google/wire/blob/v0.5.0/internal/wire/parse.go#L358" target="_blank" rel="noopener noreferrer">参考コード</a>
</p>
<p>よって、コード生成時には、逆に<code>wire_gen.go</code>は無視して<code>wire.go</code>だけを見るようになっています。</p>
<br>
<p><a href="https://github.com/google/wire/blob/main/_tutorial/README.md#using-wire-to-generate-code" target="_blank" rel="noopener noreferrer">Wire公式チュートリアル</a>

にbuild tagに関する言及があるのであわせてご覧ください。</p>
<h1 id="さいごに">さいごに</h1>
<p>今回は、僕が普段何気なく使っていた<code>build</code>について深ぼってみました。<br>
ただ、<code>build</code>にはまだ他にもオプションがあるので、
一度調べてみると「こんなことできたんだ」という発見に繋がるかもしれません。</p>
<p>みなさんもぜひ一度、Goコマンドについて深ぼってみてはいかかでしょうか。</p>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/go" term="go" label="Go"/><category scheme="https://yyh-gl.github.io/tech-blog/categories/advent-calendar" term="advent-calendar" label="Advent Calendar"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">【2020年】アクティビティまとめ</title><link href="https://yyh-gl.github.io/tech-blog/blog/activity-2020/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/profile-readme-updater/?utm_source=atom_feed" rel="related" type="text/html" title="【GitHub Actions】GitHubのプロフィールを自動更新する仕組みを作った"/><link href="https://yyh-gl.github.io/tech-blog/blog/uncredible-codes-from-go-spec/?utm_source=atom_feed" rel="related" type="text/html" title="The Go Programming Language Specificationで知った「こんなことできるだ」を紹介"/><link href="https://yyh-gl.github.io/tech-blog/blog/support-webp/?utm_source=atom_feed" rel="related" type="text/html" title="ブログの画像をWebPに変えた話とSafariで表示されない件について"/><link href="https://yyh-gl.github.io/tech-blog/blog/go-switch-fallthrough/?utm_source=atom_feed" rel="related" type="text/html" title="【Go】Switch文のfallthroughに関するまとめ"/><link href="https://yyh-gl.github.io/tech-blog/blog/podcast-matome-texta-200827/?utm_source=atom_feed" rel="related" type="text/html" title="texta.fm #1 まとめ"/><id>https://yyh-gl.github.io/tech-blog/blog/activity-2020/</id><author><name>yyh-gl</name></author><published>2021-02-23T09:41:54+00:00</published><updated>2021-02-23T09:41:54+00:00</updated><content type="html"><![CDATA[<blockquote>今さらではありますが</blockquote><h1 id="laprasでおもしろい機能を見つけた">LAPRASでおもしろい機能を見つけた</h1>
<p><a href="https://lapras.com/" target="_blank" rel="noopener noreferrer">LAPRAS</a>
に2020年のアクティビティをまとめてくれる機能がありました。<br>
今回はその機能を使って（今さらながら）去年のアクティビティをメモしておきたいと思います。<br></p>
<p>以下、LAPRASで出力されたアクティビティを転記したものです。</p>
<p>・</p>
<p>・</p>
<p>・</p>
<h1 id="2020年のアウトプットと参加イベントを振り返ると">2020年のアウトプットと参加イベントを振り返ると</h1>
<p>今年アウトプットしたものや参加したイベントなどをまとめてみました。</p>
<h2 id="connpass">connpass</h2>
<!-- textlint-disable -->
<ul>
<li>2020/12/23
<ul>
<li><a href="https://serverless-newworld.connpass.com/event/198997/" target="_blank" rel="noopener noreferrer">サーバーレスアンチパターン今昔物語 第八夜 サーバーレスゆく年くる年2020/2021</a>
</li>
</ul>
</li>
<li>2020/12/22
<ul>
<li><a href="https://mercari.connpass.com/event/197356/" target="_blank" rel="noopener noreferrer">merpay Tech Talk｜QAx DevOps/マイクロサービス/Backend vol.2</a>
</li>
</ul>
</li>
<li>2020/12/21
<ul>
<li><a href="https://mercari.connpass.com/event/198574/" target="_blank" rel="noopener noreferrer">Software Design 1月号［第1特集］Goプログラミングスキルをレベルアップ執筆者座談会</a>
</li>
</ul>
</li>
<li>2020/12/19
<ul>
<li><a href="https://ddd-community-jp.connpass.com/event/198329/" target="_blank" rel="noopener noreferrer">エリック・エヴァンスのドメイン駆動設計 輪読会「第7章 言語を使用する：応用例」</a>
</li>
</ul>
</li>
<li>2020/12/16
<ul>
<li><a href="https://gospecreading.connpass.com/event/198876/" target="_blank" rel="noopener noreferrer">Go Language Specification輪読会 #12</a>
</li>
</ul>
</li>
<li>2020/12/15
<ul>
<li><a href="https://forkwell.connpass.com/event/194828/" target="_blank" rel="noopener noreferrer">Front-End Study #2「Performance Tuning in depth（仮）」</a>
</li>
</ul>
</li>
<li>2020/12/09
<ul>
<li><a href="https://gospecreading.connpass.com/event/197221/" target="_blank" rel="noopener noreferrer">Go Language Specification輪読会 #11</a>
</li>
</ul>
</li>
<li>2020/12/05
<ul>
<li><a href="https://ddd-community-jp.connpass.com/event/196732/" target="_blank" rel="noopener noreferrer">エリック・エヴァンスのドメイン駆動設計 輪読会「第6章 ドメインオブジェクトのライフサイクル」後編</a>
</li>
</ul>
</li>
<li>2020/12/03
<ul>
<li><a href="https://mercari.connpass.com/event/195066/" target="_blank" rel="noopener noreferrer">merpay Tech Talk ~ 決済基盤（Payment Platform）Backend裏話</a>
</li>
</ul>
</li>
<li>2020/11/30
<ul>
<li><a href="https://dmm.connpass.com/event/195179/" target="_blank" rel="noopener noreferrer">DMM meetup #22 〜DMMのプラットフォームが目指す経済圏とパーソナライズ戦略〜</a>
</li>
</ul>
</li>
<li>2020/11/27
<ul>
<li><a href="https://shomado.connpass.com/event/194529/" target="_blank" rel="noopener noreferrer">Sandbox Live 第2回目 〜ゲスト: ミノ駆動さん と とーますさん〜</a>
</li>
</ul>
</li>
<li>2020/11/27
<ul>
<li><a href="https://serverless-newworld.connpass.com/event/194966/" target="_blank" rel="noopener noreferrer">サーバーレスアンチパターン今昔物語 第七夜</a>
</li>
</ul>
</li>
<li>2020/11/26
<ul>
<li><a href="https://mercari.connpass.com/event/194635/" target="_blank" rel="noopener noreferrer">merpay Tech Talk〜DevOpsxQA、マイクロサービスxQA、BackendxQA〜</a>
</li>
</ul>
</li>
<li>2020/11/21
<ul>
<li><a href="https://ddd-community-jp.connpass.com/event/194892/" target="_blank" rel="noopener noreferrer">エリック・エヴァンスのドメイン駆動設計 輪読会「第6章 ドメインオブジェクトのライフサイクル」前編</a>
</li>
</ul>
</li>
<li>2020/11/18
<ul>
<li><a href="https://mercari.connpass.com/event/193703/" target="_blank" rel="noopener noreferrer">開発ライブ実況 #7 高難易度Goクイズ大会</a>
</li>
</ul>
</li>
<li>2020/11/14
<ul>
<li><a href="https://umedago.connpass.com/event/193373/" target="_blank" rel="noopener noreferrer">Umeda.go 2020 Autumn Online</a>
</li>
</ul>
</li>
<li>2020/11/11
<ul>
<li><a href="https://gospecreading.connpass.com/event/193820/" target="_blank" rel="noopener noreferrer">Go Language Specification輪読会 #10</a>
</li>
</ul>
</li>
<li>2020/11/11
<ul>
<li><a href="https://shuuu-mai.connpass.com/event/192971/" target="_blank" rel="noopener noreferrer">オンライン開催【シューマイ】Tech Lead Engineerから最新技術を学べ！マネジメント編</a>
</li>
</ul>
</li>
<li>2020/11/07
<ul>
<li><a href="https://ddd-community-jp.connpass.com/event/193423/" target="_blank" rel="noopener noreferrer">エリック・エヴァンスのドメイン駆動設計 輪読会「第5章 ソフトウェアで表現されたモデル」（後編）</a>
</li>
</ul>
</li>
<li>2020/11/05
<ul>
<li><a href="https://serverless-newworld.connpass.com/event/191711/" target="_blank" rel="noopener noreferrer">Monthly AWS Serverless Update 202011</a>
</li>
</ul>
</li>
<li>2020/11/04
<ul>
<li><a href="https://mercari.connpass.com/event/191846/" target="_blank" rel="noopener noreferrer">開発ライブ実況｜メルカリのUIをJetpack Composeで再現してみよう</a>
</li>
</ul>
</li>
<li>2020/11/02
<ul>
<li><a href="https://mercari.connpass.com/event/192864/" target="_blank" rel="noopener noreferrer">Gophers Office Hours #14 Goとセキュリティ vol.2</a>
</li>
</ul>
</li>
<li>2020/10/28
<ul>
<li><a href="https://gospecreading.connpass.com/event/192435/" target="_blank" rel="noopener noreferrer">Go Language Specification輪読会 #9</a>
</li>
</ul>
</li>
<li>2020/10/24
<ul>
<li><a href="https://ddd-community-jp.connpass.com/event/191946/" target="_blank" rel="noopener noreferrer">エリック・エヴァンスのドメイン駆動設計 輪読会「第5章 ソフトウェアで表現されたモデル」（前編）</a>
</li>
</ul>
</li>
<li>2020/10/23
<ul>
<li><a href="https://ginza-rails.connpass.com/event/189892/" target="_blank" rel="noopener noreferrer">【オンライン開催】銀座Rails#26@リンクアンドモチベーション</a>
</li>
</ul>
</li>
<li>2020/10/22
<ul>
<li><a href="https://serverless-newworld.connpass.com/event/190648/" target="_blank" rel="noopener noreferrer">サーバーレスアンチパターン今昔物語 第六夜</a>
</li>
</ul>
</li>
<li>2020/10/19
<ul>
<li><a href="https://mercari.connpass.com/event/191408/" target="_blank" rel="noopener noreferrer">Gophers Office Hours #13 〜セキュリティ回〜</a>
</li>
</ul>
</li>
<li>2020/10/14
<ul>
<li><a href="https://gospecreading.connpass.com/event/190833/" target="_blank" rel="noopener noreferrer">Go Language Specification輪読会 #8</a>
</li>
</ul>
</li>
<li>2020/10/13
<ul>
<li><a href="https://mercari.connpass.com/event/189445/" target="_blank" rel="noopener noreferrer">Gophers Office Hours #12 〜IoT, スマートホーム回〜</a>
</li>
</ul>
</li>
<li>2020/10/10
<ul>
<li><a href="https://ddd-community-jp.connpass.com/event/190629/" target="_blank" rel="noopener noreferrer">エリック・エヴァンスのドメイン駆動設計 輪読会「第4章 ドメインを隔離する」</a>
</li>
</ul>
</li>
<li>2020/10/10
<ul>
<li><a href="https://sendaigo.connpass.com/event/185474/" target="_blank" rel="noopener noreferrer">Go Conference &amp;lsquo;20 in Autumun SENDAI</a>
</li>
</ul>
</li>
<li>2020/10/09
<ul>
<li><a href="https://voyagegroup.connpass.com/event/190036/" target="_blank" rel="noopener noreferrer">そーだいなるVOYAGE GROUPの裏側 #Zucks フルサイクル開発者の文化</a>
</li>
</ul>
</li>
<li>2020/09/30
<ul>
<li><a href="https://gospecreading.connpass.com/event/189546/" target="_blank" rel="noopener noreferrer">Go Language Specification輪読会 #7</a>
</li>
</ul>
</li>
<li>2020/09/29
<ul>
<li><a href="https://serverless-newworld.connpass.com/event/188784/" target="_blank" rel="noopener noreferrer">サーバーレスアンチパターン今昔物語 第五夜 - 解体新書 -</a>
</li>
</ul>
</li>
<li>2020/09/26
<ul>
<li><a href="https://ddd-community-jp.connpass.com/event/188787/" target="_blank" rel="noopener noreferrer">エリック・エヴァンスのドメイン駆動設計 輪読会「第3章 モデルと実装を結びつける」</a>
</li>
</ul>
</li>
<li>2020/09/25
<ul>
<li><a href="https://mediado-go.connpass.com/event/186625/" target="_blank" rel="noopener noreferrer">MediaDo.go #2</a>
</li>
</ul>
</li>
<li>2020/09/23
<ul>
<li><a href="https://shuuu-mai.connpass.com/event/187657/" target="_blank" rel="noopener noreferrer">オンライン開催【シューマイ】Tech Lead Engineerから最新技術を学べ！Go編</a>
</li>
</ul>
</li>
<li>2020/09/23
<ul>
<li><a href="https://serverless-newworld.connpass.com/event/189691/" target="_blank" rel="noopener noreferrer">サーバーレスアンチパターン今昔物語 番外編</a>
</li>
</ul>
</li>
<li>2020/09/16
<ul>
<li><a href="https://gospecreading.connpass.com/event/188064/" target="_blank" rel="noopener noreferrer">Go Language Specification輪読会 #6</a>
</li>
</ul>
</li>
<li>2020/09/16
<ul>
<li><a href="https://mercari.connpass.com/event/188595/" target="_blank" rel="noopener noreferrer">開発ライブ実況 #5 デバッグしているところを見てみよう (メルペイBackendエンジニア)</a>
</li>
</ul>
</li>
<li>2020/09/09
<ul>
<li><a href="https://serverless-newworld.connpass.com/event/187317/" target="_blank" rel="noopener noreferrer">サーバーレスアンチパターン今昔物語 第四夜 - 夏の残り香 -</a>
</li>
</ul>
</li>
<li>2020/09/08
<ul>
<li><a href="https://mercari.connpass.com/event/186823/" target="_blank" rel="noopener noreferrer">Gophers Office Hours #10 〜コンパイラ、低レイヤ回 vol.2〜</a>
</li>
</ul>
</li>
<li>2020/09/05
<ul>
<li><a href="https://ddd-community-jp.connpass.com/event/186935/" target="_blank" rel="noopener noreferrer">エリック・エヴァンスのドメイン駆動設計 輪読会「第2章 コミュニケーションと言語の使い方」</a>
</li>
</ul>
</li>
<li>2020/09/02
<ul>
<li><a href="https://gospecreading.connpass.com/event/186586/" target="_blank" rel="noopener noreferrer">Go Language Specification輪読会 #5</a>
</li>
</ul>
</li>
<li>2020/08/31
<ul>
<li><a href="https://gocon.connpass.com/event/186317/" target="_blank" rel="noopener noreferrer">(Online only) Go 1.15 Release Party in Japan</a>
</li>
</ul>
</li>
<li>2020/08/25
<ul>
<li><a href="https://mercari.connpass.com/event/184393/" target="_blank" rel="noopener noreferrer">Gophers Office Hours #9 〜静的解析回〜</a>
</li>
</ul>
</li>
<li>2020/08/22
<ul>
<li><a href="https://ddd-community-jp.connpass.com/event/185933/" target="_blank" rel="noopener noreferrer">エリック・エヴァンスのドメイン駆動設計 輪読会「第1章 知識をかみ砕く」</a>
</li>
</ul>
</li>
<li>2020/08/19
<ul>
<li><a href="https://gospecreading.connpass.com/event/185252/" target="_blank" rel="noopener noreferrer">Go Language Specification輪読会 #4</a>
</li>
</ul>
</li>
<li>2020/08/18
<ul>
<li><a href="https://mercari.connpass.com/event/184388/" target="_blank" rel="noopener noreferrer">Gophers Office Hours #8 〜自作コンパイラ、低レイヤ回〜</a>
</li>
</ul>
</li>
<li>2020/08/12
<ul>
<li><a href="https://mercari.connpass.com/event/184412/" target="_blank" rel="noopener noreferrer">開発ライブ実況#3 エディタの設定しない人編 byメルペイExpertチームBackendエンジニア</a>
</li>
</ul>
</li>
<li>2020/08/11
<ul>
<li><a href="https://mercari.connpass.com/event/184391/" target="_blank" rel="noopener noreferrer">Gophers Office Hours #7 〜とにかく溜まった質問に答える回〜</a>
</li>
</ul>
</li>
<li>2020/08/08
<ul>
<li><a href="https://ddd-community-jp.connpass.com/event/185352/" target="_blank" rel="noopener noreferrer">エリック・エヴァンスのドメイン駆動設計 輪読会 1回「序文、目次、索引」</a>
</li>
</ul>
</li>
<li>2020/08/06
<ul>
<li><a href="https://mercari.connpass.com/event/183796/" target="_blank" rel="noopener noreferrer">mercari.go #14 オンライン開催</a>
</li>
</ul>
</li>
<li>2020/08/05
<ul>
<li><a href="https://gospecreading.connpass.com/event/183910/" target="_blank" rel="noopener noreferrer">Go Language Specification輪読会 #3</a>
</li>
</ul>
</li>
<li>2020/08/01
<ul>
<li><a href="https://tddbc.connpass.com/event/181973/" target="_blank" rel="noopener noreferrer">TDD Boot Camp 2020 Online #1</a>
</li>
</ul>
</li>
<li>2020/07/29
<ul>
<li><a href="https://mercari.connpass.com/event/182476/" target="_blank" rel="noopener noreferrer">開発ライブ実況 #2 〜メルペイ Solutionsチーム デフォルト好きエンジニア〜</a>
</li>
</ul>
</li>
<li>2020/07/28
<ul>
<li><a href="https://mercari.connpass.com/event/182256/" target="_blank" rel="noopener noreferrer">Gophers Office Hours #6 〜gRPC回〜</a>
</li>
</ul>
</li>
<li>2020/07/22
<ul>
<li><a href="https://gospecreading.connpass.com/event/182427/" target="_blank" rel="noopener noreferrer">Go Language Specification輪読会 #2</a>
</li>
</ul>
</li>
<li>2020/07/18
<ul>
<li><a href="https://zli.connpass.com/event/179865/" target="_blank" rel="noopener noreferrer">Zli × DMM 合同LT</a>
</li>
</ul>
</li>
<li>2020/07/18
<ul>
<li><a href="https://runtime.connpass.com/event/180172/" target="_blank" rel="noopener noreferrer">Container Runtime Meetup #2</a>
</li>
</ul>
</li>
<li>2020/07/15
<ul>
<li><a href="https://mercari.connpass.com/event/181012/" target="_blank" rel="noopener noreferrer">開発ライブ実況 〜メルペイ Architectチーム Backend Engineer〜</a>
</li>
</ul>
</li>
<li>2020/07/14
<ul>
<li><a href="https://mercari.connpass.com/event/181738/" target="_blank" rel="noopener noreferrer">Gophers Office Hours #5 〜API、アーキテクチャ回〜</a>
</li>
</ul>
</li>
<li>2020/07/14
<ul>
<li><a href="https://fukuokago.connpass.com/event/180414/" target="_blank" rel="noopener noreferrer">Fukuoka.go#16 (オンライン開催)</a>
</li>
</ul>
</li>
<li>2020/07/09
<ul>
<li><a href="https://serverless-newworld.connpass.com/event/181539/" target="_blank" rel="noopener noreferrer">サーバーレスアンチパターン今昔物語</a>
</li>
</ul>
</li>
<li>2020/07/08
<ul>
<li><a href="https://gostaticanalysis.connpass.com/event/182307/" target="_blank" rel="noopener noreferrer">go/analysisでテストファイルかどうか確かめる方法について説明する会</a>
</li>
</ul>
</li>
<li>2020/07/08
<ul>
<li><a href="https://kyotogo.connpass.com/event/180782/" target="_blank" rel="noopener noreferrer">Kyoto.go remote #6</a>
</li>
</ul>
</li>
<li>2020/07/08
<ul>
<li><a href="https://gospecreading.connpass.com/event/181316/" target="_blank" rel="noopener noreferrer">Go Language Specification輪読会 #1</a>
</li>
</ul>
</li>
<li>2020/06/30
<ul>
<li><a href="https://mercari.connpass.com/event/179196/" target="_blank" rel="noopener noreferrer">【オンライン】Mercari Gophers Office Hours_6/30</a>
</li>
</ul>
</li>
<li>2020/06/26
<ul>
<li><a href="https://mercari.connpass.com/event/180488/" target="_blank" rel="noopener noreferrer">#7 Open Go Friday Online</a>
</li>
</ul>
</li>
<li>2020/06/24
<ul>
<li><a href="https://kyotogo.connpass.com/event/179917/" target="_blank" rel="noopener noreferrer">Kyoto.go remote #5</a>
</li>
</ul>
</li>
<li>2020/06/23
<ul>
<li><a href="https://mercari.connpass.com/event/178725/" target="_blank" rel="noopener noreferrer">【オンライン】Mercari Gophers Office Hours_6/23</a>
</li>
</ul>
</li>
<li>2020/06/20
<ul>
<li><a href="https://nrs-seminar.connpass.com/event/179556/" target="_blank" rel="noopener noreferrer">コードを読もうぜ！～Laravel編～</a>
</li>
</ul>
</li>
<li>2020/06/10
<ul>
<li><a href="https://kyotogo.connpass.com/event/177094/" target="_blank" rel="noopener noreferrer">Kyoto.go remote #4</a>
</li>
</ul>
</li>
<li>2020/06/03
<ul>
<li><a href="https://mercari.connpass.com/event/174255/" target="_blank" rel="noopener noreferrer">【オンライン】プログラミング言語Go完全入門 質問会</a>
</li>
</ul>
</li>
<li>2020/05/29
<ul>
<li><a href="https://gcpug-tokyo.connpass.com/event/175174/" target="_blank" rel="noopener noreferrer">【オンライン開催】GCPUG Tokyo Spanner Day May 2020</a>
</li>
</ul>
</li>
<li>2020/05/15
<ul>
<li><a href="https://dmm.connpass.com/event/165864/" target="_blank" rel="noopener noreferrer">【オンライン開催】DMM.go #2</a>
</li>
</ul>
</li>
<li>2020/05/06
<ul>
<li><a href="https://nrs-seminar.connpass.com/event/175302/" target="_blank" rel="noopener noreferrer">チームリーディング　フロントエンドコンポーネントの指針【オンライン】</a>
</li>
</ul>
</li>
<li>2020/05/04
<ul>
<li><a href="https://ddd-community-jp.connpass.com/event/174617/" target="_blank" rel="noopener noreferrer">テスト駆動開発(TDD)オンライン勉強会 #1 「TDD入門」</a>
</li>
</ul>
</li>
<li>2020/05/02
<ul>
<li><a href="https://nrs-seminar.connpass.com/event/174000/" target="_blank" rel="noopener noreferrer">【オンライン】実践クリーンアーキテクチャ</a>
</li>
</ul>
</li>
<li>2020/04/20
<ul>
<li><a href="https://ddd-community-jp.connpass.com/event/172834/" target="_blank" rel="noopener noreferrer">DDD Talk MeetUp Online #0</a>
</li>
</ul>
</li>
<li>2020/04/16
<ul>
<li><a href="https://ddd-community-jp.connpass.com/event/172827/" target="_blank" rel="noopener noreferrer">DDDオンライン勉強会 #4「DDDのアーキテクチャ」</a>
</li>
</ul>
</li>
<li>2020/03/29
<ul>
<li><a href="https://ddd-community-jp.connpass.com/event/171151/" target="_blank" rel="noopener noreferrer">DDDオンライン勉強会 「設計の基本原則&amp;quot;高凝集・低結合&amp;quot;とアーキテクチャ」</a>
</li>
</ul>
</li>
<li>2020/03/15
<ul>
<li><a href="https://ddd-community-jp.connpass.com/event/170393/" target="_blank" rel="noopener noreferrer">DDDオンライン勉強会 「集約・境界付けられたコンテキスト・設計の基本原則」</a>
</li>
</ul>
</li>
<li>2020/03/08
<ul>
<li><a href="https://ddd-community-jp.connpass.com/event/168674/" target="_blank" rel="noopener noreferrer">ドメイン駆動設計 モデリング/実装入門勉強会(オンライン)</a>
</li>
</ul>
</li>
<li>2020/02/27
<ul>
<li><a href="https://gorilla-go.connpass.com/event/165986/" target="_blank" rel="noopener noreferrer">ゴリラ.Go #1</a>
</li>
</ul>
</li>
<li>2020/02/16
<ul>
<li><a href="https://ooc.connpass.com/event/129167/" target="_blank" rel="noopener noreferrer">Object-Oriented Conference</a>
</li>
</ul>
</li>
<li>2020/02/16
<ul>
<li><a href="https://ooc.connpass.com/event/157193/" target="_blank" rel="noopener noreferrer">（本募集）Object-Oriented Conference</a>
</li>
</ul>
</li>
<li>2020/02/10
<ul>
<li><a href="https://mercari.connpass.com/event/164374/" target="_blank" rel="noopener noreferrer">mercari.go #13</a>
</li>
</ul>
</li>
<li>2020/01/28
<ul>
<li><a href="https://dena.connpass.com/event/160018/" target="_blank" rel="noopener noreferrer">DeNA.go #4</a>
</li>
</ul>
</li>
<li>2020/01/23
<ul>
<li><a href="https://dmm.connpass.com/event/157222/" target="_blank" rel="noopener noreferrer">DMM.go #1</a>
</li>
</ul>
</li>
<li>2020/01/10
<ul>
<li><a href="https://ddd-community-jp.connpass.com/event/155178/" target="_blank" rel="noopener noreferrer">DDD Talk MeetUp  #3</a>
</li>
</ul>
</li>
</ul>
<h2 id="github">Github</h2>
<ul>
<li>2020/09/22
<ul>
<li><a href="https://github.com/yyh-gl/delsla" target="_blank" rel="noopener noreferrer">yyh-gl/delsla</a>
</li>
</ul>
</li>
<li>2020/09/07
<ul>
<li><a href="https://github.com/yyh-gl/go-flat-package" target="_blank" rel="noopener noreferrer">yyh-gl/go-flat-package</a>
</li>
</ul>
</li>
<li>2020/08/27
<ul>
<li><a href="https://github.com/yyh-gl/real-env-recorder" target="_blank" rel="noopener noreferrer">yyh-gl/real-env-recorder</a>
</li>
</ul>
</li>
<li>2020/08/24
<ul>
<li><a href="https://github.com/yyh-gl/yyh-gl" target="_blank" rel="noopener noreferrer">yyh-gl/yyh-gl</a>
</li>
</ul>
</li>
<li>2020/08/02
<ul>
<li><a href="https://github.com/yyh-gl/akindo" target="_blank" rel="noopener noreferrer">yyh-gl/akindo</a>
</li>
</ul>
</li>
<li>2020/08/01
<ul>
<li><a href="https://github.com/yyh-gl/tdd_handson" target="_blank" rel="noopener noreferrer">yyh-gl/tdd_handson</a>
</li>
</ul>
</li>
<li>2020/07/19
<ul>
<li><a href="https://github.com/yyh-gl/tdd_handson_demo" target="_blank" rel="noopener noreferrer">yyh-gl/tdd_handson_demo</a>
</li>
</ul>
</li>
<li>2020/06/21
<ul>
<li><a href="https://github.com/Ladicle/tcardgen" target="_blank" rel="noopener noreferrer">Ladicle/tcardgen</a>
</li>
</ul>
</li>
<li>2020/06/12
<ul>
<li><a href="https://github.com/yyh-gl/go-ec2" target="_blank" rel="noopener noreferrer">yyh-gl/go-ec2</a>
</li>
</ul>
</li>
<li>2020/05/26
<ul>
<li><a href="https://github.com/yyh-gl/gocr" target="_blank" rel="noopener noreferrer">yyh-gl/gocr</a>
</li>
</ul>
</li>
<li>2020/05/17
<ul>
<li><a href="https://github.com/yyh-gl/go-playground" target="_blank" rel="noopener noreferrer">yyh-gl/go-playground</a>
</li>
</ul>
</li>
<li>2020/05/14
<ul>
<li><a href="https://github.com/yyh-gl/goa-tutorial" target="_blank" rel="noopener noreferrer">yyh-gl/goa-tutorial</a>
</li>
</ul>
</li>
<li>2020/04/11
<ul>
<li><a href="https://github.com/yyh-gl/go-starter-kit" target="_blank" rel="noopener noreferrer">yyh-gl/go-starter-kit</a>
</li>
</ul>
</li>
<li>2020/01/24
<ul>
<li><a href="https://github.com/yyh-gl/go-assembler" target="_blank" rel="noopener noreferrer">yyh-gl/go-assembler</a>
</li>
</ul>
</li>
</ul>
<p><a href="https://lapras.com/" title="LAPRASポートフォリオはこちらから" target="_blank" rel="noopener noreferrer">LAPRASポートフォリオはこちらから</a>
</p>
<!-- textlint-enable -->
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/%E5%8B%89%E5%BC%B7%E4%BC%9A" term="%E5%8B%89%E5%BC%B7%E4%BC%9A" label="勉強会"/><category scheme="https://yyh-gl.github.io/tech-blog/categories/%E3%82%A2%E3%82%AF%E3%83%86%E3%82%A3%E3%83%93%E3%83%86%E3%82%A3" term="%E3%82%A2%E3%82%AF%E3%83%86%E3%82%A3%E3%83%93%E3%83%86%E3%82%A3" label="アクティビティ"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">【GitHub Actions】GitHubのプロフィールを自動更新する仕組みを作った</title><link href="https://yyh-gl.github.io/tech-blog/blog/profile-readme-updater/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/uncredible-codes-from-go-spec/?utm_source=atom_feed" rel="related" type="text/html" title="The Go Programming Language Specificationで知った「こんなことできるだ」を紹介"/><link href="https://yyh-gl.github.io/tech-blog/blog/support-webp/?utm_source=atom_feed" rel="related" type="text/html" title="ブログの画像をWebPに変えた話とSafariで表示されない件について"/><link href="https://yyh-gl.github.io/tech-blog/blog/go-switch-fallthrough/?utm_source=atom_feed" rel="related" type="text/html" title="【Go】Switch文のfallthroughに関するまとめ"/><link href="https://yyh-gl.github.io/tech-blog/blog/podcast-matome-texta-200827/?utm_source=atom_feed" rel="related" type="text/html" title="texta.fm #1 まとめ"/><link href="https://yyh-gl.github.io/tech-blog/blog/go-always-passing-by-value/?utm_source=atom_feed" rel="related" type="text/html" title="Goの参照渡しについて調べてみた"/><id>https://yyh-gl.github.io/tech-blog/blog/profile-readme-updater/</id><author><name>yyh-gl</name></author><published>2021-02-19T09:53:19+00:00</published><updated>2021-02-19T09:53:19+00:00</updated><content type="html"><![CDATA[<blockquote>技術的な説明はなく、ただの独り言です</blockquote><h1 id="おもしろいツイートを見つけた">おもしろいツイートを見つけた</h1>
<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">GitHub ActionsでQiita/Zennの投稿をGitHubプロフィールに自動反映できるようにした <a href="https://t.co/o47E7YHSsx">pic.twitter.com/o47E7YHSsx</a></p>&mdash; mikkame (@mikkameee) <a href="https://twitter.com/mikkameee/status/1360887240587571201?ref_src=twsrc%5Etfw">February 14, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>とても便利そうだったので僕もやってみました。</p>
<h1 id="作った">作った</h1>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2021/02/profile-readme-updater/profile.webp" width="600">
<p>↑こんな感じで <code>Recent posts - Blog 📝</code> に直近5個のブログ記事を表示するようにして、<br>
なおかつ自動で更新されるようにしました。</p>
<p>コードは<a href="https://github.com/yyh-gl/yyh-gl" target="_blank" rel="noopener noreferrer">こちら</a>
に置いてあります。</p>
<p>やっていることはとてもシンプルで、<br>
Goで書いたプロフィール（README）更新スクリプトをGitHub Actionsで実行しているだけです。</p>
<p>興味あったらコードを覗いてみてください。</p>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/github-actions" term="github-actions" label="GitHub Actions"/><category scheme="https://yyh-gl.github.io/tech-blog/categories/github" term="github" label="GitHub"/><category scheme="https://yyh-gl.github.io/tech-blog/categories/go" term="go" label="Go"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">The Go Programming Language Specificationで知った「こんなことできるだ」を紹介</title><link href="https://yyh-gl.github.io/tech-blog/blog/uncredible-codes-from-go-spec/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/support-webp/?utm_source=atom_feed" rel="related" type="text/html" title="ブログの画像をWebPに変えた話とSafariで表示されない件について"/><link href="https://yyh-gl.github.io/tech-blog/blog/go-switch-fallthrough/?utm_source=atom_feed" rel="related" type="text/html" title="【Go】Switch文のfallthroughに関するまとめ"/><link href="https://yyh-gl.github.io/tech-blog/blog/podcast-matome-texta-200827/?utm_source=atom_feed" rel="related" type="text/html" title="texta.fm #1 まとめ"/><link href="https://yyh-gl.github.io/tech-blog/blog/go-always-passing-by-value/?utm_source=atom_feed" rel="related" type="text/html" title="Goの参照渡しについて調べてみた"/><link href="https://yyh-gl.github.io/tech-blog/blog/go-ddd-entity-vo/?utm_source=atom_feed" rel="related" type="text/html" title="【Go+DDD】エンティティと値オブジェクトの実装方法（自己流）"/><id>https://yyh-gl.github.io/tech-blog/blog/uncredible-codes-from-go-spec/</id><author><name>yyh-gl</name></author><published>2020-12-08T00:00:00+09:00</published><updated>2020-12-08T00:00:00+09:00</updated><content type="html"><![CDATA[<blockquote>Go 5 Advent Calendar 2020 8日目</blockquote><p>本記事は『<a href="https://qiita.com/advent-calendar/2020/go5" target="_blank" rel="noopener noreferrer">Go 5 Advent Calendar 2020 8日目</a>
』の記事です。</p>
<h1 id="go-language-specification輪読会">Go Language Specification輪読会</h1>
<p>現在、<a href="https://gospecreading.connpass.com/" target="_blank" rel="noopener noreferrer">Go Language Specification輪読会</a>
という、
<a href="https://golang.org/ref/spec" target="_blank" rel="noopener noreferrer">Goの言語仕様</a>
を読んでいく会に参加しています。</p>
<p>今回は、そんな輪読会で「こんなことできるんだ」と驚いたコードを紹介します。<br>
（振り返ると結構たくさんあったので、今回はその中から5個選んで紹介します）</p>
<p><strong>ちなみに、だいたいのコードは現場で使うと怒られそうです😇</strong> <br>
（いや、まず間違いなく怒られる）</p>
<h1 id="1-comments">1. Comments</h1>
<pre><code class="language-go">package main

import (
  &quot;fmt&quot;
)

func main() {
  var/*comment*/a = 1
  fmt.Println(a)
}
</code></pre>
<p><a href="https://play.golang.org/p/9Dun0LiT5N5" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/9Dun0LiT5N5</a>
</p>
<p>まずはこちら。<br>
変な位置にコメントが挿入されています。<br>
コメント部分を消すと<code>vara = 1</code>となるのでエラーになりそうです。</p>
<p>しかし、実行してみると、すんなりと変数<code>a</code>を表示してくれます。</p>
<h2 id="解説">解説</h2>
<p><a href="https://golang.org/ref/spec#Comments" target="_blank" rel="noopener noreferrer">Spec</a>
を参照すると以下の一文があります。</p>
<blockquote>
<p>A general comment containing no newlines acts like a space.</p>
<p>改行を含まないgeneral commentはスペースのように作用する。</p>
</blockquote>
<p>（general commentとは<code>/**/</code>で囲われたコメントのことを指します）</p>
<p>よって、先程のコードは以下と同じということです。</p>
<pre><code class="language-go">package main

import (
  &quot;fmt&quot;
)

func main() {
  var a = 1
  fmt.Println(a)
}
</code></pre>
<p>こうして変換してみると、エラーでないことは明白ですね。</p>
<p>ちなみに、「改行を含まない」ことが条件なので、以下のコードはエラーとなります。</p>
<pre><code class="language-go">package main

import (
  &quot;fmt&quot;
)

func main() {
  var a/*comment*/= 1 // こっちはOKだけど
  var b/*com
  ment*/= 1 // こっちはNG
  fmt.Println(a)
  fmt.Println(b)
}
</code></pre>
<p><a href="https://play.golang.org/p/_IFGaJ4VK4w" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/_IFGaJ4VK4w</a>
</p>
<h1 id="2-identifiers">2. Identifiers</h1>
<p>続いてはこちらです。</p>
<pre><code class="language-go">package main

import &quot;fmt&quot;

func main() {
	false := true
	if false {
		fmt.Println(&quot;false is true&quot;)
	}
}
</code></pre>
<p><a href="https://play.golang.org/p/kzf4fwRxyAJ" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/kzf4fwRxyAJ</a>
</p>
<p>これはGoクイズでもよく出てくるので、ご存じの方も多いかと思います。</p>
<h2 id="解説-1">解説</h2>
<p>ここで重要になってくる単語として以下の2つがあります。</p>
<ul>
<li>Identifier</li>
<li>Keyword</li>
</ul>
<p>Identifierについて、<a href="https://golang.org/ref/spec#Identifiers" target="_blank" rel="noopener noreferrer">Spec</a>
を参照すると、</p>
<blockquote>
<p>Identifiers name program entities such as variables and types.</p>
<p>識別子は、変数や型などのプログラムエンティティの名前を付けます。</p>
</blockquote>
<p>とあります。<br>
Identifierは、ただ単に名前を付けるためのものなんですね。</p>
<p>加えて、以下の一文から、事前に宣言されているIdentifierがあると分かります。</p>
<blockquote>
<p>Some identifiers are predeclared.</p>
<p>いくつかの識別子は事前に宣言されています。</p>
</blockquote>
<p>今回取り上げた<code>false</code>はこの事前宣言されたIdentifierに該当します。<br>
（事前宣言されているIdentifier一覧は<a href="https://golang.org/ref/spec#Predeclared_identifiers" target="_blank" rel="noopener noreferrer">こちら</a>
）</p>
<br>
<p>次に、Keywordについて見ていきます。</p>
<p><a href="https://golang.org/ref/spec#Keywords" target="_blank" rel="noopener noreferrer">Spec</a>
を参照すると、</p>
<blockquote>
<p>The following keywords are reserved and may not be used as identifiers.</p>
<p>以下のキーワードは予約されており、識別子として使用することはできません。</p>
</blockquote>
<p>とあります。<br>
よって、下記のとおり<code>default</code>をIdentifierとして使用できません。<br>
（<code>default</code>はKeywordです）</p>
<pre><code class="language-go">package main

import &quot;fmt&quot;

func main() {
	default := true
	fmt.Println(default)
}
</code></pre>
<p><a href="https://play.golang.org/p/Cxuolg_b7Xx" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/Cxuolg_b7Xx</a>
</p>
<br>
<p><code>false</code>の話に戻しますが、<code>false</code>はIdentifierであり、Keywordではありません。<br>
したがって、最初に示したコードのとおり、別の対象に対して<code>false</code>と名付けることが可能です。</p>
<h1 id="3-slice-types">3. Slice types</h1>
<p>次はSlice関連です。</p>
<pre><code class="language-go">package main

import &quot;fmt&quot;

func main() {
	a := [5]int{0, 1, 2, 3, 4}
	b := a[1:3]
	fmt.Println(b)
	fmt.Println(b[0:4])
}
</code></pre>
<p><a href="https://play.golang.org/p/inbRV8SWfNO" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/inbRV8SWfNO</a>
</p>
<p>一度実行してみてください。<br>
<code>fmt.Println(b[0:4])</code>の出力結果に違和感がないでしょうか。</p>
<p><code>b</code>＝<code>a[1:3]</code>＝<code>{1, 2}</code>のはずです。<br>
実際、<code>fmt.Println(b)</code>の出力結果はそうなっています。<br>
よって、<code>b[0:4]</code>は取れないはずです。</p>
<p>しかし、実行してみると<code>b[0:4]</code>が取れています。</p>
<h2 id="解説-2">解説</h2>
<p><a href="https://golang.org/ref/spec#Slice_types" target="_blank" rel="noopener noreferrer">Spec</a>
を見ると、</p>
<blockquote>
<p>A slice is a descriptor for a contiguous segment of an underlying array and provides access to a numbered sequence of elements from that array.</p>
<p>スライスは、underlying arrayの連続したセグメントの記述子であり、そのunderlying arrayの要素の番号付きシーケンスへのアクセスを提供します。</p>
</blockquote>
<p>とあります。</p>
<p>つまり、Sliceの後ろにはArrayがいて、SliceはそのArrayに対してよしなにアクセスすることで、<br>
あたかもSliceであるかのように見せています。</p>
<p>よって、</p>
<pre><code class="language-go">b := a[1:3]
</code></pre>
<p>こうしたときに<code>b</code>の後ろには<code>[5]int{0, 1, 2, 3, 4}</code>がいることになります。</p>
<p>実際にアクセスできるのは<code>{1, 2, 3, 4}</code>だけなので、<br>
厳密には背後に<code>{1, 2, 3, 4}</code>という要素を持った配列がいるように思えるでしょう。</p>
<p>ここまでくると、最初のコードで<code>b[0:4]</code>の範囲にアクセスできたのも納得ですね。</p>
<h1 id="4-method-declarations">4. Method declarations</h1>
<p>続いてはこちらです。</p>
<pre><code class="language-go">package main

type S int

func(S) _() {}
func(S) _() {}

func _() {}
func _() {}

func main() {}
</code></pre>
<p><a href="https://play.golang.org/p/sHq9NZvlPsL" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/sHq9NZvlPsL</a>
</p>
<p>同じ関数名が乱立しています。</p>
<p>もうなんとなく察してる方もおられると思いますが、<br>
これはブランク（<code>_</code>）が使用されているために成り立っています。</p>
<h2 id="解説-3">解説</h2>
<p><a href="https://golang.org/ref/spec#Method_declarations" target="_blank" rel="noopener noreferrer">Spec</a>
に以下の一文があります。</p>
<blockquote>
<p>For a base type, the non-blank names of methods bound to it must be unique.</p>
<p>Base typeにバインドされているブランクではないメソッド名は一意である必要があります。</p>
</blockquote>
<p>言い換えると、関数名がブランクである場合は、ユニークでなくても良いということになります。</p>
<h1 id="5-composite-literals">5. Composite literals</h1>
<p>最後はこちらです。</p>
<pre><code class="language-go">package main

import &quot;fmt&quot;

var arr = [3]int{2: 2}
var slice = []int{3: 3}

func main() {
	fmt.Println(arr)
	fmt.Println(slice)
}
</code></pre>
<p><a href="https://play.golang.org/p/7vfUjbDEeCZ" target="_blank" rel="noopener noreferrer">https://play.golang.org/p/7vfUjbDEeCZ</a>
</p>
<p>5, 6行目の中括弧の中を見ると、一瞬、mapかなと思った人がいるかもしれません。<br>
しかし、これはArrayとSliceの初期化です。</p>
<h2 id="解説-4">解説</h2>
<p>ArrayとSliceでもキー（インデックス）指定で初期化できます。</p>
<p><a href="https://golang.org/ref/spec#Composite_literals" target="_blank" rel="noopener noreferrer">Spec</a>
には、
ArrayとSliceに対して以下の一文が記載されています。</p>
<blockquote>
<p>An element with a key uses the key as its index. The key must be a non-negative constant representable by a value of type int; and if it is typed it must be of integer type.</p>
<p>キーを持つ要素は、そのキーをインデックスとして使用します。キーは int 型の値で表すことができる非負の定数でなければならず、型付けされている場合は整数型でなければなりません。</p>
</blockquote>
<p>まぁ、あまり見ることはないコードでしょう🙈</p>
<h1 id="まとめ">まとめ</h1>
<p>Goの言語仕様をちゃんと勉強し始めたことで、<br>
<strong>こういう仕様だから、こうやって処理されていたのか</strong>というのが理解できてきました。</p>
<p>個人的には、ここを理解してくると、<br>
なぜCompilerやLinterが怒っていたのかが分かるようになってきて、<br>
言語仕様を読むのがさらにおもしろくなりました。</p>
<br>
<p>今回の内容は、個人的に「おおお、、、」っとなったものを中心に取り上げたのですが、<br>
実務では使えないであろうコードばかりになってしまいました😇</p>
<p>しかし、実際に役に立つ発見も多くあるので、ぜひ一緒に言語仕様を読み進められればなと思っています！</p>
<br>
<p>▶▶▶ <a href="https://gospecreading.connpass.com/" target="_blank" rel="noopener noreferrer">Go Language Specification輪読会</a>
</p>
<h1 id="明日は">明日は、、、</h1>
<p><a href="https://qiita.com/advent-calendar/2020/go5" target="_blank" rel="noopener noreferrer">Go 5 Advent Calendar 2020</a>
の明日の枠はまだ空いていますね〜🎅</p>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/go" term="go" label="Go"/><category scheme="https://yyh-gl.github.io/tech-blog/categories/advent-calendar" term="advent-calendar" label="Advent Calendar"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">ブログの画像をWebPに変えた話とSafariで表示されない件について</title><link href="https://yyh-gl.github.io/tech-blog/blog/support-webp/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/go-switch-fallthrough/?utm_source=atom_feed" rel="related" type="text/html" title="【Go】Switch文のfallthroughに関するまとめ"/><link href="https://yyh-gl.github.io/tech-blog/blog/podcast-matome-texta-200827/?utm_source=atom_feed" rel="related" type="text/html" title="texta.fm #1 まとめ"/><link href="https://yyh-gl.github.io/tech-blog/blog/go-always-passing-by-value/?utm_source=atom_feed" rel="related" type="text/html" title="Goの参照渡しについて調べてみた"/><link href="https://yyh-gl.github.io/tech-blog/blog/go-ddd-entity-vo/?utm_source=atom_feed" rel="related" type="text/html" title="【Go+DDD】エンティティと値オブジェクトの実装方法（自己流）"/><link href="https://yyh-gl.github.io/tech-blog/blog/go-test-cache-clear/?utm_source=atom_feed" rel="related" type="text/html" title="go test におけるキャッシュの消し方"/><id>https://yyh-gl.github.io/tech-blog/blog/support-webp/</id><author><name>yyh-gl</name></author><published>2020-11-26T13:50:31+09:00</published><updated>2020-11-26T13:50:31+09:00</updated><content type="html"><![CDATA[<blockquote>Safariはv14からじゃないと表示できない😇</blockquote><h1 id="画像の形式をwebpに変えた">画像の形式をWebPに変えた</h1>
<p>本ブログにて、Lighthouse使ってみると、表示速度あたりで怒られていたので、<br>
まずはサムネ画像をWebPに変えてみました。</p>
<p>WebPとは、Googleが開発しているオープンな静止画像フォーマットで、<br>
トラフィック量軽減と表示速度短縮を目的しています。 （<a href="https://ja.wikipedia.org/wiki/WebP" target="_blank" rel="noopener noreferrer">wikiから拝借</a>
）</p>
<h1 id="webpを採用した結果">WebPを採用した結果</h1>
<p>以下のツイートのとおりです。</p>
<p>たまたま100が撮れただけで、もう一回テストしみると少し落ちました。<br>
それでも90台はキープできていそうです。</p>
<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">個人ブログ（Desktop版）のPerformanceが78だったので、画像をwebpに変えたら一気に100になった🎊<br>（モバイルは未だに70切ってる😇） <a href="https://t.co/VNxztIsR28">pic.twitter.com/VNxztIsR28</a></p>&mdash; hon-D (@yyh_gl) <a href="https://twitter.com/yyh_gl/status/1329487413400375296?ref_src=twsrc%5Etfw">November 19, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<h1 id="safariでは注意が必要">Safariでは注意が必要</h1>
<p>多くのブラウザでWebPへの対応が既に完了しています。<br>
ただし、Safariに関してはv14でようやく対応しました。</p>
<p><a href="https://ja.wikipedia.org/wiki/WebP#%E5%AF%BE%E5%BF%9C%E7%92%B0%E5%A2%83" target="_blank" rel="noopener noreferrer">対応状況</a>
</p>
<p>Safari v14は2020年9月17日（日本時間）にリリースされたばかりなので、<br>
まだ画像をちゃんと見れないユーザが多く存在すると思われます。</p>
<p><a href="https://developer.apple.com/documentation/safari-release-notes/safari-14-release-notes" target="_blank" rel="noopener noreferrer">リリースノート</a>
</p>
<br>
<blockquote class="twitter-tweet"><p lang="ja" dir="ltr">Safariのwebp対応ってバージョン14からだったんだ😇<br><br>自分のブログに来る人の90%弱がSafariじゃないから、まぁいいか←</p>&mdash; hon-D (@yyh_gl) <a href="https://twitter.com/yyh_gl/status/1331834104254369794?ref_src=twsrc%5Etfw">November 26, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<br>
<blockquote>
<p>自分のブログに来る人の90%弱がSafariじゃないから、まぁいいか←</p>
</blockquote>
<p>嘘です、10%ほどの方々すみません🙇‍♂ <br>
WebPにしたのはサムネ画像だけで、記事本文内の画像はWebPじゃないので許してください。。。</p>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/web%E5%85%A8%E8%88%AC" term="web%E5%85%A8%E8%88%AC" label="Web全般"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">【Go】Switch文のfallthroughに関するまとめ</title><link href="https://yyh-gl.github.io/tech-blog/blog/go-switch-fallthrough/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/podcast-matome-texta-200827/?utm_source=atom_feed" rel="related" type="text/html" title="texta.fm #1 まとめ"/><link href="https://yyh-gl.github.io/tech-blog/blog/go-always-passing-by-value/?utm_source=atom_feed" rel="related" type="text/html" title="Goの参照渡しについて調べてみた"/><link href="https://yyh-gl.github.io/tech-blog/blog/go-ddd-entity-vo/?utm_source=atom_feed" rel="related" type="text/html" title="【Go+DDD】エンティティと値オブジェクトの実装方法（自己流）"/><link href="https://yyh-gl.github.io/tech-blog/blog/go-test-cache-clear/?utm_source=atom_feed" rel="related" type="text/html" title="go test におけるキャッシュの消し方"/><link href="https://yyh-gl.github.io/tech-blog/blog/go-json-tips/?utm_source=atom_feed" rel="related" type="text/html" title="【Go】jsonパッケージの知っておくと便利な機能"/><id>https://yyh-gl.github.io/tech-blog/blog/go-switch-fallthrough/</id><author><name>yyh-gl</name></author><published>2020-10-03T00:00:00+00:00</published><updated>2020-10-03T00:00:00+00:00</updated><content type="html"><![CDATA[<blockquote>忘れがちじゃないですか？？</blockquote><h1 id="fallthrough-とは">fallthrough とは</h1>
<p>GoではSwitch文でfallthroughという<a href="https://golang.org/ref/spec#Keywords" target="_blank" rel="noopener noreferrer">キーワード</a>
が使用可能です。</p>
<p>機能としては、処理を次の節（caseやdefault）に進めます。（<a href="https://github.com/golang/go/wiki/Switch#fall-through" target="_blank" rel="noopener noreferrer">参考</a>
）<br>
言葉で説明するよりも、サンプルコードを見てもらった方がイメージしやすいと思います。</p>
<pre><code class="language-go">package main

import &quot;fmt&quot;

func main() {
	num := 1
	switch num {
	case 1:
		fmt.Print(&quot;I &quot;)
		fallthrough
	case 2:
		fmt.Print(&quot;am &quot;)
		fallthrough
	case 3:
		fmt.Println(&quot;yyh-gl.&quot;)
		// fallthrough // 次の節がなければコンパイルエラー
	}
}

// 実行結果：
// I am yyh-gl.
</code></pre>
<p><a href="https://play.golang.org/p/FBJKDxbVw5n" target="_blank" rel="noopener noreferrer">Playground</a>
</p>
<p><a href="https://play.golang.org/p/VmfdVwngNGi" target="_blank" rel="noopener noreferrer">defaultにも飛べるという例</a>
</p>
<br>
<p><code>fallthrough</code>は、Go言語のORMライブラリとして有名な『GORM』でも使用されています。(<a href="https://github.com/go-gorm/gorm/blob/26dd4c980a62d47c990a05da9e5566bff3b2b00c/finisher_api.go#L94" target="_blank" rel="noopener noreferrer">使用箇所</a>
)<br></p>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/go" term="go" label="Go"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">texta.fm #1 まとめ</title><link href="https://yyh-gl.github.io/tech-blog/blog/podcast-matome-texta-200827/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/go-always-passing-by-value/?utm_source=atom_feed" rel="related" type="text/html" title="Goの参照渡しについて調べてみた"/><link href="https://yyh-gl.github.io/tech-blog/blog/go-ddd-entity-vo/?utm_source=atom_feed" rel="related" type="text/html" title="【Go+DDD】エンティティと値オブジェクトの実装方法（自己流）"/><link href="https://yyh-gl.github.io/tech-blog/blog/go-test-cache-clear/?utm_source=atom_feed" rel="related" type="text/html" title="go test におけるキャッシュの消し方"/><link href="https://yyh-gl.github.io/tech-blog/blog/go-json-tips/?utm_source=atom_feed" rel="related" type="text/html" title="【Go】jsonパッケージの知っておくと便利な機能"/><link href="https://yyh-gl.github.io/tech-blog/blog/error_questions/?utm_source=atom_feed" rel="related" type="text/html" title="【Go】errorの同値性と表示について調べた"/><id>https://yyh-gl.github.io/tech-blog/blog/podcast-matome-texta-200827/</id><author><name>yyh-gl</name></author><published>2020-10-01T00:00:00+00:00</published><updated>2020-10-01T00:00:00+00:00</updated><content type="html"><![CDATA[<blockquote>2020年8月27日放送分のまとめです</blockquote><h1 id="textafm">texta.fm</h1>
<p><a href="https://open.spotify.com/episode/1Ka5Fnoe89SyRLPea5twPA" target="_blank" rel="noopener noreferrer">texta.fm #1（2020年8月27日放送分）</a>
を聞いて、特にDDDについて学びが多かったのでまとめました。</p>
<p>エヴァンス本を読む前に知っておいた方がいい時代背景、そして、意識すべき点を知ることができるので、<br>
時間があればぜひ実際に聞きに行ってみてください。</p>
<p>話者：</p>
<ul>
<li><a href="https://twitter.com/_yasaichi" target="_blank" rel="noopener noreferrer">@_yasaichi</a>
さん</li>
<li><a href="https://twitter.com/t_wada" target="_blank" rel="noopener noreferrer">@t_wada</a>
さん</li>
</ul>
<br>
<p>以降、勉強になった点を抜き出していきます。<br>
なお、<code>&lt;&gt;</code>内に記載している時間は、記述内容が実際に話されている時間を示しています。</p>
<h1 id="dddが解決したかった問題">DDDが解決したかった問題</h1>
<p>&lt;6分30秒ぐらいから&gt;</p>
<p>エリック・エヴァンスがDDDで解決しようとしていた問題は以下の2点</p>
<ul>
<li>分析モデルとコード間の乖離：詳細は後述</li>
<li>ビジネス側と開発側の乖離：ビジネス側の言葉と開発側の言葉が異なることによる開発の複雑化</li>
</ul>
<h1 id="分析モデルとコード間の乖離ってなに">分析モデルとコード間の乖離ってなに？</h1>
<p>&lt;9分45秒ぐらいから&gt;</p>
<p>2000年代前半はフェーズで区切ったソフトウェア開発が主流だった。<br>
そして、その区切られたフェーズのひとつである「モデリングフェーズ」では、<br>
分析や設計を通してモデルを作り上げていくのであるが、<br>
開発の対象領域をきちんと写し取った抽象的なモデル（分析モデル）を作ることが最大の目的であった。</p>
<p>しかし、開発フェーズに入った時、分析モデルでは不完全なことが多かった。<br>
よって、開発で使えるように修正が加えられ、最終的には分析モデルとは全く異なるモデルができあがる。</p>
<p>コードを書かないと分からないこと、実際にシステムが使われ始めないと分からないことがたくさんあるので、当然の結果である。<br></p>
<h1 id="解決策改善のループを回そう">解決策：改善のループを回そう</h1>
<p>&lt;17分20秒ぐらいから&gt;</p>
<p>分析モデルとコード間の乖離を解決するために、<br>
<b>分析モデル→開発時のモデルの一方通行ではなく、<br>
開発時のモデル↔分析モデルのように両方向にフィードバックする。</b><br>
そして、フィードバックをもとに改善のループを回していくことが重要。<br>
（＝アジャイルソフトウェア開発時代の改善ループの回し方）</p>
<h1 id="今はあまり分析モデルとコード間の乖離が問題にならない">今はあまり分析モデルとコード間の乖離が問題にならない</h1>
<p>&lt;25分00秒ぐらいから&gt;</p>
<p>現在ではあまり分析モデルとコード間の乖離が問題にならない。<br>
理由としては、分析モデルの作成フェーズ（モデリングフェーズ）と開発フェーズを担当する人が同じになってきたから。<br></p>
<p>昨今の開発ではこうした開発体制が普通になっているので、<br>
そもそも今いる大半のエンジニアにはイメージがつきにくい事象である。</p>
<p>したがって、現在は、DDDと言われるとビジネス側と開発側の乖離に注目が行きがち。</p>
<h1 id="エヴァンス本から学ぶべき大事なこと">エヴァンス本から学ぶべき大事なこと</h1>
<p>&lt;21分40秒ぐらいから&gt;</p>
<p>コードとドメイン知識間の乖離を無くし、<br>
一致させ続ける反復的作業こそが大事であると訴えたことがとても良かった。</p>
<p>つまり、先述したとおり、<br>
フィードバックが <b>分析モデル→開発時のモデルの一方通行</b> だったものを <br>
<b>開発時のモデル↔分析モデルのような両方向</b> にしようと提唱したことこそが最重要。</p>
<p>ここを意識して学ぼう！</p>
<br>
<p>&lt;33分00秒ぐらいから&gt;</p>
<p>デザインパターンの部分（2部、3部あたり）はもちろん大事であるが、<br>
エヴァンス本の本質的な部分ではない。</p>
<br>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/podcast" term="podcast" label="Podcast"/><category scheme="https://yyh-gl.github.io/tech-blog/categories/ddd" term="ddd" label="DDD"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">Goの参照渡しについて調べてみた</title><link href="https://yyh-gl.github.io/tech-blog/blog/go-always-passing-by-value/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/go-ddd-entity-vo/?utm_source=atom_feed" rel="related" type="text/html" title="【Go+DDD】エンティティと値オブジェクトの実装方法（自己流）"/><link href="https://yyh-gl.github.io/tech-blog/blog/go-test-cache-clear/?utm_source=atom_feed" rel="related" type="text/html" title="go test におけるキャッシュの消し方"/><link href="https://yyh-gl.github.io/tech-blog/blog/go-json-tips/?utm_source=atom_feed" rel="related" type="text/html" title="【Go】jsonパッケージの知っておくと便利な機能"/><link href="https://yyh-gl.github.io/tech-blog/blog/error_questions/?utm_source=atom_feed" rel="related" type="text/html" title="【Go】errorの同値性と表示について調べた"/><link href="https://yyh-gl.github.io/tech-blog/blog/errors_package/?utm_source=atom_feed" rel="related" type="text/html" title="【Go】errorsパッケージの中身覗いてみた"/><id>https://yyh-gl.github.io/tech-blog/blog/go-always-passing-by-value/</id><author><name>yyh-gl</name></author><published>2020-06-14T00:00:00+00:00</published><updated>2020-06-14T00:00:00+00:00</updated><content type="html"><![CDATA[<blockquote>Goでは全てが値渡し</blockquote><h1 id="goにおける参照渡しポインタの値渡し">Goにおける参照渡し＝ポインタの値渡し</h1>
<p><u>Goでは関数にパラメータを渡すとき、全て値渡しで実現されています。</u><br>
（C派生の言語はすべてそうらしいです）</p>
<p>じゃあ、参照渡しって何？ってなりますよね。</p>
<p><u>参照渡し＝ポインタの値渡し</u>です。<br>
つまり、ポインタそのものを渡しているわけではなく、ポインタのコピーを渡しています。<br></p>
<br>
<p>値渡しと参照渡しの差は、内部の値をコピーするかどうかです。<br>
こちらについては後ほど例を交えて説明します。</p>
<br>
<p>今回の内容はGo公式ドキュメントの<a href="https://golang.org/doc/faq#Pointers" target="_blank" rel="noopener noreferrer">『Pointers and Allocation』</a>
の章に <br>
詳細な記載があります。</p>
<p>本記事では、<a href="https://golang.org/doc/faq#Pointers" target="_blank" rel="noopener noreferrer">『Pointers and Allocation』</a>
から要点を抜粋して紹介します。</p>
<h1 id="値渡しと参照渡しの違いは内部値のコピー有無">値渡しと参照渡しの違いは内部値のコピー有無</h1>
<p>まずは、先述した</p>
<blockquote>
<p>値渡しと参照渡しの差は、内部の値をコピーするかどうかです。</p>
</blockquote>
<p>について詳しく見ていきます。</p>
<p>公式ドキュメント<a href="https://golang.org/doc/faq#pass_by_value" target="_blank" rel="noopener noreferrer">『When are function parameters passed by value?』</a>
の節に以下の記述があります。</p>
<blockquote>
<p>For instance, passing an int value to a function makes a copy of the int, and passing a pointer value makes a copy of the pointer, but not the data it points to.</p>
<p>たとえば、int値を関数に渡すとintのコピーが作成され、ポインター値を渡すとポインターのコピーが作成されますが、ポインターが指すデータは作成されません。</p>
</blockquote>
<p>つまり、</p>
<ul>
<li>値渡し：値のコピーが作成される</li>
<li>参照渡し：ポインタのコピーは作成されるが、ポインタが指すデータ（値）のコピーは作成しない</li>
</ul>
<p>といった差があります。</p>
<p>図にすると以下のとおりです。<br>
同じ色の箱はアドレスが同じだと考えてください。<br>
（図が下手なところはほっといてあげてください🙇‍♂️）</p>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2020/06/go-always-passing-by-value/passing-by-value.png" width="600">
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2020/06/go-always-passing-by-value/passing-by-reference.png" width="600">
<p>大きな差がありますね。</p>
<p>この差により、例えば、多くのフィールドを持つ構造体を関数の引数やレシーバとして渡す場合、<br>
値渡しでは全フィールドのコピーが行われてしまうため <br>
パフォーマンス的に良くないといった違いが生まれてきます。</p>
<br>
<p>無駄なコピーを行わないために全て参照渡しにしとけばいいか、<br>
というとそれはまた別で考慮すべき点が出てきます。</p>
<p>「値渡し または 参照渡しのどちらを使用するか」については多くの議論がなされています。</p>
<ul>
<li><a href="https://golang.org/doc/faq#methods_on_values_or_pointers" target="_blank" rel="noopener noreferrer">Go公式ドキュメント『Should I define methods on values or pointers?』</a>
</li>
<li><a href="https://goinbigdata.com/golang-pass-by-pointer-vs-pass-by-value/" target="_blank" rel="noopener noreferrer">Yury Pitsishin『Pass by pointer vs pass by value in Go』</a>
</li>
<li><a href="https://www.pospome.work/entry/2017/08/12/195032" target="_blank" rel="noopener noreferrer">pospomeのプログラミング日記『golang の 引数、戻り値、レシーバをポインタにすべきか、値にすべきかの判断基準について迷っている』</a>
</li>
<li><a href="https://medium.com/finatext/go%E8%A8%80%E8%AA%9E-golang-%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E5%80%A4%E6%B8%A1%E3%81%97%E3%81%A8%E3%83%9D%E3%82%A4%E3%83%B3%E3%82%BF%E6%B8%A1%E3%81%97%E3%81%AE%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E5%BD%B1%E9%9F%BF%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6-70aa3605adc5" target="_blank" rel="noopener noreferrer">THE Finatext Tech Blog『Go言語（golang）における値渡しとポインタ渡しのパフォーマンス影響について』</a>
</li>
</ul>
<h1 id="コードで確認">コードで確認</h1>
<p>では、最後にここまでの内容をコードで確認して終わります。</p>
<p><a href="https://play.golang.org/p/Zo9Op3ryKyW" target="_blank" rel="noopener noreferrer">playground</a>
</p>
<p>上記のplaygroundを実行すると、以下のように出力されました。<br>
（アドレス部分は実行ごとに異なります）</p>
<pre><code>main()における構造体のアドレス：            0xc00010a040
main()におけるnameのアドレス：             0xc00010a040
PassByReference()における構造体のアドレス： 0xc000102020
PassByReference()におけるnameのアドレス：  0xc00010a040
PassByValue()における構造体のアドレス：     0xc00010a050
PassByValue()におけるnameのアドレス：      0xc00010a050
</code></pre>
<p><code>PassByReference()</code>がレシーバを参照渡しで受け取る関数で <br>
<code>PassByValue()</code>がレシーバを値渡しで受け取る関数です。</p>
<p><code>main()</code>と<code>PassByReference()</code>を比較すると、両者の構造体のアドレスが異なっています。<br>
<code>Human</code>構造体がもつ<code>name</code>フィールドについては同じアドレスを指しています。<br>
つまり、レシーバのポインタはコピーしたものを参照していますが、<br>
フィールドの値はコピーではなく、<code>main()</code>で定義したものが使用されています。<br>
先述の内容と一致しますね。</p>
<p>一方で、<code>main()</code>と<code>PassByValue()</code>を比較すると、<br>
両者の構造体のアドレスおよびフィールドのアドレスがすべて異なります。<br>
すなわち、レシーバのポインタおよびフィールドのすべての値に関して、コピーしたものを参照しています。</p>
<p>こちらも先述の内容と一致します。</p>
<p>納得！</p>
<br>
<p>ちなみに、なぜすべて値渡しで実現しているかについては、<br>
先程紹介した下記の記事で触れられています。</p>
<p><a href="https://goinbigdata.com/golang-pass-by-pointer-vs-pass-by-value/" target="_blank" rel="noopener noreferrer">Yury Pitsishin『Pass by pointer vs pass by value in Go』</a>
<br>
→「Passing by value often is cheaper」の章</p>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/go" term="go" label="Go"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">【Go+DDD】エンティティと値オブジェクトの実装方法（自己流）</title><link href="https://yyh-gl.github.io/tech-blog/blog/go-ddd-entity-vo/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/go-test-cache-clear/?utm_source=atom_feed" rel="related" type="text/html" title="go test におけるキャッシュの消し方"/><link href="https://yyh-gl.github.io/tech-blog/blog/go-json-tips/?utm_source=atom_feed" rel="related" type="text/html" title="【Go】jsonパッケージの知っておくと便利な機能"/><link href="https://yyh-gl.github.io/tech-blog/blog/error_questions/?utm_source=atom_feed" rel="related" type="text/html" title="【Go】errorの同値性と表示について調べた"/><link href="https://yyh-gl.github.io/tech-blog/blog/errors_package/?utm_source=atom_feed" rel="related" type="text/html" title="【Go】errorsパッケージの中身覗いてみた"/><link href="https://yyh-gl.github.io/tech-blog/blog/go-versions/?utm_source=atom_feed" rel="related" type="text/html" title="Goのバージョン管理について"/><id>https://yyh-gl.github.io/tech-blog/blog/go-ddd-entity-vo/</id><author><name>yyh-gl</name></author><published>2020-05-08T00:00:00+00:00</published><updated>2020-05-08T00:00:00+00:00</updated><content type="html"><![CDATA[<blockquote>こんな感じでやってます</blockquote><h1 id="goでddd">GoでDDD</h1>
<p>今担当しているプロジェクトでは、GoでAPIを作っています。<br>
このプロジェクトでは、DDDの考え方や設計パターンも取り入れています。</p>
<p>今回はDDDの設計パターンの中でもEntityとValue Object（VO）について、<br>
僕がGoでどうやって実装しているのか紹介していきます。</p>
<h1 id="実装例">実装例</h1>
<p>兎にも角にも、まずはコードを示します。</p>
<pre><code class="language-go">// animal/dog/dog.go

package dog

type Dog struct {
	name Name
}

func New(name string) (*Dog, error) {
	n, err := newName(name)
	if err != nil {
		return nil, err
	}

	return &amp;Dog{
		name: *n,
	}, nil
}
</code></pre>
<pre><code class="language-go">// animal/dog/name.go

package dog

import (
	&quot;errors&quot;
	&quot;unicode/utf8&quot;
)

type Name string

func newName(v string) (*Name, error) {
	// 名前は3文字以上というビジネスロジック
	if utf8.RuneCountInString(v) &lt; 3 {
		return nil, errors.New(&quot;名前は3文字以上！&quot;)
	}
	n := Name(v)
	return &amp;n, nil
}
</code></pre>
<pre><code class="language-go">// main.go

package main

import (
	&quot;fmt&quot;
	&quot;playground/animal/dog&quot;
)

func main() {
	// d := dog.Dog{name: &quot;犬太郎&quot;} できない
	d, _ := dog.New(&quot;犬太郎&quot;) // できる
	fmt.Printf(&quot;%+v\n&quot;, d)
	
	d, err := dog.New(&quot;犬&quot;)
	if err != nil {
		fmt.Println(err) // 犬の名前が「犬」は可愛そうだからできない()
	}
}
</code></pre>
<p><a href="https://play.golang.org/p/cmNp5MlCNuc" target="_blank" rel="noopener noreferrer">playground</a>
</p>
<br>
<p>今回の例では、<code>Dog</code>というstructがEntityで、<code>Name</code>がVOです。</p>
<p>Dogのnameは必ず3文字以上にするというビジネスロジックがあります。</p>
<h3 id="ポイント1">ポイント1</h3>
<p>EntityとVOでファイルを分けています。<br>
また、両者は同じディレクトリ内に置いています。</p>
<p>どれがEntityでどれがVOか分かりづらいと思われる方もおられるかもしれませんが、<br>
個人的には言うほど分かりづらくありません。</p>
<p>なぜかと言うと、EntityとVOが入っているディレクトリ（パッケージ）名と、<br>
Entityのファイル名が一致するからです。</p>
<p>今回の例で言えば、<br>
Dog Entityは<code>/animal/dog</code>ディレクトリ配下の<code>dog.go</code>の中にあります。<br>
ディレクトリ名とEntityのファイル名が一致しています。<br>
このルールが分かっていれば、特に問題はありません。</p>
<p>加えて、EntityとVOは同一のパッケージ内にあるべきだと考えています。</p>
<h3 id="ポイント2">ポイント2</h3>
<p>Dog Entityのnameフィールドを小文字にすることで、<br>
<code>New()</code>（コンストラクタ的なの）を使用しないと、<br>
nameの値をセットできないようにしています。<br>
（<code>dog.Dog{name: &quot;hoge&quot;}</code> はできない）</p>
<p>また、<code>New()</code>を経由することで、<u>必ず<code>newName()</code>が使われる</u> ため、<br>
Dogのnameは <b>3文字以上にするというビジネスロジックを確実に守ることができます。</b><br></p>
<br>
<p>社内の方に「<code>dog.Dog{}</code> はできちゃうね」とコメントをいただきました。<br>
この件については、（願望的なところも入ってきてしまうのですが）<br>
不用意なsetterを用意していなければ、<br>
「あれ？フィールドに値セットできない！」ってなるはずなので、<br>
そこで気づいてもらえると思っています。。。<br>
（さすがに初期化しただけの構造体を保存するようなことはないと信じてます）</p>
<h3 id="ポイント3">ポイント3</h3>
<p>VO自体はexportします。<br>
VO（型）を引数として指定することもあるのでこうしています。</p>
<p>exportしちゃうと、<code>dog.Name(&quot;ねこ太郎&quot;)</code>とすることで、<br>
不正なnameを作れるのでは？と考える方もおられると思います。</p>
<p>たしかに作れます。<br>
しかしながら、保存はEntity単位で行うため、<br>
不正なnameがEntityにセットできないようになっていれば無問題であると考えています。</p>
<h3 id="ポイント4">ポイント4</h3>
<p>VO→基本型への変換が必要になることは、往々にしてあると思います。</p>
<p>このとき必要になる、基本型への変換処理はVO自身に持たせています。<br>
（ここは特に議論の余地があると思っています）</p>
<p>以下のサンプルをご覧ください。</p>
<pre><code class="language-go">// animal/dog/dog.go

package dog

type Dog struct {
	name Name
}

func New(name string) (*Dog, error) {
	n, err := newName(name)
	if err != nil {
		return nil, err
	}

	return &amp;Dog{
		name: *n,
	}, nil
}

func (d Dog) Name() *Name {
	return &amp;d.name
}
</code></pre>
<pre><code class="language-go">// animal/dog/name.go

package dog

import (
	&quot;errors&quot;
	&quot;unicode/utf8&quot;
)

type Name string

func newName(v string) (*Name, error) {
	// 名前は3文字以上というビジネスロジック
	if utf8.RuneCountInString(v) &lt; 3 {
		return nil, errors.New(&quot;名前は3文字以上！&quot;)
	}
	n := Name(v)
	return &amp;n, nil
}

func (n Name) String() string {
	return string(n)
}
</code></pre>
<pre><code class="language-go">// main.go

package main

import (
	&quot;fmt&quot;
	&quot;playground/animal/dog&quot;
)

func main() {
	d, _ := dog.New(&quot;犬太郎&quot;)
	fmt.Println(d.Name().String())
}
</code></pre>
<p><a href="https://play.golang.org/p/PTOelACOUAv" target="_blank" rel="noopener noreferrer">playground</a>
</p>
<br>
<p>まず、Dog Entityに（不本意ながら）nameのgetter（<code>Name()</code>）を追加しました。<br>
次に、Name VOに<code>String()</code>メソッドをもたせました。</p>
<p>そして、呼び出し元では <code>d.Name().String()</code> とすることで、<br>
基本型（string）としてのnameを取得できます。</p>
<br>
<p>Dog Entityにnameのgetterを用意したことについて、<br>
DTOへの変換やレイヤ間で値を受け渡すときなどに、<br>
構造体の詰め替えが発生すると思います。<br>
このときに、Goの場合どっちみちgetterが必要になることでしょう。<br>
よって、どうせ必要になることが分かっているので用意した形になります。</p>
<br>
<p>ただし、このgetterは、<br>
値の詰め替えや基本型取得といった、複雑なロジックを持たない処理にのみ使用し、<br>
不用意な使い方はしないことを <br>
運用（PRレビュー）で100%カバーすること前提で許可しています。<br></p>
<p>・・・<br>
確実にできないようにした方がいいんでしょうね。。。<br>
賛否両論ありますよね、、、わかります</p>
<br>
<p>他の方法として、Dog Entityの<code>Name()</code>を以下のようにもできます。</p>
<pre><code class="language-go">func (d Dog) Name() string {
	return string(d.name)
}
</code></pre>
<p>ただし、ある関数の引数として、NameというVO（型）のまま渡したい場合、<br>
この方法では対応できません。<br></p>
<br>
<p>引数で渡す用の値（VOのまま）を取得する処理と <br>
基本型としての値を取得する処理を別関数として用意するのが一番いいのかなと思っています。</p>
<p>…が、今のところ、VOにString()メソッドを持たせる方式で特に困ったことがないため、<br>
このまま進めています。</p>
<h1 id="おわりに">おわりに</h1>
<p>ざっとポイントを洗い出してみましたが、<br>
実装方法を考えていた時期とブログを書いている時期がずれているため、<br>
書き忘れているポイントがあるかもしれません。<br>
なにか思い出したタイミングで追記していきます。</p>
<br>
<p>最後にお願いです！</p>
<p>Go+DDDの事例は他の言語に比べるとまだまだ少ないと思います。<br>
よって、僕も日々、試行錯誤し、より良い実装方法を探しています。<br>
今回紹介した実装方法には、まだまだ抜けもあれば、より良い実装方法もあると考えています。</p>
<p>なので、みなさん、ぜひコメントください！<br>
→ <a href="https://twitter.com/yyh_gl" target="_blank" rel="noopener noreferrer">Twitter</a>
</p>
<p>よろしくお願いします〜</p>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/go" term="go" label="Go"/><category scheme="https://yyh-gl.github.io/tech-blog/categories/ddd" term="ddd" label="DDD"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">go test におけるキャッシュの消し方</title><link href="https://yyh-gl.github.io/tech-blog/blog/go-test-cache-clear/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/go-json-tips/?utm_source=atom_feed" rel="related" type="text/html" title="【Go】jsonパッケージの知っておくと便利な機能"/><link href="https://yyh-gl.github.io/tech-blog/blog/error_questions/?utm_source=atom_feed" rel="related" type="text/html" title="【Go】errorの同値性と表示について調べた"/><link href="https://yyh-gl.github.io/tech-blog/blog/errors_package/?utm_source=atom_feed" rel="related" type="text/html" title="【Go】errorsパッケージの中身覗いてみた"/><link href="https://yyh-gl.github.io/tech-blog/blog/go-versions/?utm_source=atom_feed" rel="related" type="text/html" title="Goのバージョン管理について"/><link href="https://yyh-gl.github.io/tech-blog/blog/ddd-aggregates-transaction/?utm_source=atom_feed" rel="related" type="text/html" title="【DDD】集約とトランザクション境界について調べたことメモ"/><id>https://yyh-gl.github.io/tech-blog/blog/go-test-cache-clear/</id><author><name>yyh-gl</name></author><published>2020-04-30T00:00:00+00:00</published><updated>2020-04-30T00:00:00+00:00</updated><content type="html"><![CDATA[<blockquote>知っておくと便利</blockquote><h1 id="go-test-のキャッシュを消すのは簡単">go test のキャッシュを消すのは簡単</h1>
<p><code>$ go clean -testcache</code></p>
<p>以上です！</p>
<pre><code class="language-zsh">$ go test ./...
ok  	github.com/oxequa/realize	(cached)
ok  	github.com/oxequa/realize/realize	(cached)
</code></pre>
<p>このように <code>(cached)</code> となっていたものが、、、</p>
<pre><code class="language-zsh">$ go clean -testcache
$ go test ./...
ok  	github.com/oxequa/realize	0.086s
ok  	github.com/oxequa/realize/realize	0.389s
</code></pre>
<p>このように、実行時間が表示されており、キャッシュが消えていることが分かりますね。</p>
<br>
<p>ちなみに、キャッシュを無視する方法はもうひとつあり、<br>
以下のように <code>-count=1</code> をつけてやればOKです。</p>
<pre><code class="language-zsh">$ go test ./... -count=1
ok  	github.com/oxequa/realize	0.076s
ok  	github.com/oxequa/realize/realize	0.384s
</code></pre>
<br>
<p>ここからは上記コマンドが一体なにをしてくれたのか、<br>
もう少し詳細に話していきます。</p>
<h1 id="go-clean-とは">go clean とは</h1>
<p><a href="https://golang.org/pkg/cmd/go/internal/clean/" target="_blank" rel="noopener noreferrer">こちら</a>
にドキュメントがあります。</p>
<blockquote>
<p>Clean removes object files from package source directories.</p>
</blockquote>
<p><code>go clean</code> は上記のとおりファイルを消してくれるわけですね。</p>
<p><code>-testcache</code> オプションをつけると、<br>
テストに関するキャッシュファイルのみを消してくれます。</p>
<p>では、次にキャッシュファイルがどこにあるのか見ていきます。</p>
<h1 id="キャッシュはどこに保存されている">キャッシュはどこに保存されている？</h1>
<p>環境変数 <code>GOCACHE</code> で指定されている場所に保存されます。</p>
<p>参考：<a href="https://golang.org/cmd/go/#hdr-Build_and_test_caching" target="_blank" rel="noopener noreferrer">公式ドキュメント</a>
</p>
<h1 id="count-オプションについて">count オプションについて</h1>
<p>最後に<code>$ go test ./... -count=1</code> によって、<br>
キャッシュを無効化できた理由についてです。</p>
<p>この話は<a href="https://golang.org/pkg/cmd/go/internal/test/" target="_blank" rel="noopener noreferrer">公式ドキュメント</a>
にて、<br>
「本来意図した使い方ではないが、そういう使い方もできる」<br>
ぐらいのニュアンスで紹介されています（以下参照）</p>
<blockquote>
<p>The idiomatic way to disable test caching explicitly is to use -count=1.</p>
</blockquote>
<br>
<p>そもそも、countオプションはその名前のとおり、
キャッシュ無効化のためのものではないです。</p>
<p>countオプションはテストを指定回数実行し、<br>
そのベンチマークを取るためのオプションです（以下参照）</p>
<blockquote>
<p>-count n</p>
<pre><code> Run each test and benchmark n times (default 1).
 If -cpu is set, run n times for each GOMAXPROCS value.
 Examples are always run once.
</code></pre>
</blockquote>
<p>ベンチマークを取るのにあたってキャッシュは不要であるため、<br>
countオプションがつくとキャッシュが無効化されます。</p>
<p>このルールを応用して、<code>-count=1</code>とすることで、<br>
テスト自体は1回しか実行されず、かつ、キャッシュも無効化して、<br>
テストを走らせることができるわけです。</p>
<br>
<p>なるほど</p>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/go" term="go" label="Go"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">【Go】jsonパッケージの知っておくと便利な機能</title><link href="https://yyh-gl.github.io/tech-blog/blog/go-json-tips/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/error_questions/?utm_source=atom_feed" rel="related" type="text/html" title="【Go】errorの同値性と表示について調べた"/><link href="https://yyh-gl.github.io/tech-blog/blog/errors_package/?utm_source=atom_feed" rel="related" type="text/html" title="【Go】errorsパッケージの中身覗いてみた"/><link href="https://yyh-gl.github.io/tech-blog/blog/go-versions/?utm_source=atom_feed" rel="related" type="text/html" title="Goのバージョン管理について"/><link href="https://yyh-gl.github.io/tech-blog/blog/ddd-aggregates-transaction/?utm_source=atom_feed" rel="related" type="text/html" title="【DDD】集約とトランザクション境界について調べたことメモ"/><link href="https://yyh-gl.github.io/tech-blog/blog/changes-since-go-1-12/?utm_source=atom_feed" rel="related" type="text/html" title="【簡単まとめシリーズ】Go1.12からの変更点"/><id>https://yyh-gl.github.io/tech-blog/blog/go-json-tips/</id><author><name>yyh-gl</name></author><published>2020-04-26T00:00:00+00:00</published><updated>2020-04-26T00:00:00+00:00</updated><content type="html"><![CDATA[<h1 id="jsonパッケージ">jsonパッケージ</h1>
<p>Goを触ってる人ならだれもが一度はお世話になるであろう
パッケージ「<a href="https://golang.org/pkg/encoding/json/" target="_blank" rel="noopener noreferrer">json</a>
」</p>
<p>今回はそんな json パッケージについて、<br>
知っておくと便利な機能を2つ紹介します。</p>
<p>（比較的有名なものしかないですが🙏）</p>
<h1 id="1-独自の変換ロジックを実装できる">1. 独自の変換ロジックを実装できる</h1>
<p>例えば、下記のコードのように、<br>
ある構造体（<code>Human</code>）のフィールドを外部公開したくない場合、<br>
jsonパッケージの <code>Unmarshal()</code>，<code>Marshal()</code> が使えません。<br>
（上記関数は外部公開されたフィールドのみ変換できる）</p>
<pre><code class="language-go">type Human struct {
	// フィールドを外部公開したくない
	name string
	age  int
}

func main() {
	h := Human{
		name: &quot;Taro&quot;,
		age:  21,
	}

	// 構造体 → JSON
	j, _ := json.Marshal(h)
	fmt.Println(string(j)) // {}

	// JSON → 構造体
	var uh Human
	_ = json.Unmarshal(j, &amp;uh)
	fmt.Printf(&quot;%+v\n&quot;, uh) // {name: age:0}
}
</code></pre>
<p><a href="https://play.golang.org/p/53yg13xW5T7" target="_blank" rel="noopener noreferrer">playgroud</a>
</p>
<br>
<p>実際に実行してみると、うまく変換できていないことが分かると思います。</p>
<p>さて、このときどうすれば正しく変換できるかというと、<br>
変換対象の構造体に以下のメソッドを生やしてやればOKです。</p>
<ul>
<li><code>MarshalJSON() ([]byte, error)</code></li>
<li><code>UnmarshalJSON(data []byte) error</code></li>
</ul>
<pre><code class="language-go">type Human struct {
	// フィールドを外部公開したくない
	name string
	age  int
}

func (h Human) MarshalJSON() ([]byte, error) {
	type tmp struct {
		Name string `json:&quot;name&quot;`
		Age  int    `json:&quot;age&quot;`
	}

	t := tmp{
		Name: h.name,
		Age:  h.age,
	}
	return json.Marshal(t)
}

func (h *Human) UnmarshalJSON(data []byte) error {
	type tmp struct {
		Name string `json:&quot;name&quot;`
		Age  int    `json:&quot;age&quot;`
	}

	var t tmp
	_ = json.Unmarshal(data, &amp;t)

	h.name = t.Name
	h.age = t.Age
	return nil
}

func main() {
	h := Human{
		name: &quot;Taro&quot;,
		age:  21,
	}

	// 構造体 → JSON
	j, _ := json.Marshal(h)
	fmt.Println(string(j)) // {&quot;name&quot;:&quot;Taro&quot;,&quot;age&quot;:21}

	// JSON → 構造体
	var uh Human
	_ = json.Unmarshal(j, &amp;uh)
	fmt.Printf(&quot;%+v\n&quot;, uh) // {name:Taro age:21}
}
</code></pre>
<p><a href="https://play.golang.org/p/CN_svIrNRxQ" target="_blank" rel="noopener noreferrer">playgroud</a>
</p>
<br>
<p>うまく変換できましたね👍</p>
<p>このように、<code>Marshal()</code> と <code>Unmarhsal()</code> は <br>
対象の構造体に生えている <code>MarshalJSON()</code> と <code>UnmarhsalJSON()</code> を見に行ってくれるわけです。</p>
<h2 id="goの内部実装を追いかけたければ">Goの内部実装を追いかけたければ…</h2>
<blockquote>
<p>対象の構造体に生えている <code>MarshalJSON()</code> と <code>UnmarhsalJSON()</code> を見に行ってくれるわけです。</p>
</blockquote>
<p>先述した↑この部分がどういう仕組みになっているのかは、<br>
<a href="https://github.com/golang/go/blob/master/src/encoding/json/encode.go" target="_blank" rel="noopener noreferrer">json/encode.go</a>

を見ればわかります。<br>
→ <a href="https://github.com/golang/go/blob/master/src/encoding/json/encode.go#L494" target="_blank" rel="noopener noreferrer">494行目らへんとかとか</a>
</p>
<h2 id="使いみちいろいろ">使いみちいろいろ</h2>
<p>今回紹介した例以外にも、<br>
下記記事のように時間形式を変更するために使用する例もあります。</p>
<ul>
<li><a href="https://dev.classmethod.jp/articles/struct-json/" target="_blank" rel="noopener noreferrer">時間形式の変更</a>
</li>
</ul>
<h1 id="2-構造体なしでも変換できる">2. 構造体なしでも変換できる</h1>
<p>実はJSONの変換処理は、構造体をきっちり定義してやる必要はありません。</p>
<p>以下に示すとおり、<br>
<code>interface{}</code> を使うと、<code>map[string]interface{}</code> に変換してくれます。</p>
<pre><code class="language-go">func main() {
	// どんな内容か分からないJSON
	mysteriousJSON := &quot;{\&quot;name\&quot;: \&quot;Taro\&quot;, \&quot;age\&quot;: 21}&quot;

	var i interface{}
	_ = json.Unmarshal([]byte(mysteriousJSON), &amp;i)

	for k, v := range i.(map[string]interface{}) {
		fmt.Printf(&quot;%s: %v\n&quot;, k, v) // キー・バリューのセットを取得できる
	}
}
</code></pre>
<p><a href="https://play.golang.org/p/HCCgagiJeQW" target="_blank" rel="noopener noreferrer">playground</a>
</p>
<br>
<p>後は、mapに対してよしなに処理してやればOKです。</p>
<p>やはり、ちゃんと構造体を作って、<br>
フィールドで型を指定してやるのが理想だと思います。</p>
<p>しかし、正常時と異常時でレスポンス構造が大きく変わる場合などは、<br>
一旦、map型に変換して、正常時用か異常時用かを判断するのもありかなと思います。<br></p>
<p>正常時と異常時の両方に対応できるでっかい構造体を作ってもいいですが、<br>
無駄が多くなりがちですしね。</p>
<p>その状況に合わせて、使い分けれると良さそうですね👍<br>
みなさんどうしているのか聞いてみたいですね〜</p>
<h1 id="まとめ">まとめ</h1>
<p>知っていればどうってことない機能ですが、<br>
知らなければハマりどころになるところですよね。</p>
<p>Go初学者の方の参考になれば幸いです。</p>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/go" term="go" label="Go"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">【Go】errorの同値性と表示について調べた</title><link href="https://yyh-gl.github.io/tech-blog/blog/error_questions/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/errors_package/?utm_source=atom_feed" rel="related" type="text/html" title="【Go】errorsパッケージの中身覗いてみた"/><link href="https://yyh-gl.github.io/tech-blog/blog/go-versions/?utm_source=atom_feed" rel="related" type="text/html" title="Goのバージョン管理について"/><link href="https://yyh-gl.github.io/tech-blog/blog/ddd-aggregates-transaction/?utm_source=atom_feed" rel="related" type="text/html" title="【DDD】集約とトランザクション境界について調べたことメモ"/><link href="https://yyh-gl.github.io/tech-blog/blog/changes-since-go-1-12/?utm_source=atom_feed" rel="related" type="text/html" title="【簡単まとめシリーズ】Go1.12からの変更点"/><link href="https://yyh-gl.github.io/tech-blog/blog/mercari-tech-talk-idempotency/?utm_source=atom_feed" rel="related" type="text/html" title="【merpay Tech Talk】マイクロサービスの冪等性に関する勉強会"/><id>https://yyh-gl.github.io/tech-blog/blog/error_questions/</id><author><name>yyh-gl</name></author><published>2020-03-10T00:00:00+00:00</published><updated>2020-03-10T00:00:00+00:00</updated><content type="html"><![CDATA[<blockquote>errorに関するちょっとしたメモ</blockquote><h1 id="errorについて疑問があった">errorについて疑問があった</h1>
<p>Goのコードを書いてて、ふと気になったことがあったので調べてみました。</p>
<h1 id="errorの同値性">errorの同値性</h1>
<p>1つ目の疑問は、下記コードで e1 と e2 がイコールではないことです。 <br>
（同値性なんて仰々しく言ってすみません。たったこれだけの疑問です😇🙇‍♂️）</p>
<pre><code class="language-go">func main() {
	e1 := errors.New(&quot;error1&quot;)
	e2 := errors.New(&quot;error1&quot;)
	e3 := e1

	fmt.Println(e1 == e2) // false
	fmt.Println(e1 == e3) // true
}
</code></pre>
<p><a href="https://play.golang.org/p/hwjeo1L6TS1" target="_blank" rel="noopener noreferrer">Playground</a>
</p>
<h1 id="結論errorの同値性">結論（errorの同値性）</h1>
<p>errors.New() が返しているのがポインタでした。</p>
<p>つまり、さきほどのコードの6行目はポインタの値を比較しているので、そりゃfalseになりますね。</p>
<h1 id="errorの表示">errorの表示</h1>
<p>2つ目の疑問は、下記コードで e1 を表示すると、<br>
errors.New()の戻り値である構造体の値ではなく、エラー文言が表示されることです。</p>
<pre><code class="language-go">package main                                                                                         

import (
	&quot;fmt&quot;
	&quot;errors&quot;
)                                                                                      

func main() {
	e1 := errors.New(&quot;error1&quot;)

	fmt.Println(e1) // error1
}
</code></pre>
<p><a href="https://play.golang.org/p/z8CQyypo4zX" target="_blank" rel="noopener noreferrer">Playground</a>
</p>
<p>errors.New()が返しているのは構造体なので、<br>
下記コードのように構造体の内容が表示されないのはなんでだ？ってなったわけです。<br></p>
<pre><code class="language-go">package main

import &quot;fmt&quot;

func Hoge() interface{} {
	type hoge struct {
		s string
	}
	return &amp;hoge{s: &quot;hoge&quot;}
}

func main() {
	h := Hoge()

	fmt.Println(h) // &amp;{hoge}
}
</code></pre>
<p><a href="https://play.golang.org/p/_MeqQS420HV" target="_blank" rel="noopener noreferrer">Playground</a>
</p>
<br>
<p>まぁ、だいたい予想はついています。<br>
errorってGoの中に組み込まれているやつなので、特別な処理が入っているんでしょう（<a href="https://golang.org/ref/spec#Errors" target="_blank" rel="noopener noreferrer">参考</a>
）<br>
問題はその処理がどこにあるのかってことですね。</p>
<br>
<p>ってことで、該当箇所を探します。</p>
<p>・<br>
・<br>
・<br></p>
<p>ありました。<br>
<a href="https://github.com/golang/go/blob/master/src/fmt/print.go#L624" target="_blank" rel="noopener noreferrer">ここ</a>
ですね。</p>
<pre><code class="language-go">p.fmtString(v.Error(), verb)
</code></pre>
<p>Error() で取り出した値を表示しているようですね。</p>
<p>ということは、、、</p>
<pre><code class="language-go">package main

import (
	&quot;fmt&quot;
)

type CustomError struct {
	s string
}

func (e CustomError) Error() string {
	return e.s + &quot; この文章が表示されるはず&quot;
}

func NewCustomError(s string) error {
	return &amp;CustomError{s: s}
}

func main() {
	ce1 := NewCustomError(&quot;custom error 1&quot;)
	fmt.Println(ce1) // custom error 1 この文章が表示されるはず
}
</code></pre>
<p><a href="https://play.golang.org/p/yYPkFMkYCzf" target="_blank" rel="noopener noreferrer">Playground</a>
</p>
<p>たしかに、Error() 関数に変更を入れると、表示される内容も変わりましたね。</p>
<h1 id="結論errorの表示">結論（errorの表示）</h1>
<p>errorに関しては、特別な処理が入っていて、Error()で取得した文字列を表示している。</p>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/go" term="go" label="Go"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">【Go】errorsパッケージの中身覗いてみた</title><link href="https://yyh-gl.github.io/tech-blog/blog/errors_package/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/go-versions/?utm_source=atom_feed" rel="related" type="text/html" title="Goのバージョン管理について"/><link href="https://yyh-gl.github.io/tech-blog/blog/ddd-aggregates-transaction/?utm_source=atom_feed" rel="related" type="text/html" title="【DDD】集約とトランザクション境界について調べたことメモ"/><link href="https://yyh-gl.github.io/tech-blog/blog/changes-since-go-1-12/?utm_source=atom_feed" rel="related" type="text/html" title="【簡単まとめシリーズ】Go1.12からの変更点"/><link href="https://yyh-gl.github.io/tech-blog/blog/mercari-tech-talk-idempotency/?utm_source=atom_feed" rel="related" type="text/html" title="【merpay Tech Talk】マイクロサービスの冪等性に関する勉強会"/><link href="https://yyh-gl.github.io/tech-blog/blog/golangci-lint-custom-settings/?utm_source=atom_feed" rel="related" type="text/html" title="GolangCI-Lintの設定ファイルを理解する"/><id>https://yyh-gl.github.io/tech-blog/blog/errors_package/</id><author><name>yyh-gl</name></author><published>2020-03-09T00:00:00+00:00</published><updated>2020-03-09T00:00:00+00:00</updated><content type="html"><![CDATA[<blockquote>今回は Unwrap()，Is()，As() についてお届け</blockquote><h1 id="errorsパッケージに興味持った">errorsパッケージに興味持った</h1>
<p>v1.13からerrorsパッケージに <code>Unwrap()</code> <code>Is()</code> <code>As()</code> といった関数が追加されました。<br>
（もう1.14もリリースされているのに今さらですね😇）</p>
<p>今回はこれら3つの関数について、内部実装を追いかけていきます。</p>
<p>と、その前に、errorsパッケージの概要と関連パッケージについて軽く説明しておきます。</p>
<h1 id="errorsパッケージと関連パッケージ">errorsパッケージと関連パッケージ</h1>
<h2 id="errorsパッケージ">errorsパッケージ</h2>
<p>名前の通り、エラー関連の処理がまとまっているパッケージですね。<br>
Goの標準パッケージです。<br>
→ <a href="https://golang.org/pkg/errors/" target="_blank" rel="noopener noreferrer">GoDoc</a>
</p>
<p>v1.13にて、先述の <code>Unwrap()</code> <code>Is()</code> <code>As()</code> という関数たちが追加されました。<br></p>
<p>errorを扱うパッケージとして、もうひとつ有名なパッケージがあります。<br>
xerrorsパッケージです。</p>
<h2 id="xerrorsパッケージ">xerrorsパッケージ</h2>
<p><a href="https://godoc.org/golang.org/x/xerrors" target="_blank" rel="noopener noreferrer">xerrors</a>
 とは、
<a href="https://godoc.org/-/subrepo" target="_blank" rel="noopener noreferrer">Goのサブリポジトリ</a>
で開発が進められているパッケージです。<br>
（準標準パッケージといった感じでしょうか）</p>
<p><a href="https://godoc.org/golang.org/x/xerrors" target="_blank" rel="noopener noreferrer">xerrorsのGoDoc</a>
に下記の記述がある通り、</p>
<blockquote>
<p>These functions were incorporated into the standard library&rsquo;s errors package in Go 1.13: - Is - As - Unwrap</p>
</blockquote>
<p>もともとは本パッケージに <code>Unwrap()</code> <code>Is()</code> <code>As()</code> が実装されていましたが、<br>
v1.13にて標準パッケージに取り込まれました。</p>
<br>
<p>さて、軽くerror関連のパッケージについて触れたところで、<br>
早速、<code>Unwrap()</code> <code>Is()</code> <code>As()</code> の内部実装を見ていきたいと思います。<br>
なお、Goのコードはv1.14.0を参照しています。</p>
<h1 id="unwraphttpsgolangorgpkgerrorsunwrap"><a href="https://golang.org/pkg/errors/#Unwrap" target="_blank" rel="noopener noreferrer">Unwrap()</a>
</h1>
<p>ラップされたエラーから中身のエラーを取り出す関数です。</p>
<p>処理としては下記のようになっています。</p>
<pre><code class="language-go">func Unwrap(err error) error {
	u, ok := err.(interface {
		Unwrap() error
	})
	if !ok {
		return nil
	}
	return u.Unwrap()
}
</code></pre>
<p><a href="https://golang.org/src/errors/wrap.go?s=372:400#L14" target="_blank" rel="noopener noreferrer">https://golang.org/src/errors/wrap.go?s=372:400#L14</a>
</p>
<p>ぱっと見だと、ん？っとなってしまうかもしれませんが、<br>
下記のように処理を分解してやると、特別難しいことは何もしていないことがわかります。</p>
<pre><code class="language-go">func Unwrap(err error) error {
    // ラップされたエラーのインターフェース
    type wrapErrInterface interface {
        Unwrap() error
    }

    // 型アサーションにより、ラップされたエラーのインターフェースを満たしているかチェック
	u, ok := err.(wrapErrInterface)
	if !ok {
		return nil
	}
	return u.Unwrap()
}
</code></pre>
<p>処理を順に追っていくと、
7行目で型アサーションを用いてラップされたエラーのインターフェースを満たしているかチェックし、
満たしていなければ（ok == false）nilを返します。<br>
満たしていれば（ok == true）実装されている <code>Unwrap()</code> を処理します。</p>
<p>ここで注意ですが、
12行目の <code>Unwrap()</code> は今まで話に出てきていた <code>errors.Unwrap()</code> とは全くの別物です。<br>
では、12行目の <code>Unwrap()</code> はどこにあるのか。<br>
答えはerrorをラップする処理のところにあります。</p>
<h2 id="errorをラップする関数">errorをラップする関数</h2>
<p>errorをラップする関数である <code>fmt.Errorf()</code> の中身を見てみましょう。</p>
<pre><code class="language-go">func Errorf(format string, a ...interface{}) error {
	p := newPrinter()
	p.wrapErrs = true
	p.doPrintf(format, a)
	s := string(p.buf)
	var err error
	if p.wrappedErr == nil {
		err = errors.New(s)
	} else {
		err = &amp;wrapError{s, p.wrappedErr}
	}
	p.free()
	return err
}
</code></pre>
<p><a href="https://golang.org/src/fmt/errors.go?s=624:674#L17" target="_blank" rel="noopener noreferrer">https://golang.org/src/fmt/errors.go?s=624:674#L17</a>
</p>
<p>10行目で、<code>wrapError</code> という構造体を返していますね。<br>
宣言箇所に飛んでみましょう。</p>
<pre><code class="language-go">type wrapError struct {
	msg string
	err error
}

func (e *wrapError) Error() string {
	return e.msg
}

func (e *wrapError) Unwrap() error {
	return e.err
}
</code></pre>
<p><a href="https://golang.org/src/fmt/errors.go#L32" target="_blank" rel="noopener noreferrer">https://golang.org/src/fmt/errors.go#L32</a>
</p>
<p><code>Unwrap()</code> がありました。</p>
<p>まず、<code>wrapError</code>構造体ですが、本構造体は<code>err</code>フィールドを持っており、ここにラップするエラーを格納しています。<br>
（さきほど見た <code>Errorf()</code> の内部処理では、10行目にて<code>wrapError</code>が使用されています）</p>
<p><code>Unwrap()</code>は<code>wrapError</code>構造体の<code>err</code>フィールド、すなわち、ラップしていたエラーを返しているだけですね。</p>
<br>
<p>以上、<code>errors.Unwrap()</code> の内部実装はこんな感じでした。</p>
<p>どんどん行きましょう。</p>
<h1 id="ishttpsgolangorgpkgerrorsis"><a href="https://golang.org/pkg/errors/#Is" target="_blank" rel="noopener noreferrer">Is()</a>
</h1>
<p>次は <code>Is()</code> を見ていきます。</p>
<p>本関数は2つのエラーが同じエラーかどうかを判定します。<br>
また、比較元（第一引数）のエラーがラップしたエラーだったとしても、<br>
最後までUnwrapして比較してくれます。</p>
<p>処理はこんな感じです。</p>
<pre><code class="language-go">func Is(err, target error) bool {
    if target == nil {
		return err == target
	}

	isComparable := reflectlite.TypeOf(target).Comparable()
	for {
		if isComparable &amp;&amp; err == target {
			return true
		}
		if x, ok := err.(interface{ Is(error) bool }); ok &amp;&amp; x.Is(target) {
			return true
		}
		
		if err = Unwrap(err); err == nil {
			return false
		}
	}
}
</code></pre>
<p>要となる処理は7〜20行明のfor文内の処理です。</p>
<p>まずは、8,9行目にて単純にエラー同士の比較をしています。<br>
ここで一致すれば <code>return true</code> ですね。</p>
<p>次に11行目で、型アサーションを利用して <code>err</code>が <code>Is(error) bool</code> という関数を実装しているかチェックしています。</p>
<!-- textlint-disable -->
<p>このチェック処理は、
<u>独自の同値判定処理がないか確認し、ある場合はその同値判定処理を使用して判定を行う</u><br>
ために用意されています。</p>
<!-- textlint-enable -->
<p><code>Is(error) bool</code> の実装例が<a href="https://golang.org/pkg/errors/#Is" target="_blank" rel="noopener noreferrer">公式のドキュメント</a>
にあります。<br></p>
<!-- textlint-disable -->
<p>↓↓↓</p>
<!-- textlint-enable -->
<pre><code class="language-go">func (m MyError) Is(target error) bool { return target == os.ErrExist }
</code></pre>
<p>独自のエラー型を定義するときに役立ちそうですね。</p>
<p>では、最後に15行目からの処理です。<br>
ここは<code>err</code>をUnwrapする処理ですね。<br>
（この<code>Unwrap()</code>は前章で説明した関数です）</p>
<!-- textlint-disable -->
<p>つまり、<br>
<code>isComparable &amp;&amp; err == target</code><br>
および<br>
<code>x, ok := err.(interface{ Is(error) bool }); ok &amp;&amp; x.Is(target)</code><br>
の両条件に該当しなかった場合は、<code>err</code>の中にあるエラーを抜き取り、<br>
そのエラーに対して、forループの最初から処理していくということになります。</p>
<!-- textlint-enable -->
<p>この最後の<code>Unwrap()</code>により、本章冒頭に述べた</p>
<blockquote>
<p>また、比較元（第一引数）のエラーがラップしたエラーだったとしても、<br>
最後までUnwrapして比較してくれます。</p>
</blockquote>
<p>というのを実現しているわけですね。</p>
<h1 id="ashttpsgolangorgpkgerrorsas"><a href="https://golang.org/pkg/errors/#As" target="_blank" rel="noopener noreferrer">As()</a>
</h1>
<p>最後に <code>As()</code> です。</p>
<p>本関数は、第一引数のエラーが第二引数のエラーに代入可能であれば代入し、trueを返します。<br>
代入できない場合はfalseが返されます。</p>
<p>第二引数はポインタ型なので、<code>target</code>に関して副作用を含む関数です。</p>
<p>それでは内部実装を見ていきます。</p>
<pre><code class="language-go">func As(err error, target interface{}) bool {
	if target == nil {
		panic(&quot;errors: target cannot be nil&quot;)
	}
	val := reflectlite.ValueOf(target)
	typ := val.Type()
	if typ.Kind() != reflectlite.Ptr || val.IsNil() {
		panic(&quot;errors: target must be a non-nil pointer&quot;)
	}
	if e := typ.Elem(); e.Kind() != reflectlite.Interface &amp;&amp; !e.Implements(errorType) {
		panic(&quot;errors: *target must be interface or implement error&quot;)
	}
	targetType := typ.Elem()
	for err != nil {
		if reflectlite.TypeOf(err).AssignableTo(targetType) {
			val.Elem().Set(reflectlite.ValueOf(err))
			return true
		}
		if x, ok := err.(interface{ As(interface{}) bool }); ok &amp;&amp; x.As(target) {
			return true
		}
		err = Unwrap(err)
	}
	return false
}

var errorType = reflectlite.TypeOf((*error)(nil)).Elem()
</code></pre>
<p>for文と <code>errors.Unwrap()</code> を使って <br>
ラップされたエラーの中身を取り出していくあたりは <code>Is()</code> と同じですね。<br>
加えて、19行目で独自定義の <code>As()</code> を使用できるところも <code>Is()</code> と同じです。</p>
<p>特徴的なのは、5〜18行目の部分になります。</p>
<p>まず、5，6行目でreflectliteを使って第二引数の<code>target</code>の構造を読み取っています。<br></p>
<blockquote>
<p>reflectliteはreflectパッケージの軽量版で、<br>
runtimeおよびunsafe以外での使用は基本的に禁止されています。 &raquo; <a href="https://golang.org/pkg/internal/reflectlite/#Overview" target="_blank" rel="noopener noreferrer">参考</a>
</p>
</blockquote>
<p>そして、<code>target</code>がポインタである、かつ、nilでないことを確認します。</p>
<p>本章冒頭でも述べましたが、<br>
最終的に（代入可能であれば）第一引数の<code>err</code>は第二引数の<code>target</code>に格納します。<br>
つまり、戻り値で<code>target</code>に格納したエラーを返すのではなく、<code>target</code>（ポインタ）経由でできあがったエラーを返します。<br>
したがって、ポインタであることを確認する必要があります。</p>
<!-- textlint-disable -->
<p>加えて、10行目で、interfaceである、かつ、errorType（＝error）を実装できているかチェックします。</p>
<!-- textlint-enable -->
<p>以上で、<code>target</code>が<code>error</code>を格納できる箱であるか（<code>error</code>インタフェースを満たしているか）どうかを判定しています。</p>
<br>
<p>続きの13行目以降で、<br>
<code>err</code>が<code>target</code>に格納できる値かどうかを判定し、できるならば格納しています。（15，16行目）</p>
<p>格納できない場合は、独自実装の <code>As()</code> 探して、実行していますね。</p>
<p><code>err</code> が <code>target</code> に格納できず、独自実装の <code>As()</code> もない場合は、<br>
<code>err</code> を <code>Unwrap()</code> して再度同じ処理を行います。</p>
<p>それでも、格納できるエラーがなかった場合は false を返します。</p>
<h1 id="まとめ">まとめ</h1>
<p>errorsパッケージの実装を覗いてみましたが、いかがだったでしょうか？<br>
普段使ってる標準パッケージの内部実装を追いかけるのは楽しいですね👍</p>
<p>今回はerrorsパッケージの中身を見ましたが、reflectliteパッケージが結構使われていましたね。</p>
<p>reflectliteの動きが分からない部分もあったので、<br>
次はreflectliteの中身も見たいなという気持ちになっています。</p>
<p>（reflectliteを少し覗いたのですが、Goの型のデータ構造？的な話が入ってきており、かなりおもしろそう）</p>
<p>reflectliteを一緒に読みたいって方おられたら<a href="https://twitter.com/yyh_gl" target="_blank" rel="noopener noreferrer">TwitterでDM</a>
ください！<br>
ぜひオンラインでコードリーディング会しましょう</p>
<h1 id="参考文献">参考文献</h1>
<ul>
<li><a href="https://golang.org/pkg/errors/" target="_blank" rel="noopener noreferrer">errorsパッケージの公式ドキュメント</a>
</li>
<li><a href="https://text.baldanders.info/golang/error-handling-in-go-1_3/" target="_blank" rel="noopener noreferrer">Go 1.13 のエラー・ハンドリング</a>
</li>
<li><a href="https://medium.com/@felipedutratine/golang-how-to-handle-errors-in-v1-13-fda7f035d027" target="_blank" rel="noopener noreferrer">Golang: How to handle Errors in v1.13</a>
</li>
<li><a href="https://golang.org/pkg/internal/reflectlite/" target="_blank" rel="noopener noreferrer">reflectliteパッケージの公式ドキュメント</a>
</li>
</ul>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/go" term="go" label="Go"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">Goのバージョン管理について</title><link href="https://yyh-gl.github.io/tech-blog/blog/go-versions/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/ddd-aggregates-transaction/?utm_source=atom_feed" rel="related" type="text/html" title="【DDD】集約とトランザクション境界について調べたことメモ"/><link href="https://yyh-gl.github.io/tech-blog/blog/changes-since-go-1-12/?utm_source=atom_feed" rel="related" type="text/html" title="【簡単まとめシリーズ】Go1.12からの変更点"/><link href="https://yyh-gl.github.io/tech-blog/blog/mercari-tech-talk-idempotency/?utm_source=atom_feed" rel="related" type="text/html" title="【merpay Tech Talk】マイクロサービスの冪等性に関する勉強会"/><link href="https://yyh-gl.github.io/tech-blog/blog/golangci-lint-custom-settings/?utm_source=atom_feed" rel="related" type="text/html" title="GolangCI-Lintの設定ファイルを理解する"/><link href="https://yyh-gl.github.io/tech-blog/blog/golang-vcr/?utm_source=atom_feed" rel="related" type="text/html" title="【Go+VCR】外部APIとの通信を保存してテストに使用する話"/><id>https://yyh-gl.github.io/tech-blog/blog/go-versions/</id><author><name>yyh-gl</name></author><published>2020-03-03T00:00:00+00:00</published><updated>2020-03-03T00:00:00+00:00</updated><content type="html"><![CDATA[<blockquote>地味にいろいろとあってややこしい</blockquote><h1 id="goのバージョン管理">Goのバージョン管理</h1>
<p><b>注意1：本記事はGo自体のバージョン管理についてです。Go Modulesなどは対象外です。</b> <br>
<b>注意2：基本的にMacユーザを対象にしています。（WindowsとLinuxももちろん好きです）</b></p>
<br>
<p>開発において言語のバージョン管理はつきものだと思います。<br>
そのニーズは高く、rbenv や nodenv といったバージョン管理ツールが普及しています。</p>
<p>ただし、Goの場合は少し話が変わってきます。<br>
もちろんGoでも goenv が用意されていますが、<br>
（今のところ）Goは後方互換性が担保されているので、<b>基本的に最新バージョンに上げ続ければOK</b>です。</p>
<br>
<p>…と言いつつも、GAEを使用するといった場合に、どうしてもバージョン管理したくなることがあると思います。</p>
<p>そこで今回はまずGoのバージョン管理ツールの紹介をした後で、<br>
最新バージョンをインストールする方法を紹介していきたいと思います。</p>
<h1 id="goのバージョン管理ツール">Goのバージョン管理ツール</h1>
<h2 id="-goenvhttpsgithubcomsyndbggoenv">▼ <a href="https://github.com/syndbg/goenv" target="_blank" rel="noopener noreferrer">goenv</a>
</h2>
<p>◯◯env系は有名ですよね。<br>
言語のバージョン管理といえばこれです。</p>
<p>導入手順は<a href="https://github.com/syndbg/goenv/blob/master/INSTALL.md" target="_blank" rel="noopener noreferrer">公式の手順</a>
通りなので省略します。</p>
<p>1点はまりどころがあります。<br>
<u>$GOPATHが変わらなくなってしまうという問題</u>です。</p>
<p>本件に関しては以前、僕のブログで対処法を書いているので、<br>
<a href="https://yyh-gl.github.io/tech-blog/blog/gopath/" target="_blank" rel="noopener noreferrer">こちら</a>
を参考にしてみてください。</p>
<h2 id="-go-get公式サイトに記載のある方法">▼ go get（公式サイトに記載のある方法）</h2>
<p>（バージョン管理&quot;ツール&quot;とは言えませんが…）</p>
<p>本方法は<a href="https://golang.org/doc/manage-install#installing-multiple" target="_blank" rel="noopener noreferrer">公式サイト</a>
に
記載されている方法です。</p>
<pre><code class="language-zsh">$ go get golang.org/dl/goX.Y.Z
$ goX.Y.Z download
$ goX.Y.Z version
go version goX.Y.Z linux/amd64
</code></pre>
<p>コマンド打つたびに、バージョンまで打つのがめんどくさいという方は、<br>
bash や zsh の設定でエイリアスでも貼ってやればOKですね。</p>
<h1 id="最新バージョンのインストール方法">最新バージョンのインストール方法</h1>
<p>冒頭で「基本的に最新バージョンに上げ続ければOK」と述べていたので、<br>
最新バージョンのインストール方法についても言及しておきます。</p>
<p>特に新しいことはなくいろんなサイトで紹介されているのでさらっと流していきます。</p>
<h2 id="-homebrew">▼ Homebrew</h2>
<pre><code class="language-zsh">$ brew install go
</code></pre>
<p>以上です。</p>
<p>標準出力にて「必要ならパスの設定してね」と言われます。<br>
言われたとおりにやればOKです。</p>
<h2 id="-ソースからのインストール">▼ ソースからのインストール</h2>
<p>こちらの方法はHomebrewでのインストールと比べると、少しややこしくなります。</p>
<p>ざっくり手順を説明します。（<a href="https://golang.org/doc/install/source" target="_blank" rel="noopener noreferrer">公式の説明ページ</a>
）</p>
<ol>
<li>
<p>Go1.4をインストール</p>
<p><a href="https://golang.org/doc/install/source#go14" target="_blank" rel="noopener noreferrer">https://golang.org/doc/install/source#go14</a>
</p>
<p>なぜ、いきなりv1.4をインストールするかというと、<br>
v1.5以降は全てGoで書かれているため、Go自身でコンパイルできます。</p>
<p>よって、v1.5以降のGoをインストールするために <u>GoをビルドするためのGoが必要になる</u> というわけです。<br>
（ややこしいですが、<a href="https://ja.wikipedia.org/wiki/%E3%82%BB%E3%83%AB%E3%83%95%E3%83%9B%E3%82%B9%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0" target="_blank" rel="noopener noreferrer">セルフホスティング</a>
ってやつですね）</p>
</li>
<li>
<p>Gitから最新版のソースをもってくる</p>
<p><a href="https://golang.org/doc/install/source#fetch" target="_blank" rel="noopener noreferrer">https://golang.org/doc/install/source#fetch</a>
</p>
</li>
<li>
<p>最新版をインストール</p>
<p><a href="https://golang.org/doc/install/source#install" target="_blank" rel="noopener noreferrer">https://golang.org/doc/install/source#install</a>
</p>
</li>
<li>
<p>動作確認</p>
<p><a href="https://golang.org/doc/install/source#testing" target="_blank" rel="noopener noreferrer">https://golang.org/doc/install/source#testing</a>
</p>
</li>
</ol>
<p>（ただのリンク集になっていますが）以上です。</p>
<h2 id="-公式サイトからのインストール">▼ 公式サイトからのインストール</h2>
<p>この方法の方がソースからインストールするより簡単かなと思います。</p>
<p>こちらの方法も<a href="https://golang.org/doc/install" target="_blank" rel="noopener noreferrer">公式サイト</a>
に詳しい説明があるのでざっくりの説明だけ載せておきます。<br>
（<a href="https://golang.org/doc/install" target="_blank" rel="noopener noreferrer">公式サイト</a>
には
LinuxおよびWindowsについてもちゃんと説明があります）</p>
<ol>
<li>
<p>Go本体をダウンロード</p>
<p><a href="https://golang.org/doc/install#download" target="_blank" rel="noopener noreferrer">https://golang.org/doc/install#download</a>
</p>
<p><a href="https://golang.org/doc/install#install" target="_blank" rel="noopener noreferrer">次節の『Go install.』</a>
で
指定したOS用のGoがダウンロードされるので、Macを選択した上でダウンロードを開始します。</p>
</li>
<li>
<p>インストール</p>
<p><a href="https://golang.org/doc/install#install" target="_blank" rel="noopener noreferrer">https://golang.org/doc/install#install</a>
</p>
<p>ダウンロードした<code>.pkg</code>ファイルを開くとインストールが勝手に始まります。</p>
</li>
<li>
<p>PATH設定</p>
<p><a href="https://golang.org/doc/install#install" target="_blank" rel="noopener noreferrer">https://golang.org/doc/install#install</a>
</p>
<p>インストールして得たバイナリに対してPATHを通します。</p>
</li>
</ol>
<p>以上です。</p>
<h1 id="まとめ">まとめ</h1>
<p>バージョン管理ツールおよびインストール方法はいくつか存在します。</p>
<p>使いやすい方法でどうぞ！</p>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/go" term="go" label="Go"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">【DDD】集約とトランザクション境界について調べたことメモ</title><link href="https://yyh-gl.github.io/tech-blog/blog/ddd-aggregates-transaction/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/changes-since-go-1-12/?utm_source=atom_feed" rel="related" type="text/html" title="【簡単まとめシリーズ】Go1.12からの変更点"/><link href="https://yyh-gl.github.io/tech-blog/blog/mercari-tech-talk-idempotency/?utm_source=atom_feed" rel="related" type="text/html" title="【merpay Tech Talk】マイクロサービスの冪等性に関する勉強会"/><link href="https://yyh-gl.github.io/tech-blog/blog/golangci-lint-custom-settings/?utm_source=atom_feed" rel="related" type="text/html" title="GolangCI-Lintの設定ファイルを理解する"/><link href="https://yyh-gl.github.io/tech-blog/blog/golang-vcr/?utm_source=atom_feed" rel="related" type="text/html" title="【Go+VCR】外部APIとの通信を保存してテストに使用する話"/><link href="https://yyh-gl.github.io/tech-blog/blog/react_typescript_sample/?utm_source=atom_feed" rel="related" type="text/html" title="【React+TypeScript】TypeScript入門"/><id>https://yyh-gl.github.io/tech-blog/blog/ddd-aggregates-transaction/</id><author><name>yyh-gl</name></author><published>2020-02-18T00:00:00+00:00</published><updated>2020-02-18T00:00:00+00:00</updated><content type="html"><![CDATA[<blockquote>「データの一貫性の境界」を見極めよう！</blockquote><h1 id="簡単まとめシリーズ">簡単まとめシリーズ</h1>
<p>今回は <b>集約とトランザクション境界</b> について、<br>
自分のわからないところを調べたので、メモとして残しておきます。</p>
<h1 id="集約">集約</h1>
<p>集約の説明を<a href="https://www.amazon.co.jp/gp/product/479815072X" target="_blank" rel="noopener noreferrer">『ドメイン駆動設計入門 ボトムアップでわかる! ドメイン駆動設計の基本』</a>
から拝借すると、<br>
「データを変更するための単位として扱われるオブジェクトの集まりを集約といいます」とのこと。</p>
<p>↓ もうすこし具体的に言うと</p>
<p>DDDではエンティティと値オブジェクトというものがありますが、<br>
値オブジェクトを直接触らず、
エンティティ経由でしか変更しないようにするというものですね。</p>
<p>このような制限をかけることで、<br>
<b>ひとまとまりにされたオブジェクト間で維持されるべき不変条件を守ることができます。</b></p>
<h1 id="トランザクション境界">トランザクション境界</h1>
<p>基本的な考えとしては、集約ごとにトランザクションを貼ります。<br></p>
<p>↑この基本を守るためにも、理想としては正しいモデリングにより、<br>
正しいトランザクション境界を見つけることが大事です。</p>
<p>正しいトランザクション境界を見つけることは、不用意に大きなDBロックの発生を防止します。</p>
<br>
<p>しかしながら、集約をまたいでトランザクション制御したくなるときもあります。<br>
→ <a href="https://kbigwheel.hateblo.jp/entry/2018/12/03/aggregate-and-consistency" target="_blank" rel="noopener noreferrer">参考例</a>
</p>
<p>こういうときにどうするか、上記リンクでもいくつかの方法が挙げられています。<br>
他のサイトも調べてみましたが、だいたい同じような方法が出てきました。</p>
<ol>
<li>結果整合性</li>
</ol>
<ul>
<li>主流っぽい
<ul>
<li>いろいろなサイト、書籍の中で紹介されていました</li>
</ul>
</li>
<li>整合性を担保するための仕組みづくりが必要
<ul>
<li>整合性をチェックするためのバッチ など</li>
</ul>
</li>
</ul>
<ol>
<li>集約をまたいでトランザクションを貼る</li>
</ol>
<ul>
<li>下記理由のためにあまり推奨されない
<ul>
<li>ロック範囲が大きくなってしまう</li>
<li>守るべき「データの一貫性の境界」をコード上で表現できなくなる
<ul>
<li><a href="https://www.pospome.work/entry/20161023/1477206615" target="_blank" rel="noopener noreferrer">参考サイト</a>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<ol>
<li>複数の集約をさらにまとめた集約をつくる</li>
</ol>
<ul>
<li>ロック範囲が大きくなってしまうため、あまり推奨されない</li>
</ul>
<h1 id="結果整合性">結果整合性</h1>
<p>結果整合性については、<br>
<a href="https://www.amazon.co.jp/gp/product/479815072X" target="_blank" rel="noopener noreferrer">『ドメイン駆動設計入門 ボトムアップでわかる! ドメイン駆動設計の基本』</a>
の <br>
12章3説「集約の大きさと操作の単位」で言及されているので、もう少しだけ詳しく調べました。</p>
<p>結果整合性とは、最終的に整合性の取れていればOKという考え方。<br>
したがって、整合性が取れていない状況が起こり得るが、それは許容する。</p>
<p>「最終的に整合性を取る」ってどうやるの？<br>
→ <a href="https://qiita.com/j5ik2o/items/ae8a4d3cdaa24afe7599#%E8%A7%A3%E6%B1%BA%E7%AD%962-%E4%B8%80%E6%99%82%E7%9A%84%E3%81%AA%E6%95%B4%E5%90%88%E6%80%A7%E3%81%AE%E7%A0%B4%E7%B6%BB%E3%82%92%E5%8F%97%E3%81%91%E5%85%A5%E3%82%8C%E7%B5%90%E6%9E%9C%E6%95%B4%E5%90%88%E6%80%A7%E3%82%92%E4%BD%BF%E3%81%86%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6" target="_blank" rel="noopener noreferrer">こちら</a>

が参考になる。</p>
<h1 id="まとめ">まとめ</h1>
<p>設計周りの話は、唯一無二の答えがあるわけではありません。</p>
<p>よって、今回の話においても「データの一貫性の境界」を意識し、<br>
ちゃんとメリットとデメリットを理解した上で最善の解を選択する必要がありますね。<br></p>
<h1 id="参考資料">参考資料</h1>
<ul>
<li><a href="https://www.amazon.co.jp/gp/product/479815072X" target="_blank" rel="noopener noreferrer">ドメイン駆動設計入門 ボトムアップでわかる! ドメイン駆動設計の基本</a>
</li>
<li><a href="https://www.pospome.work/entry/20161023/1477206615" target="_blank" rel="noopener noreferrer">DDDにおいて、なぜ複数の集約にまたがってトランザクションをかけてはいけないのか（multiple aggregates in one transaction）</a>
</li>
<li><a href="https://dnskimox.hateblo.jp/entry/2018/12/22/154038" target="_blank" rel="noopener noreferrer">集約とトランザクション境界に関するメモ</a>
</li>
<li><a href="https://kbigwheel.hateblo.jp/entry/2018/12/03/aggregate-and-consistency" target="_blank" rel="noopener noreferrer">集約の境界と整合性の維持の仕方に悩んで2ヶ月ぐらい結論を出せていない話</a>
</li>
<li><a href="https://qiita.com/j5ik2o/items/ae8a4d3cdaa24afe7599" target="_blank" rel="noopener noreferrer">集約の境界と整合性問題に関する感想</a>
</li>
</ul>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3" term="%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3" label="アーキテクチャ"/><category scheme="https://yyh-gl.github.io/tech-blog/categories/ddd" term="ddd" label="DDD"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">【簡単まとめシリーズ】Go1.12からの変更点</title><link href="https://yyh-gl.github.io/tech-blog/blog/changes-since-go-1-12/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/mercari-tech-talk-idempotency/?utm_source=atom_feed" rel="related" type="text/html" title="【merpay Tech Talk】マイクロサービスの冪等性に関する勉強会"/><link href="https://yyh-gl.github.io/tech-blog/blog/golangci-lint-custom-settings/?utm_source=atom_feed" rel="related" type="text/html" title="GolangCI-Lintの設定ファイルを理解する"/><link href="https://yyh-gl.github.io/tech-blog/blog/golang-vcr/?utm_source=atom_feed" rel="related" type="text/html" title="【Go+VCR】外部APIとの通信を保存してテストに使用する話"/><link href="https://yyh-gl.github.io/tech-blog/blog/react_typescript_sample/?utm_source=atom_feed" rel="related" type="text/html" title="【React+TypeScript】TypeScript入門"/><link href="https://yyh-gl.github.io/tech-blog/blog/denago_3/?utm_source=atom_feed" rel="related" type="text/html" title="【DeNA.go #3】Go活用事例やパフォーマンスチューニングの話聞いてきた"/><id>https://yyh-gl.github.io/tech-blog/blog/changes-since-go-1-12/</id><author><name>yyh-gl</name></author><published>2020-02-03T00:00:00+00:00</published><updated>2020-02-03T00:00:00+00:00</updated><content type="html"><![CDATA[<blockquote>Go1.14が楽しみ</blockquote><h1 id="簡単まとめシリーズ">簡単まとめシリーズ</h1>
<p>『簡単まとめ』では、僕が記事や書籍で学んだ内容をメモ程度に簡単にまとめていきます📝</p>
<p>今回は <b>Go1.12からの変更点</b> についてです。</p>
<h1 id="the-state-of-go-2020">The State of Go 2020</h1>
<p>Twitterで『<a href="https://speakerdeck.com/campoy/the-state-of-go-2020" target="_blank" rel="noopener noreferrer">The State of Go 2020</a>
』というタイトルのスライドを見つけました。</p>
<p>Go1.12から変わったところに焦点を当て、<br>
Go1.13でどのような機能が追加されているのか、 <br>
Go1.14でどのような機能が追加される予定なのかまとめてあります。</p>
<p>今回は、完全主観で自分が興味のある内容をハイライトします〜😇</p>
<h1 id="完全主観ハイライト">完全主観ハイライト</h1>
<h3 id="-数値まわりの表現方法が増える">▼ 数値まわりの表現方法が増える</h3>
<p><a href="https://speakerdeck.com/campoy/the-state-of-go-2020?slide=7" target="_blank" rel="noopener noreferrer">https://speakerdeck.com/campoy/the-state-of-go-2020?slide=7</a>
</p>
<h3 id="-interfaceにおける関数の重複が許可される例外あり">▼ interfaceにおける関数の重複が許可される（例外あり）</h3>
<p><a href="https://speakerdeck.com/campoy/the-state-of-go-2020?slide=17" target="_blank" rel="noopener noreferrer">https://speakerdeck.com/campoy/the-state-of-go-2020?slide=17</a>
</p>
<h3 id="-エラーハンドリングが変わる">▼ エラーハンドリングが変わる</h3>
<p><a href="https://speakerdeck.com/campoy/the-state-of-go-2020?slide=26" target="_blank" rel="noopener noreferrer">https://speakerdeck.com/campoy/the-state-of-go-2020?slide=26</a>
</p>
<h3 id="-testingパッケージに-cleanup-が追加">▼ testingパッケージに <code>CleanUp()</code> が追加</h3>
<p><a href="https://speakerdeck.com/campoy/the-state-of-go-2020?slide=39" target="_blank" rel="noopener noreferrer">https://speakerdeck.com/campoy/the-state-of-go-2020?slide=39</a>
</p>
<h3 id="-go-modules">▼ go modules</h3>
<p><a href="https://speakerdeck.com/campoy/the-state-of-go-2020?slide=43" target="_blank" rel="noopener noreferrer">https://speakerdeck.com/campoy/the-state-of-go-2020?slide=43</a>
</p>
<h3 id="-配列スライスにおける範囲外指定時のエラーが親切になった">▼ 配列・スライスにおける範囲外指定時のエラーが親切になった</h3>
<p><a href="https://speakerdeck.com/campoy/the-state-of-go-2020?slide=50" target="_blank" rel="noopener noreferrer">https://speakerdeck.com/campoy/the-state-of-go-2020?slide=50</a>
</p>
<h3 id="-deferが速くなる">▼ deferが速くなる</h3>
<p><a href="https://speakerdeck.com/campoy/the-state-of-go-2020?slide=51" target="_blank" rel="noopener noreferrer">https://speakerdeck.com/campoy/the-state-of-go-2020?slide=51</a>
</p>
<h3 id="-json関連の処理が速くなる">▼ json関連の処理が速くなる</h3>
<p><a href="https://speakerdeck.com/campoy/the-state-of-go-2020?slide=52" target="_blank" rel="noopener noreferrer">https://speakerdeck.com/campoy/the-state-of-go-2020?slide=52</a>
</p>
<h3 id="-他にもいろいろ速くなる">▼ 他にもいろいろ速くなる</h3>
<p><a href="https://speakerdeck.com/campoy/the-state-of-go-2020?slide=53" target="_blank" rel="noopener noreferrer">https://speakerdeck.com/campoy/the-state-of-go-2020?slide=53</a>
</p>
<h3 id="-gopherconの参加者が増えていく様子がえもい">▼ GopherConの参加者が増えていく様子がえもい</h3>
<p><a href="https://speakerdeck.com/campoy/the-state-of-go-2020?slide=64" target="_blank" rel="noopener noreferrer">https://speakerdeck.com/campoy/the-state-of-go-2020?slide=64</a>
</p>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/go" term="go" label="Go"/><category scheme="https://yyh-gl.github.io/tech-blog/categories/%E7%B0%A1%E5%8D%98%E3%81%BE%E3%81%A8%E3%82%81" term="%E7%B0%A1%E5%8D%98%E3%81%BE%E3%81%A8%E3%82%81" label="簡単まとめ"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">【merpay Tech Talk】マイクロサービスの冪等性に関する勉強会</title><link href="https://yyh-gl.github.io/tech-blog/blog/mercari-tech-talk-idempotency/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/golangci-lint-custom-settings/?utm_source=atom_feed" rel="related" type="text/html" title="GolangCI-Lintの設定ファイルを理解する"/><link href="https://yyh-gl.github.io/tech-blog/blog/golang-vcr/?utm_source=atom_feed" rel="related" type="text/html" title="【Go+VCR】外部APIとの通信を保存してテストに使用する話"/><link href="https://yyh-gl.github.io/tech-blog/blog/react_typescript_sample/?utm_source=atom_feed" rel="related" type="text/html" title="【React+TypeScript】TypeScript入門"/><link href="https://yyh-gl.github.io/tech-blog/blog/denago_3/?utm_source=atom_feed" rel="related" type="text/html" title="【DeNA.go #3】Go活用事例やパフォーマンスチューニングの話聞いてきた"/><link href="https://yyh-gl.github.io/tech-blog/blog/github-actions-private-action/?utm_source=atom_feed" rel="related" type="text/html" title="【GitHub Actions】プライベートアクションを使ってみた"/><id>https://yyh-gl.github.io/tech-blog/blog/mercari-tech-talk-idempotency/</id><author><name>yyh-gl</name></author><published>2019-12-20T00:00:00+00:00</published><updated>2019-12-20T00:00:00+00:00</updated><content type="html"><![CDATA[<blockquote>冪等性 is 大事</blockquote><h1 id="tech-talk-vol2-backend-engineer-マイクロサービスの冪等性">Tech Talk vol.2 Backend Engineer 〜マイクロサービスの冪等性〜</h1>
<ul>
<li><a href="https://mercari.connpass.com/event/157009/" target="_blank" rel="noopener noreferrer">connpass</a>
</li>
<li>ハッシュタグ：<a href="https://twitter.com/hashtag/merpay_techtalk" target="_blank" rel="noopener noreferrer">#merpay_techtalk</a>
</li>
<li><a href="https://handsup.cloud/r/VEQvy2o#new-comment" target="_blank" rel="noopener noreferrer">質問板</a>
</li>
</ul>
<p>merpay社で開催された勉強会です。<br>
参加者のツイートも含めてメモを残しておきます。</p>
<p>かなり雑なのでコンテキストが読み取れないところもあると思いますが、<br>
なにかの参考になれば幸いです。</p>
<p>（<a href="https://twitter.com/sonatard" target="_blank" rel="noopener noreferrer">@sonatard</a>
 さんの実況にとても助けられました。
ありがとうございました！）</p>
<h1 id="1-500万ユーザーを支える残高の冪等性">1. 500万ユーザーを支える残高の冪等性</h1>
<p>登壇者：（@knsh14）</p>
<p><s>スライド</s></p>
<p><a href="https://speakerdeck.com/kazegusuri/builderscon-tokyo-2019-open-skt" target="_blank" rel="noopener noreferrer">参考スライド</a>

（ベースとなる話は↑これ）</p>
<h2 id="残高管理サービスbalance-service">残高管理サービス（Balance Service）</h2>
<p>使ってるDBはCloud Spanner</p>
<p>外部サービスや他のマイクロサービスには依存してない</p>
<p>DeleteなしでCRUのみ</p>
<p>かなりシンプルで冪等性を担保しやすい</p>
<h2 id="冪等性があるapi">冪等性があるAPI</h2>
<p>最初に成功した一度だけ処理される</p>
<p>同じリクエストを何回繰り返しても内部的には処理されない</p>
<p>何度リクエストしても同じ結果が返ってくる
何度でもリトライできる</p>
<p>取引IDが保存されていれば既に行われた取引である</p>
<h2 id="冪等性の担保">冪等性の担保</h2>
<ul>
<li>冪等性キーが同じ
外部から指定される取引IDのこと</li>
<li>残高の種類が同じ
ポイント/メイルペイ残高 など</li>
<li>操作する金額が同じ</li>
</ul>
<h2 id="冪等なレスポンス">冪等なレスポンス</h2>
<ul>
<li>レスポンスはDBから引ける情報で組み立てる</li>
<li>取引IDから引ける情報
<ul>
<li>取引後残高は返さない</li>
</ul>
</li>
</ul>
<p><a href="https://twitter.com/matsukaz/status/1207250011391553536" target="_blank" rel="noopener noreferrer">Twitterメモ</a>
</p>
<h2 id="冪等なapiでのエラー">冪等なAPIでのエラー</h2>
<ul>
<li>リトライしても良いエラー：ex. タイムアウト</li>
<li>リトライだめなエラー：ex. 残高不足</li>
</ul>
<h2 id="誰がどう使うのか">誰がどう使うのか？</h2>
<ul>
<li>リクエストを投げる側の使い方1つで簡単に冪等性が壊れる
→ ex. 取引IDを毎回変えるとか</li>
</ul>
<h1 id="2-コード決済における冪等性と整合性">2. コード決済における冪等性と整合性</h1>
<p>登壇者：（@susho0220）</p>
<p><a href="https://speakerdeck.com/susho/number-merpay-techtalk" target="_blank" rel="noopener noreferrer">スライド</a>
</p>
<p>モノリスであれば、リクエスト、レスポンス内のトランザクションで整合性を保てる。</p>
<p>マイクロサービスでは、トランザクションが分かれるため、<br>
決済の進捗状態を保持するDBを用意し、状態を管理 <br>
→ Pending、Authorized、Captured</p>
<p>メルペイのコード決済では、<br>
Cloud Pub/Subを使ってAuthorizedまでを同期処理、Captureは非同期処理で行っている。<br></p>
<p>同期処理の責務を最小限に抑えて、処理自体もシンプルにするのが狙い。<br>
→ リトライによる不整合の解消が重要な処理は、自動的にリトライをしてくれるPubSubで非同期にすることで、実装がシンプルになる</p>
<h1 id="3-バッチ処理と冪等性">3. バッチ処理と冪等性</h1>
<p>登壇者：（@kaznishi1246）</p>
<p><a href="https://speakerdeck.com/kaznishi/20191218-merpay-techtalk" target="_blank" rel="noopener noreferrer">スライド</a>
</p>
<h3 id="バッチ処理">バッチ処理</h3>
<p>回復可能かどうかはとても大事</p>
<p>冪等性があれば回復後のリトライも安心して行える</p>
<h3 id="何回実行されても大丈夫冪等なバッチ処理を作る">何回実行されても大丈夫（冪等）なバッチ処理を作る</h3>
<p>バッチのリトライ戦略には大別して下記2パターンがある。<br>
（メルペイではどちらもある。）</p>
<ul>
<li>処理済みも含めてやり直す</li>
</ul>
<p>全ての処理が冪等であることが求められる。</p>
<p>難しいことをあまり考えなくて良い。（if文減る）<br>
ただし、時間・リソースをくう</p>
<p>個々のステップが冪等である前提が必要。<br>
他のマイクロサービス連携してる場合は、リクエスト先の冪等性も必要</p>
<ul>
<li>一度処理したものはスキップする</li>
</ul>
<p>実装が複雑になる。（ステータスなどで条件分岐）<br>
ただし、未処理のみ対応するので所要時間が短く、軽い</p>
<p>「どこまで処理したか」をどこかに保持する必要がある</p>
<h3 id="外部サービスを使用する場合はどうする">外部サービスを使用する場合はどうする？</h3>
<p>外部サービスが冪等ならば何度リトライしても大丈夫だから無問題</p>
<p>ただし、外部サービスによっては、ロールバックされるものもあるので、そういう場合は検討が必要</p>
<h3 id="バッチを回す前の確認">バッチを回す前の確認</h3>
<p>バッチ処理が処理する材料データは揃っているか確認する <br>
（前段のバッチが終わっているか確認）<br>
→各バッチの終了状態をDBで管理している</p>
<h1 id="4-パネルディスカッション">4. パネルディスカッション</h1>
<p>登壇者：@kazegusuri, @knsh14, @susho0220, @kaznishi1246</p>
<p><a href="https://handsup.cloud/r/VEQvy2o#new-comment" target="_blank" rel="noopener noreferrer">質問板</a>
</p>
<p>会場からの質問が多く、Q&amp;Aだけで終了しました。<br>
とても興味深い話ばかりでした。</p>
<h3 id="冪等性キーの発行や管理はどうしてるんだろう">冪等性キーの発行や管理はどうしてるんだろう？</h3>
<p>Balance Service の前段にある Payment Service にて発行 <br>
→ UUID v4 で発行（基本的に被ることはないはず）</p>
<h3 id="マイクロサービス間のデータ不整合を修正するバッチはどれくらいの時間間隔で実行しているのでしょうか">マイクロサービス間のデータ不整合を修正するバッチはどれくらいの時間間隔で実行しているのでしょうか？</h3>
<p>30分に1回<br>
15分とか短くしたいが、実行中の可能性も出てくるので、難しい<br>
10, 15分あける必要があるが、コンサバで30分</p>
<h3 id="冪等性がないことにより発生した問題や障害などは過去にありましたでしょうか言える範囲で結構です">冪等性がないことにより発生した問題や障害などは過去にありましたでしょうか？（言える範囲で結構です）</h3>
<ul>
<li>
<p>最初から意識されていたので特になかった</p>
</li>
<li>
<p>正しくリトライされ無かった経験はある</p>
</li>
</ul>
<p>リクエストを受けたら、別マイクロサービスの情報を使用して処理を行っていた。<br>
しかし、その別マイクロサービスからもらうデータが変わったことでエラーとなった。<br>
→解決策として、Bodyデータ（別マイクロサービスの？）もDBに保存して使いまわした</p>
<p><a href="https://twitter.com/sonatard/status/1207263596494802944?s=20" target="_blank" rel="noopener noreferrer">Twitterメモ</a>
</p>
<h3 id="トランザクションを使う以外にべき等性を担保する方法って例えばどんなのがありますか">トランザクションを使う以外にべき等性を担保する方法って例えばどんなのがありますか</h3>
<p>ユニーク制約を保証できるものならOK<br>
ex. ユニーク成約に引っかかるようになったらロールバックとか</p>
<h3 id="カオスエンジニアリング的なことってやってたりするんですか">カオスエンジニアリング的なことってやってたりするんですか</h3>
<p>Istioでfalte injection機能で取り組もうとしているが、想定した機能ではなかったのでまだ実施していない</p>
<p>Cloud Spannerの部分をMockにしてランダムでエラーを返すなどのテストを実行している<br></p>
<p><a href="https://twitter.com/sonatard/status/1207264613269590016?s=20" target="_blank" rel="noopener noreferrer">Twitterメモ</a>
</p>
<h3 id="売掛決済やクレカ決済のようにauthorized-capturedに数日かかる場合はありますかその場合にauthorizedを解放することはありますか">売掛決済やクレカ決済のようにauthorized-&gt;capturedに数日かかる場合はありますか？その場合にauthorizedを解放することはありますか？</h3>
<h3 id="statusをどうやって管理しているのか知りたい-updateしているのかeventソーシング的に組み立てているのか">statusをどうやって管理しているのか知りたい updateしているのか、eventソーシング的に組み立てているのか</h3>
<p>update でやってる。<br>
イベントソーシングに挑戦するほどの余裕がなかった。</p>
<p>ただ、updateだといつアクションが起こったのか分からなくなるから、ログを残す必要がある。</p>
<h3 id="マイクロサービス化するとチームごとに指針が違ったりすると思いますが冪等性等外せないところを担保するためにどのような組織的工夫をしていますか">マイクロサービス化するとチームごとに指針が違ったりすると思いますが、冪等性等外せないところを担保するためにどのような組織的工夫をしていますか。</h3>
<p>最初はkazegusuriさんが口酸っぱく言っていたが、今はみんなが意識できている。</p>
<p><a href="https://mobile.twitter.com/sonatard/status/1207266041090297856%3cbr%3e" target="_blank" rel="noopener noreferrer">Twitterメモ</a>
</p>
<p>デザインドックを書いてレビューしてから取り組む<br>
冪等性の理解の普及をしてきた<br>
そのうえでチームに任せている</p>
<h3 id="取引idが重複する可能性を考慮してるのそもそもなんで重複する可能性があるんだろ重複はしないけどマイクロサービスの１サービスの中では重複するかしないかは知らないから一応考慮しておくという感じなのかな">取引IDが重複する可能性を考慮してるの、そもそもなんで重複する可能性があるんだろ。重複はしないけど、マイクロサービスの１サービスの中では重複するかしないかは知らないから一応考慮しておくという感じなのかな</h3>
<p>IDが絶対に被らない生成方法がある？</p>
<p>冪等性キーだけで冪等性を保証しようとすると、<br>
リトライ時のパラメータが変わった時に問題が起きる可能性があるので、<br>
リクエストのボディーなども見るようにしたかった<br>
(が、今は冪等性キーだけしか見ていない？<br></p>
<p><a href="https://twitter.com/sonatard/status/1207266711117844482" target="_blank" rel="noopener noreferrer">Twitterメモ</a>
</p>
<h3 id="残高の整合性をどう担保しているのか聞いてみたい">残高の整合性をどう担保しているのか聞いてみたい</h3>
<p>Balance Service では増えた減ったのアクションだけ記録、<br>
別で会計サービス?とかが残高を持っていたりして、そこと照らし合わせたりはする</p>
<h3 id="authorizedになった時点でcapturedには100遷移できるという前提でしょうか">authorizedになった時点でcapturedには100%遷移できるという前提でしょうか？</h3>
<p>yes</p>
<h3 id="なぜbalance-serviceでサービスで残高などをレスポンスとして返してはいけないのかがわからなかったです">なぜBalance Serviceでサービスで残高などをレスポンスとして返してはいけないのかがわからなかったです</h3>
<p>「結果いくらになった」というのは変わるからだめ</p>
<h3 id="この話の中でバッチの実行履歴テーブルを作ってる場合によってはワークフロー化とかもあるという話があったと思うんですがワークフロー化せず履歴テーブルを作る選択をしたのはどうしてでしょうかバッチの中での各トランザクションごとに再開ポイントスキップできるできないみたいな話もあったと思うんですけど各トランザクションごとに個別バッチ化してワークフロー組んだら便利だったのかなーって思うのですがどうでしょうか">この話の中で、バッチの実行履歴テーブルを作ってる・場合によってはワークフロー化とかもある、という話があったと思うんですが、ワークフロー化せず履歴テーブルを作る選択をしたのはどうしてでしょうか？バッチの中での各トランザクションごとに再開ポイント・スキップできるできない、みたいな話もあったと思うんですけど、各トランザクションごとに個別バッチ化してワークフロー組んだら便利だったのかなーって思うのですがどうでしょうか？</h3>
<blockquote>
<p>各トランザクションごとに個別バッチ化しワークフローを組む</p>
</blockquote>
<p>という部分について、処理が複雑なところがあるので、できるか分からない。</p>
<h3 id="取引idだけじゃなくてコンテンツの中身までチェックする理由は">取引IDだけじゃなくてコンテンツの中身までチェックする理由は？</h3>
<p>取引IDが同じで処理内容が異なるリクエストの場合に、<br>
処理済みOKと誤って返さないようにという配慮の観点もあるとのこと。<br>
勉強になりました、良き</p>
<p><a href="https://twitter.com/laqiiz/status/1207268316437368832" target="_blank" rel="noopener noreferrer">Twitterメモ</a>
</p>
<h3 id="取引idを一意にするのは難しい">取引IDを一意にするのは難しい？</h3>
<p>そんなことはない</p>
<h3 id="冪等性の重要性は十分に理解しているのですがそもそもどういう問題を解決するためでしょうか">「冪等性」の重要性は十分に理解しているのですが、そもそもどういう問題を解決するためでしょうか？</h3>
<p>不整合を修復すること。</p>
<h3 id="冪等性キーとレスポンスは永遠に保持し続けるのか定期的に削除したほうがいいのか気になりました">冪等性キーとレスポンスは永遠に保持し続けるのか、定期的に削除したほうがいいのか気になりました</h3>
<p>今のところ消す予定はない</p>
<p>一般的には消す方が多い。
→2時間とかで消すパターンが多い</p>
<p>メルペイは消すのがめんどくさかったから、残せばいいんじゃない？で残ってたはず</p>
<h3 id="バッチの実行間隔短くすると周回遅れが起きたり処理中掴むのは確かにありそうだけど決済で数十分の処理中はあるんだろうか">バッチの実行間隔短くすると周回遅れが起きたり、処理中掴むのは確かにありそう。だけど、決済で、数十分の処理中はあるんだろうか？</h3>
<p>まぁ、ないです。ｗ</p>
<p>5分くらいにはできるかなとは思っている。</p>
<h3 id="バッチにより不整合を解消することが起きるのか">バッチにより不整合を解消することが起きるのか</h3>
<p>GCPのネットワークの問題で不整合が起きていることはある</p>
<h3 id="uuid-v4だとしても衝突する場合があるのですがユニーク性はどう担保してますか">uuid v4だとしても衝突する場合があるのですが、ユニーク性はどう担保してますか?</h3>
<p>DBに保存しており、ユニーク制約があるので大丈夫</p>
<h3 id="不整合を修正するバッチがこけ続けたことはないですか">不整合を修正するバッチがこけ続けたことはないですか？</h3>
<p>あります。</p>
<p>人力になるところもあるので、気付ける仕組みづくりをしている</p>
<h3 id="ここだけの話">ここだけの話</h3>
<p>メルペイはかなりオープンに話しているから、特に無いｗ</p>
<h3 id="バッチ処理が増えてくると何がどのタイミングでデータにアクセスしているか管理しきれなくなる場合があると思いますがそのあたりの課題感はありますかシステム全体の処理を把握されている方が担保しているのでしょうか">バッチ処理が増えてくると、何がどのタイミングでデータにアクセスしているか管理しきれなくなる場合があると思いますが、そのあたりの課題感はありますか？システム全体の処理を把握されている方が担保しているのでしょうか？</h3>
<p>そこまで複雑にはなっていない。<br>
ある程度マイクロサービス内で閉じた状態になっている。<br>
だから、今のところ特になにもしてないけど大丈夫</p>
<p>全体を把握している人はいない。<br>
なんとなく分かっている人がいる？ので、なにかあったらその人中心に動くかなぁ。</p>
<h3 id="マイクロサービス意識しすぎてコードペイメントとインナーペイメント別けるとかやりすぎじゃない">マイクロサービス意識しすぎて、コードペイメントとインナーペイメント別けるとかやりすぎじゃない？</h3>
<p>QRとかNFCとか決済プロバイダ側で担保すること、<br>
その裏側でのお金の動きを別けるために必要だと感じている。</p>
<p>インナーペイメント：クレカでいくら、残高からいくらって言えば、処理して、その結果を返すやつ</p>
<p>（↑まとめきれませんでした。ですが↓のツイートが参考になります）</p>
<p><a href="https://twitter.com/sonatard/status/1207273197093019648" target="_blank" rel="noopener noreferrer">Twitterメモ</a>
</p>
<p>Code PaymentとInternal Paymentは分けすぎなのではないか？<br>
外部へのオーソリを投げるのはやり過ぎではないか？もっと簡易的にするべきではないか</p>
<p>Internal Paymentは決済プロバイダのような立場<br>
Code Paymentは、決済プロバイダを使うFintech企業のサービスのような立場</p>
<h1 id="最後に">最後に</h1>
<p><b>「自分のマイクロサービスだけでは冪等性を守れないので、そのマイクロサービスを使う他のマイクロサービスのチームとコミュニケーション大事」</b></p>
<p><a href="https://twitter.com/s_naga03/status/1207255206456524801?s=20" target="_blank" rel="noopener noreferrer">Twitterメモ</a>
</p>
<br>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/%E5%8B%89%E5%BC%B7%E4%BC%9A" term="%E5%8B%89%E5%BC%B7%E4%BC%9A" label="勉強会"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">GolangCI-Lintの設定ファイルを理解する</title><link href="https://yyh-gl.github.io/tech-blog/blog/golangci-lint-custom-settings/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/golang-vcr/?utm_source=atom_feed" rel="related" type="text/html" title="【Go+VCR】外部APIとの通信を保存してテストに使用する話"/><link href="https://yyh-gl.github.io/tech-blog/blog/react_typescript_sample/?utm_source=atom_feed" rel="related" type="text/html" title="【React+TypeScript】TypeScript入門"/><link href="https://yyh-gl.github.io/tech-blog/blog/denago_3/?utm_source=atom_feed" rel="related" type="text/html" title="【DeNA.go #3】Go活用事例やパフォーマンスチューニングの話聞いてきた"/><link href="https://yyh-gl.github.io/tech-blog/blog/github-actions-private-action/?utm_source=atom_feed" rel="related" type="text/html" title="【GitHub Actions】プライベートアクションを使ってみた"/><link href="https://yyh-gl.github.io/tech-blog/blog/mercarigo_11/?utm_source=atom_feed" rel="related" type="text/html" title="【mercari.go #11】エラーハンドリング ＋ singleflight ＋ ISUCON ベンチマーカー"/><id>https://yyh-gl.github.io/tech-blog/blog/golangci-lint-custom-settings/</id><author><name>yyh-gl</name></author><published>2019-12-09T00:00:00+00:00</published><updated>2019-12-09T00:00:00+00:00</updated><content type="html"><![CDATA[<blockquote>DMM Advent Calendar 2019 9日目</blockquote><h1 id="dmm-advent-calendar-2019">DMM Advent Calendar 2019</h1>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/12/react_typescript_sample/qiita_advent_calendar_2019.png" width="700">
<p>本記事は <a href="https://qiita.com/advent-calendar/2019/dmm" target="_blank" rel="noopener noreferrer">DMM Advent Calendar 2019</a>
 の 9日目 の記事です。</p>
<br>
<p>私は現在、DMM.com の CDS というチームに所属し、<br>
主に<a href="https://inside.dmm.com/archive/category/%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC" target="_blank" rel="noopener noreferrer">ユーザレビュー基盤</a>
のバックエンドを開発しています。</p>
<br> 
<p>今回は、Go用Linterである GolangCI-Lint を軽く紹介した後に、<br>
GolangCI-Lint のハマリポイントとその解決策である設定周りの話をします。</p>
<h1 id="linter-導入していますか">Linter 導入していますか？</h1>
<p>突然ですが、みなさんの開発環境には Linter が導入されているでしょうか？</p>
<p>私の所属するチームでは、<br>
<u>コーディング規約違反</u> および <u>コンパイラでは見つけられないエラー</u> を検知するために、<br>
ローカルと CI において Linter を回すようにしています。</p>
<h1 id="goにおけるlinter">GoにおけるLinter</h1>
<p>Goの場合、Linterがデフォルトで用意されているうえに、<br>
ライブラリとして公開されているものも多く存在します。</p>
<p>なかでも有名なものに以下のようなものがあります。</p>
<ul>
<li>govet：GoデフォルトのLinter</li>
<li>errcheck：ちゃんとエラーハンドリングしているかチェックしてくれる</li>
<li>unused：未使用の定義をチェックしてくれる</li>
<li>goimports：未使用のimportを消してくれたり、フォーマット修正してくれる</li>
<li>gosimple：コードをシンプルにしてくれる</li>
</ul>
<br>
<p>しかしながら、多すぎるがゆえに <u>どれを選択すればいいのか分からなくなりがちです</u>。<br>
加えて、導入する Linter が増えれば、その分だけ <u>導入・管理コストが増加</u> します。</p>
<p>この問題を解決してくれるツールが <b>GolangCI-Lint</b> です。</p>
<h1 id="golangci-lint">GolangCI-Lint</h1>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/12/golangci-lint-custom-settings/golangci-lint-logo.png" width="200">
<p>勉強会でもよく耳にするようになってきている＋多くの紹介記事があるので、<br>
ここで詳しく説明する必要もないかもしれませんが、いちおう少しだけ触れておきます。</p>
<br>
<p><a href="https://github.com/golangci/golangci-lint" target="_blank" rel="noopener noreferrer">GolangCI-Lint</a>
とは、
GoのLinterを一元管理するためのツールです。<br>
開発者は GolangCI-Lint を導入するだけで様々な Linter を実行することができます。</p>
<p>したがって、Linter の導入・管理コストが一気に下がりますし、<br>
運用していく過程で不要だと感じた Linter は、簡単に無効化することもできるので、<br>
気軽に Linter を試用することができます。</p>
<p>対応 Linter は<a href="https://github.com/golangci/golangci-lint#supported-linters" target="_blank" rel="noopener noreferrer">こちら</a>
に一覧が載っています。</p>
<p>似たようなツールに <a href="https://github.com/alecthomas/gometalinter" target="_blank" rel="noopener noreferrer">gometalinter</a>
 というのがあったのですが、<br>
<a href="https://github.com/alecthomas/gometalinter/issues/590" target="_blank" rel="noopener noreferrer">こちらの議論</a>
の結果、なくなることが決定しました。<br>
<b>今後の主流は GolangCI-Lint です</b>。</p>
<br>
<p>（…ロゴいいですよね👍）</p>
<h1 id="使ってみる">使ってみる</h1>
<h2 id="導入">導入</h2>
<p><a href="https://github.com/golangci/golangci-lint#install" target="_blank" rel="noopener noreferrer">こちら</a>
に導入方法が書いてあります。</p>
<p>Binary のインストール方法を紹介しておくと、下記のようになります。</p>
<pre><code class="language-zsh"># $(go env GOPATH)/bin ディレクトリ配下にインストールする方法
curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.21.0

# ./bin ディレクトリ配下にインストールする方法
curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s v1.21.0

# alpine linux 用のインストール方法
wget -O- -nv https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s v1.21.0
</code></pre>
<p>もちろん <code>go get</code> でもインストールできますし、<br>
他にも brew や Docker イメージとしても提供されています。</p>
<p><a href="https://github.com/golangci/golangci-lint#editor-integration" target="_blank" rel="noopener noreferrer">IDEやエディタ上で実行する方法も紹介</a>
されており、サポートが手厚いです。</p>
<p>弊チームでは、ローカル用コンテナイメージのビルド時に <code>go get</code> してインストールしています。</p>
<h2 id="実行">実行</h2>
<p><code>$ golangci-lint run</code> コマンドで実行できます。<br>
テストファイルにも Lint をかけたい場合は、<code>--tests</code> オプションを付与します。</p>
<p>何も設定しない状態では、<a href="https://github.com/golangci/golangci-lint#enabled-by-default-linters" target="_blank" rel="noopener noreferrer">こちら</a>
に記載のある Linter が実行されます。</p>
<p>では、実際に動かしてみます。</p>
<pre><code class="language-zsh">$ docker-compose exec -T app golangci-lint run --tests ./...
handler/rest/blog.go:82:27: Error return value of `(*encoding/json.Encoder).Encode` is not checked (errcheck)
	json.NewEncoder(w).Encode(res)
	                         ^
domain/model/task/task.go:9:2: structtag: struct field tag `json:&quot;title&quot;,&quot;hoge&quot;` not compatible with reflect.StructTag.Get: key:&quot;value&quot; pairs not separated by spaces (govet)
	Title         string      `json:&quot;title&quot;,&quot;hoge&quot;`
	^
</code></pre>
<p>エラーが出ました。<br>
2行目と5行目の最後に括弧書きでエラーを発見した Linter の名前が書いてあります。<br>
（厳密には Lint で出力された内容はエラーではありませんが、CIがこけるという意味で「エラー」と呼ぶことにします）<br>
今回の場合だと、errcheck と govet がエラーを発見したようですね。</p>
<h1 id="golangci-lint-には検知できないエラーがある">GolangCI-Lint には検知できないエラーがある…？🧐</h1>
<p>では、ここから本記事の主題に入っていきたいと思います。<br>
実際に GolangCI-Lint を導入しようとしてハマったポイントです。</p>
<p>といっても、GolangCI-Lint の README はとても詳細に書かれているので、<br>
なにかあっても README を見ればすぐ解決できます👍</p>
<p>・<br>
・<br>
・<br></p>
<p>そんなこんなでいきなりですが、同じソースコードに対して、<br>
GolangCI-Lint を使わずに golint を単体で走らせてみます。</p>
<pre><code class="language-zsh">$ golint ./...
domain/model/task/task.go:7:1: comment on exported type Task should be of the form &quot;Task ...&quot; (with optional leading article)
</code></pre>
<p>！？<br>
さきほどの GolangCI-Lint にはなかったエラーが出力されました。</p>
<p>なんとなく分かってきた方もおられると思いますが、<br>
GolangCI-Lint はデフォルト設定だと、いくつかのエラーを無視するようになっています。</p>
<p>例えば、今回の例だと、コメントの記述形式についてのエラーですが、<br>
そこまで厳密に守らなくてもいい内容ですね。（僕は守りたい派ですが。。。）<br>
したがって、GolangCI-Lint が気を利かせて無視するようにしてくれています。</p>
<h2 id="デフォルトで無視されるルール">デフォルトで無視されるルール</h2>
<p>デフォルト設定だと無視されるルールは <br>
<a href="https://github.com/golangci/golangci-lint#command-line-options" target="_blank" rel="noopener noreferrer">こちら</a>
の<code>--exclude-use-default</code>オプションの説明のところに記載があります。<br>
抜粋してくると以下のとおりです。<br></p>
<table>
<thead>
<tr>
<th></th>
<th>Linter名</th>
<th>無視されるエラー（Linterが出力する内容）</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>errcheck</td>
<td><code>Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*printf?|os\.(Un)?Setenv). is not checked</code></td>
</tr>
<tr>
<td>2</td>
<td>golint</td>
<td><code>(comment on exported (method|function|type|const)|should have( a package)? comment|comment should be of the form)</code></td>
</tr>
<tr>
<td>3</td>
<td>golint</td>
<td>test系パッケージにおける <code>func name will be used as test\.Test.* by other packages, and that stutters; consider calling this</code></td>
</tr>
<tr>
<td>4</td>
<td>govet</td>
<td><code>(possible misuse of unsafe.Pointer|should have signature)</code></td>
</tr>
<tr>
<td>5</td>
<td>staticcheck</td>
<td><code>ineffective break statement. Did you mean to break out of the outer loop</code></td>
</tr>
<tr>
<td>6</td>
<td>gosec</td>
<td><code>Use of unsafe calls should be audited</code></td>
</tr>
<tr>
<td>7</td>
<td>gosec</td>
<td><code>Subprocess launch(ed with variable|ing should be audited)</code></td>
</tr>
<tr>
<td>8</td>
<td>gosec</td>
<td>errcheckと重複するエラーチェック <code>G104</code></td>
</tr>
<tr>
<td>9</td>
<td>gosec</td>
<td><code>(Expect directory permissions to be 0750 or less|Expect file permissions to be 0600 or less)</code></td>
</tr>
<tr>
<td>10</td>
<td>gosec</td>
<td><code>Potential file inclusion via variable</code></td>
</tr>
</tbody>
</table>
<br>
<p>さきほど例に挙げていた、golint のコメント記述形式に関するエラーは、表中2番のエラーです。<br>
だから、GolangCI-Lint では検知されなかったんですね。</p>
<p>このルール、人によっては「これ無視しちゃだめだろ」と思われるものもあると思いますが、<br>
投稿日時点ではこのようなルールがデフォルトで無視されるようになっています。</p>
<h1 id="設定ファイル-golangciyml">設定ファイル .golangci.yml</h1>
<p>気を利かせてくれているのは分かりますが、無視しないで欲しいときもありますよね。<br>
逆にこのエラーは無視してほしいっていうニーズもあると思います。</p>
<p>そこで登場するのが <b>.golangci.yml</b> です。<br>
<code>.golangci.yml</code> により、GolangCI-Lint の細かな設定が可能になります。<br></p>
<p>CLIのオプションでも指定できますが、チームで共有するなら設定ファイルの方がいいでしょう。<br>
また、後述しますが、CLIのオプションでは指定できない設定もあるので注意が必要です。</p>
<h2 id="設定方法httpsgithubcomgolangcigolangci-lintconfig-file"><a href="https://github.com/golangci/golangci-lint#config-file" target="_blank" rel="noopener noreferrer">設定方法</a>
</h2>
<p>設定ファイルとして <code>.golangci.yml</code> を紹介しましたが、他にも下記の拡張子が使用できます。</p>
<ul>
<li><code>.golangci.toml</code></li>
<li><code>.golangci.json</code></li>
</ul>
<p>今回は<code>.golangci.yml</code>を使用します。</p>
<p>設定ファイルのサンプルが<a href="https://github.com/golangci/golangci-lint/blob/master/.golangci.example.yml" target="_blank" rel="noopener noreferrer">GitHub上に公開</a>
されています。</p>
<p>使えるオプションはCLIと同じです。<br>
ただし、CLI では、Linter ごとの設定（<code>linters-settings</code>）ができないため、<br>
Linter ごとに細かく設定をしたい場合は設定ファイルを書く必要があります。</p>
<h2 id="設置場所">設置場所</h2>
<p>次に、<code>.golangci.yml</code>をどこに置くのかという話ですが、<br>
<u>PC のルートディレクトリからプロジェクトのルートディレクトリ内のどこか</u> であればOKです。</p>
<p>例えば、$GOPATH が <code>/go</code> で、プロジェクトルートが <code>/go/src/github.com/yyh-gl/hoge-project</code> だった場合、<br>
以下のディレクトリ内を見に行ってくれます。</p>
<ul>
<li><code>./</code></li>
<li><code>/go/src/github.com/yyh-gl/hoge-project</code></li>
<li><code>/go/src/github.com/yyh-gl</code></li>
<li><code>/go/src/github.com</code></li>
<li><code>/go/src</code></li>
<li><code>/go</code></li>
<li><code>/</code></li>
</ul>
<p>上にいくほど優先順位が高いです。（PCのルートディレクトリが一番低い）<br>
基本的には各プロジェクトのルートに置いておけばいいでしょう。</p>
<p>実際に読み込まれている設定ファイルは<code>-v</code>オプションで確認可能です。</p>
<pre><code class="language-zsh">$ golangci-lint run --tests -v ./...
level=info msg=&quot;[config_reader] Config search paths: [./ /go/src/github.com/yyh-gl/hoge-project /go/src/github.com/yyh-gl /go/src/github.com /go/src /go /]&quot;
level=info msg=&quot;[config_reader] Used config file .golangci.yml&quot; ← ここ

&lt;省略&gt;
</code></pre>
<br>
<p>では、実際に設定ファイルを変更し、<br>
さきほどの golint が検知していたコメント記述形式に関するエラーを、<br>
GolangCI-Lint でも検知できるようにしてみます。</p>
<h1 id="デフォルトで無視されるルールを無視する">&ldquo;デフォルトで無視されるルール&quot;を無視する</h1>
<p>golint が検知していたコメント記述形式に関するエラーを検知するには、<br>
&ldquo;デフォルトで無視されるルール&quot;を無視する必要があります。</p>
<p>設定自体はすごく簡単です。</p>
<pre><code class="language-yaml"># .golangci.yml

issues:
  exclude-use-default: false
</code></pre>
<p>以上です。</p>
<p>テストしてみましょう。</p>
<pre><code class="language-zsh">$ docker-compose exec -T app golangci-lint run --tests ./...
handler/rest/blog.go:82:27: Error return value of `(*encoding/json.Encoder).Encode` is not checked (errcheck)
	json.NewEncoder(w).Encode(res)
	                         ^
domain/model/task/task.go:7:1: comment on exported type Task should be of the form &quot;Task ...&quot; (with optional leading article) (golint)
// Taskhoge : タスクを表現するドメインモデル
^
domain/model/task/task.go:9:2: structtag: struct field tag `json:&quot;title&quot;,&quot;hoge&quot;` not compatible with reflect.StructTag.Get: key:&quot;value&quot; pairs not separated by spaces (govet)
	Title         string      `json:&quot;title&quot;,&quot;hoge&quot;`
	^
</code></pre>
<p>golint のエラーが増えましたね👍</p>
<p>このように簡単に GolangCI-Lint の設定を変更することができます。</p>
<h1 id="細かな設定も可能">細かな設定も可能</h1>
<p>さきほど少し触れましたが、各 Linter ごとの細かな設定も可能です。</p>
<h2 id="linters-settings">linters-settings</h2>
<p>各 Linter ごとの設定は <code>linters-settings</code> によって定義できます。</p>
<pre><code class="language-yaml"># .golangci.yml

linters-settings:
  errcheck:
    check-type-assertions: false
    check-blank: false
    ignore: fmt:.*,io/ioutil:^Read.*
    exclude: /path/to/file.txt
  govet:
    check-shadowing: true
    settings:
      printf:
        funcs:
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf
    enable:
      - atomicalign
    enable-all: false
    disable:
      - shadow
    disable-all: false
  golint:
    min-confidence: 0.8
</code></pre>
<p>例えば、golint の min-confidence は Lint の厳しさを設定するもので、<br>
数値が低いほど厳しいルールが適用されます。<br>
（ちなみに、デフォルトは 0.8で、1.1 にすると何も検知しなくなります😇）</p>
<h2 id="他の設定たち">他の設定たち</h2>
<p>GolangCI-Lint で使用できる設定を探したい場合は、<br>
設定ファイルのサンプルを参考にすればOKです。</p>
<p>このファイルの中に利用可能な全ての設定とデフォルト値が記載されています👍 最高ですね</p>
<ul>
<li><a href="https://github.com/golangci/golangci-lint/blob/master/.golangci.example.yml" target="_blank" rel="noopener noreferrer">設定ファイルのサンプル</a>
</li>
</ul>
<h1 id="まとめ">まとめ</h1>
<p>GolangCI-Lint により、様々な Linter が一元管理でき、<br>
Linter の導入・管理コストがとても低くなったと感じています。<br>
また、いろいろな Linter を気軽に試せるようになりました。</p>
<p>ちょっとしたコーディング規約違反を毎回人力で指摘している方や<br>
コンパイラでは発見できないエラーを潰すのに疲弊している方などは、<br>
ぜひ、GolangCI-Lint の導入を検討しみてはいかかでしょうか？</p>
<p>最高の DX です🎁</p>
<br>
<p>DMM Advent Calendar 2019、明日は <a href="https://qiita.com/mimickn" target="_blank" rel="noopener noreferrer">mimickn</a>
 さんです！</p>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/advent-calendar" term="advent-calendar" label="Advent Calendar"/><category scheme="https://yyh-gl.github.io/tech-blog/categories/%E3%83%86%E3%82%B9%E3%83%88" term="%E3%83%86%E3%82%B9%E3%83%88" label="テスト"/><category scheme="https://yyh-gl.github.io/tech-blog/categories/lint" term="lint" label="Lint"/><category scheme="https://yyh-gl.github.io/tech-blog/categories/go" term="go" label="Go"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">【Go+VCR】外部APIとの通信を保存してテストに使用する話</title><link href="https://yyh-gl.github.io/tech-blog/blog/golang-vcr/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/react_typescript_sample/?utm_source=atom_feed" rel="related" type="text/html" title="【React+TypeScript】TypeScript入門"/><link href="https://yyh-gl.github.io/tech-blog/blog/denago_3/?utm_source=atom_feed" rel="related" type="text/html" title="【DeNA.go #3】Go活用事例やパフォーマンスチューニングの話聞いてきた"/><link href="https://yyh-gl.github.io/tech-blog/blog/github-actions-private-action/?utm_source=atom_feed" rel="related" type="text/html" title="【GitHub Actions】プライベートアクションを使ってみた"/><link href="https://yyh-gl.github.io/tech-blog/blog/mercarigo_11/?utm_source=atom_feed" rel="related" type="text/html" title="【mercari.go #11】エラーハンドリング ＋ singleflight ＋ ISUCON ベンチマーカー"/><link href="https://yyh-gl.github.io/tech-blog/blog/react_memo/?utm_source=atom_feed" rel="related" type="text/html" title="React.memo について調べたのでメモを残しておく"/><id>https://yyh-gl.github.io/tech-blog/blog/golang-vcr/</id><author><name>yyh-gl</name></author><published>2019-12-08T00:00:00+00:00</published><updated>2019-12-08T00:00:00+00:00</updated><content type="html"><![CDATA[<blockquote>Go3 Advent Calendar 2019 8日目</blockquote><h1 id="go3-advent-calendar-2019">Go3 Advent Calendar 2019</h1>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/12/react_typescript_sample/qiita_advent_calendar_2019.png" width="700">
<p>本記事は <a href="https://qiita.com/advent-calendar/2019/go3" target="_blank" rel="noopener noreferrer">Go3 Advent Calendar 2019</a>
 の 8日目 の記事です。</p>
<p>ではでは、早速本題に入っていきます。</p>
<h1 id="モック使ってますか">モック使ってますか？</h1>
<p>みなさんモックコードは書いていますか？</p>
<p>テストコードを書いているなら、ほぼ必ず登場するあのモックです。<br>
DB処理や関数のモックなどいろいろありますよね。</p>
<p>そんなモックコードですが、作ったり管理するのめんどくさいなぁとか思ってないですか？<br>
モックだからといって雑なコードになっていませんか？</p>
<br>
<p>今回は、外部API通信のモック化にフォーカスし、<br>
モックコードの作成・管理コストを軽減する <br>
<u>VCR ライブラリ</u> を紹介します。</p>
<h1 id="vcr-ライブラリ-とは">VCR ライブラリ とは？</h1>
<p>VCR（Video Cassette Recorder）とは、<u>通信を保存し、再生するライブラリ</u>です。<br></p>
<p>つまり、APIリクエストの初回通信の内容を保存し、<br>
次回以降その保存内容（レスポンス）を使いまわしてくれるというものです。</p>
<p>言い換えれば、外部APIのモックを自動生成してくれるということですね！</p>
<h2 id="vcr-ライブラリ-in-go-world">VCR ライブラリ in Go World</h2>
<p>Go用のVCRライブラリは<a href="https://github.com/search?l=Go&amp;q=vcr&amp;type=Repositories" target="_blank" rel="noopener noreferrer">いろいろあります</a>
。<br>
スター数が多いのは以下のものです。</p>
<ul>
<li><a href="https://github.com/dnaeon/go-vcr" target="_blank" rel="noopener noreferrer">go-vcr</a>
</li>
<li><a href="https://github.com/ComboStrikeHQ/vcr-go" target="_blank" rel="noopener noreferrer">vcr-go</a>
</li>
<li><a href="https://github.com/seborama/govcr" target="_blank" rel="noopener noreferrer">govcr</a>
</li>
<li><a href="https://github.com/googleapis/google-cloud-go/tree/master/rpcreplay" target="_blank" rel="noopener noreferrer">rpcreplay</a>
</li>
</ul>
<p>go-vcr および vcr-go，govcr の開発は盛んではないようです。</p>
<p>rpcreplay は <a href="https://github.com/googleapis/google-cloud-go" target="_blank" rel="noopener noreferrer">google-cloud-go</a>
に包含されるパッケージであり、安心して使えそうです。<br>
ただし、gRPC 用なので、その点は注意が必要です。<br>
<a href="https://godoc.org/cloud.google.com/go/rpcreplay" target="_blank" rel="noopener noreferrer">GoDocはこちら</a>
です。</p>
<br>
<p>今回は REST API を使って説明していくので、go-vcr を使用します。<br></p>
<p>go-vcr は、vcr-go と govcr よりスター数が多いです。<br>
Ruby 製の <a href="https://github.com/vcr/vcr" target="_blank" rel="noopener noreferrer">vcr</a>
 というライブラリがもとになっているようです。</p>
<h1 id="サンプルを見ていく">サンプルを見ていく</h1>
<p>では、コードを交えて紹介していきたいと思います。<br>
今回は下記のような簡単なサンプルを用意しました。</p>
<p>（最終的なサンプルコードは<a href="https://github.com/yyh-gl/go-vcr-sample" target="_blank" rel="noopener noreferrer">こちら</a>
にあります。）</p>
<p>Qiitaのユーザ情報取得APIを呼び出し、<br>
レスポンス内容（ID と Location のみ）を表示するだけの簡単なプログラムです。</p>
<pre><code class="language-go">// /main.go

package main

import (
	&quot;fmt&quot;

	&quot;github.com/yyh-gl/go-vcr-sample/qiita&quot;
)

func main() {
	user := qiita.FetchUser(&quot;yyh-gl&quot;)
	fmt.Println(&quot;============ RESULT ============&quot;)
	fmt.Printf(&quot;%+v\n&quot;, user)
	fmt.Println(&quot;============ RESULT ============&quot;)
}
</code></pre>
<pre><code class="language-go">// /qiita/qiita.go

package qiita

import (
	&quot;encoding/json&quot;
	&quot;io/ioutil&quot;
	&quot;net/http&quot;
)

type User struct {
	ID       string
	Location string
}

func FetchUser(id string) (user *User) {
	req, _ := http.NewRequest(&quot;GET&quot;, &quot;https://qiita.com/api/v2/users/&quot;+id, nil)

	client := new(http.Client)
	resp, _ := client.Do(req)
	defer resp.Body.Close()

	body, _ := ioutil.ReadAll(resp.Body)
	_ = json.Unmarshal(body, &amp;user)
	return user
}
</code></pre>
<p>実行してみると、、、</p>
<pre><code class="language-zsh">$ go run main.go
============ RESULT ============
&amp;{ID:yyh-gl Location:Tokyo, Japan}
============ RESULT ============
</code></pre>
<p>ちゃんと ID と Location が表示できていますね。</p>
<h1 id="テストしたい">テストしたい</h1>
<p>今回のサンプルは簡単なコードですがテストを書くことにします。</p>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/12/golang-vcr/test-lion.jpeg" width="600">
<p>・<br>
・<br>
・<br></p>
<pre><code class="language-go">// /qiita/qiita_test.go

package qiita_test

import (
	&quot;testing&quot;

	&quot;github.com/stretchr/testify/assert&quot;
	&quot;github.com/yyh-gl/go-vcr-sample/qiita&quot;
)

func Test_FetchUser(t *testing.T) {
	tests := []struct {
		testCase     string
		id           string
		wantLocation string
	}{
		{
			testCase:     &quot;Qiitaからyyh-glのユーザ情報を取得できていること&quot;,
			id:           &quot;yyh-gl&quot;,
			wantLocation: &quot;Tokyo, Japan&quot;,
		},
	}

	for _, tt := range tests {
		t.Run(tt.testCase, func(t *testing.T) {
			user := qiita.FetchUser(tt.id)
			assert.Equal(t, tt.wantLocation, user.Location)
		})
	}
}
</code></pre>
<p>書きました。</p>
<pre><code class="language-zsh">$ go test ./...
?   	github.com/yyh-gl/go-vcr-sample	[no test files]
ok  	github.com/yyh-gl/go-vcr-sample/qiita	0.313s
</code></pre>
<p>ちゃんとテストが通りますね。</p>
<p>しかし、このままではテストのたびに <br>
Qiita API にリクエストが飛んでしまうので良くないですね。</p>
<p>ここで、本日の主役 go-vcr を導入していきましょう。</p>
<h1 id="go-vcr-のセットアップ">go-vcr のセットアップ</h1>
<p>VCR ライブラリは通信内容を保存します。<br>
つまり、通信を傍受する必要があります。</p>
<p>go-vcr では、http.Client の Transport を go-vcr で用意されたものに差し替えることで、<br>
通信の傍受を可能にします。</p>
<p>したがって、まずは独自の http.Client を差し込めるように、<br>
サンプルのコードを修正していきます。</p>
<h2 id="qiita-api-用の-http-クライアントを作る">Qiita API 用の HTTP クライアントを作る</h2>
<p>まず、<code>qiita.go</code> に HTTP クライアント生成関数を作ります。</p>
<pre><code class="language-go">// /qiita/qiita.go

package qiita

import (
	&quot;encoding/json&quot;
	&quot;io/ioutil&quot;
	&quot;net/http&quot;
)

// ここ
type Client struct {
	*http.Client
}

// ここ
func NewClient(c *http.Client) Client {
	return Client{c}
}

type User struct {
	ID       string
	Location string
}

// ここ
func (c Client) FetchUser(id string) (user *User) {
	req, _ := http.NewRequest(&quot;GET&quot;, &quot;https://qiita.com/api/v2/users/&quot;+id, nil)

	resp, _ := c.Do(req) // ここ
	defer resp.Body.Close()

	body, _ := ioutil.ReadAll(resp.Body)
	_ = json.Unmarshal(body, &amp;user)
	return user
}
</code></pre>
<br>
<p><code>main.go</code> と <code>qiita_test.go</code> も直します。</p>
<pre><code class="language-go">// /main.go

package main

import (
	&quot;fmt&quot;
	&quot;net/http&quot;

	&quot;github.com/yyh-gl/go-vcr-sample/qiita&quot;
)

func main() {
	// ここ
	qiitaClient := qiita.NewClient(http.DefaultClient)
	user := qiitaClient.FetchUser(&quot;yyh-gl&quot;)
	fmt.Println(&quot;============ RESULT ============&quot;)
	fmt.Printf(&quot;%+v\n&quot;, user)
	fmt.Println(&quot;============ RESULT ============&quot;)
}
</code></pre>
<pre><code class="language-go">// /qiita/qiita_test.go

package qiita_test

import (
	&quot;net/http&quot;
	&quot;testing&quot;

	&quot;github.com/stretchr/testify/assert&quot;
	&quot;github.com/yyh-gl/go-vcr-sample/qiita&quot;
)

func Test_FetchUser(t *testing.T) {
	tests := []struct {
		testCase     string
		id           string
		wantLocation string
	}{
		{
			testCase:     &quot;Qiitaからyyh-glのユーザ情報を取得できていること&quot;,
			id:           &quot;yyh-gl&quot;,
			wantLocation: &quot;Tokyo, Japan&quot;,
		},
	}

    // ここ
	qiitaClient := qiita.NewClient(http.DefaultClient)

	for _, tt := range tests {
		t.Run(tt.testCase, func(t *testing.T) {
			user := qiitaClient.FetchUser(tt.id)
			assert.Equal(t, tt.wantLocation, user.Location)
		})
	}
}
</code></pre>
<p>この状態でテストを実行すると、、、</p>
<pre><code class="language-zsh">$ go test ./...
?   	github.com/yyh-gl/go-vcr-sample	[no test files]
ok  	github.com/yyh-gl/go-vcr-sample/qiita	0.293s
</code></pre>
<p>ちゃんと通りますね。</p>
<p>さて、これで <code>NewClient()</code> に渡す引数（http.Client）しだいで、<br>
使用する HTTP クライアント変更できるようになりました。</p>
<h2 id="go-vcr-導入">go-vcr 導入</h2>
<p>ここから go-vcr を導入して、外部APIとの通信を保存・再生していくのですが、<br>
<u>めちゃくちゃ簡単</u>です。</p>
<p>今回はテストにおいて、外部APIとの通信部分をモック化したいので、<br>
<code>qiita_test.go</code> を直していきます。</p>
<pre><code class="language-go">// /qiita_test.go

package qiita_test

import (
	&quot;net/http&quot;
	&quot;testing&quot;

	&quot;github.com/dnaeon/go-vcr/recorder&quot;
	&quot;github.com/stretchr/testify/assert&quot;
	&quot;github.com/yyh-gl/go-vcr-sample/qiita&quot;
)

func Test_FetchUser(t *testing.T) {
	tests := []struct {
		testCase     string
		id           string
		wantLocation string
	}{
		{
			testCase:     &quot;Qiitaからyyh-glのユーザ情報を取得できていること&quot;,
			id:           &quot;yyh-gl&quot;,
			wantLocation: &quot;Tokyo, Japan&quot;,
		},
	}

    // ここ
	// go-vcr のレコーダを生成
	// 通信内容は ../fixtures/qiita に保存される
	r, _ := recorder.New(&quot;../fixtures/qiita&quot;)
	defer r.Stop()

	customHTTPClient := &amp;http.Client{
		Transport: r, // ここ 重要！
	}
	qiitaClient := qiita.NewClient(customHTTPClient)

	for _, tt := range tests {
		t.Run(tt.testCase, func(t *testing.T) {
			user := qiitaClient.FetchUser(tt.id)
			assert.Equal(t, tt.wantLocation, user.Location)
		})
	}
}
</code></pre>
<p>以上で終了です。</p>
<p>この状態で <code>$ go test ./...</code> してみると、</p>
<pre><code class="language-zsh">$ go test ./...
?   	github.com/yyh-gl/go-vcr-sample	[no test files]
ok  	github.com/yyh-gl/go-vcr-sample/qiita	0.472s
</code></pre>
<p>普通にテストが通りますね。</p>
<p>では、この状態で、ネットワーク（WiFi）を切って、再度テストしてみます。</p>
<pre><code class="language-zsh">$ go test ./...
?   	github.com/yyh-gl/go-vcr-sample	[no test files]
ok  	github.com/yyh-gl/go-vcr-sample/qiita	0.014s
</code></pre>
<p>成功しました。<br>
&ldquo;保存された通信内容&quot;を見ているので、ネットワークに繋がっていなくても、テストが通ります。<br>
（&ldquo;保存された通信内容&quot;がどこにあるかは後で説明します）<br>
つまり、<u>モック化できてしまっているのです！</u></p>
<p>しかも、実行時間が短くなっていますね！これはでかい。</p>
<p>では、&ldquo;保存された通信内容&quot;を消して、再度テストしてみましょう。</p>
<pre><code class="language-zsh">$ go test ./...
?   	github.com/yyh-gl/go-vcr-sample	[no test files]
panic: runtime error: invalid memory address or nil pointer dereference [recovered]
	panic: runtime error: invalid memory address or nil pointer dereference
[signal SIGSEGV: segmentation violation code=0x1 addr=0x40 pc=0x12aef8d]

goroutine 21 [running]:
testing.tRunner.func1(0xc0000fe200)
	/Users/yyh-gl/.anyenv/envs/goenv/versions/1.13.4/src/testing/testing.go:874 +0x3a3
panic(0x1343900, 0x1642f80)
	/Users/yyh-gl/.anyenv/envs/goenv/versions/1.13.4/src/runtime/panic.go:679 +0x1b2
github.com/yyh-gl/go-vcr-sample/qiita.Client.FetchUser(0xc00008b2c0, 0x13a96ac, 0x6, 0x104fe28)
	/Users/yyh-gl/workspaces/Go/src/github.com/yyh-gl/go-vcr-sample/qiita/qiita.go:26 +0x10d
github.com/yyh-gl/go-vcr-sample/qiita_test.Test_FetchUser.func1(0xc0000fe200)
	/Users/yyh-gl/workspaces/Go/src/github.com/yyh-gl/go-vcr-sample/qiita/qiita_test.go:37 +0x49
testing.tRunner(0xc0000fe200, 0xc0000a0540)
	/Users/yyh-gl/.anyenv/envs/goenv/versions/1.13.4/src/testing/testing.go:909 +0xc9
created by testing.(*T).Run
	/Users/yyh-gl/.anyenv/envs/goenv/versions/1.13.4/src/testing/testing.go:960 +0x350
FAIL	github.com/yyh-gl/go-vcr-sample/qiita	0.020s
FAIL
</code></pre>
<p>エラーになりましたね。<br>
ちゃんとエラーハンドリングしていないので、nil参照のエラーになっていますが、<br>
これはネットワークに繋がっていない（＋&quot;保存された通信内容&quot;がない）ために、<br>
外部APIへのリクエストが失敗し、発生したエラーです。</p>
<h1 id="保存された通信内容">&ldquo;保存された通信内容&rdquo;</h1>
<p>では、さきほど go test を初めて実行したときに何が起こっていたのかを説明します。</p>
<p>プロジェクト内を見てみると、</p>
<pre><code class="language-zsh">$ tree go-vcr-sample
go-vcr-sample
├── fixtures
│   └── qiita.yaml
├── go.mod
├── go.sum
├── main.go
└── qiita
    ├── qiita.go
    └── qiita_test.go
</code></pre>
<p><code>fixtures</code> ディレクトリができています。</p>
<p>中身を見てみると、</p>
<pre><code class="language-zsh">$ ls fixtures
qiita.yaml
</code></pre>
<p><code>qiita.yaml</code> ができています。<br></p>
<pre><code class="language-yaml"># /fixtures/qiita.yaml

---
version: 1
interactions:
- request:
    body: &quot;&quot;
    form: {}
    headers: {}
    url: https://qiita.com/api/v2/users/yyh-gl
    method: GET
  response:
    body: &quot;{\&quot;description\&quot;:\&quot;東京でエンジニアしてます／CLI名刺 $ npx yyh-gl／メインは個人ブログです\U0001F4DD\&quot;,\&quot;facebook_id\&quot;:\&quot;\&quot;,\&quot;followees_count\&quot;:19,\&quot;followers_count\&quot;:18,\&quot;github_login_name\&quot;:\&quot;yyh-gl\&quot;,\&quot;id\&quot;:\&quot;yyh-gl\&quot;,\&quot;items_count\&quot;:11,\&quot;linkedin_id\&quot;:\&quot;\&quot;,\&quot;location\&quot;:\&quot;Tokyo,
      Japan\&quot;,\&quot;name\&quot;:\&quot;\&quot;,\&quot;organization\&quot;:\&quot;\&quot;,\&quot;permanent_id\&quot;:119088,\&quot;profile_image_url\&quot;:\&quot;https://qiita-image-store.s3.amazonaws.com/0/119088/profile-images/1535528464\&quot;,\&quot;team_only\&quot;:false,\&quot;twitter_screen_name\&quot;:null,\&quot;website_url\&quot;:\&quot;https://yyh-gl.github.io/tech-blog/\&quot;}&quot;
    headers:
      Cache-Control:
      - max-age=0, private, must-revalidate
      Content-Type:
      - application/json; charset=utf-8
      Date:
      - Sat, 07 Dec 2019 07:27:05 GMT
      Etag:
      - W/&quot;a6adaa36bf27d2045a25659539dcdae5&quot;
      Rate-Limit:
      - &quot;60&quot;
      Rate-Remaining:
      - &quot;56&quot;
      Rate-Reset:
      - &quot;1575706459&quot;
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Server:
      - nginx
      Strict-Transport-Security:
      - max-age=2592000
      Vary:
      - Origin
      X-Content-Type-Options:
      - nosniff
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - SAMEORIGIN
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Request-Id:
      - f0ca74f0-4aae-4d0f-b6f9-ec08b0407b56
      X-Runtime:
      - &quot;0.082646&quot;
      X-Xss-Protection:
      - 1; mode=block
    status: 200 OK
    code: 200
    duration: &quot;&quot;
</code></pre>
<p>リクエストおよびレスポンスの内容が全て保存されています。</p>
<br>
<p>このように、go-vcr では、通信内容を傍受して、yaml 形式で保存します。<br>
（内容自体も、Web エンジニアならよく見かける単語ばかりなので読みやすいですね）</p>
<p>そして、この yaml ファイルがあるときは、外部APIに対してリクエストを飛ばさずに、<br>
yaml ファイルの内容からレスポンスを返します。</p>
<h1 id="リクエスト済みかどうかの判断方法">リクエスト済みかどうかの判断方法</h1>
<p>ここで、go-vcr がどのようにして、<br>
リクエストを送ったことがあるかどうかを判定しているのか説明していきます。</p>
<p>答えは<a href="https://github.com/dnaeon/go-vcr/blob/9384691f0462689770c3e930cd8aff05c7075a5b/cassette/cassette.go#L103-L107" target="_blank" rel="noopener noreferrer">こちら</a>
のコードにあります。</p>
<pre><code class="language-go">// DefaultMatcher is used when a custom matcher is not defined
// and compares only the method and URL.
func DefaultMatcher(r *http.Request, i Request) bool {
	return r.Method == i.Method &amp;&amp; r.URL.String() == i.URL
}
</code></pre>
<blockquote>
<p>compares only the method and URL.</p>
</blockquote>
<p>デフォルトだと、HTTP メソッドとリクエストURL しか見てないんですね。</p>
<p>しかし、この判定処理において、<br>
HTTP メソッドとリクエストURL以外も見るようにしたかったり、<br>
逆にこのURLへのリクエストだけは保存したくないといったニーズもあると思います。<br>
そこで 登場するのが <u>Custom Request Matching</u> です。</p>
<h2 id="custom-request-matching">Custom Request Matching</h2>
<p><a href="https://github.com/dnaeon/go-vcr#custom-request-matching" target="_blank" rel="noopener noreferrer">README.md</a>
 にもあるとおり、<br>
Matcher を作ってあげるだけで、簡単にオリジナルの判定処理を実装可能です。</p>
<p>さきほどの README.md にあるサンプルを拝借して、<br>
僕のコード書き換えてみると以下のとおりになります。</p>
<pre><code class="language-go">// /qiita/qiita_test.go

package qiita_test

import (
	&quot;bytes&quot;
	&quot;io/ioutil&quot;
	&quot;net/http&quot;
	&quot;testing&quot;

	&quot;github.com/dnaeon/go-vcr/cassette&quot;

	&quot;github.com/dnaeon/go-vcr/recorder&quot;
	&quot;github.com/stretchr/testify/assert&quot;
	&quot;github.com/yyh-gl/go-vcr-sample/qiita&quot;
)

func Test_FetchUser(t *testing.T) {
	tests := []struct {
		testCase     string
		id           string
		wantLocation string
	}{
		{
			testCase:     &quot;Qiitaからyyh-glのユーザ情報を取得できていること&quot;,
			id:           &quot;yyh-gl&quot;,
			wantLocation: &quot;Tokyo, Japan&quot;,
		},
	}

	// go-vcr のレコーダを生成
	// 通信内容は ../fixtures/qiita に保存される
	r, _ := recorder.New(&quot;../fixtures/qiita&quot;)
	defer r.Stop()

    // ここ
	r.SetMatcher(func(r *http.Request, i cassette.Request) bool {
		if r.Body == nil {
			return cassette.DefaultMatcher(r, i)
		}
		var b bytes.Buffer
		if _, err := b.ReadFrom(r.Body); err != nil {
			return false
		}
		r.Body = ioutil.NopCloser(&amp;b)
		return cassette.DefaultMatcher(r, i) &amp;&amp; (b.String() == &quot;&quot; || b.String() == i.Body)
	})

	customHTTPClient := &amp;http.Client{
		Transport: r,
	}
	qiitaClient := qiita.NewClient(customHTTPClient)

	for _, tt := range tests {
		t.Run(tt.testCase, func(t *testing.T) {
			user := qiitaClient.FetchUser(tt.id)
			assert.Equal(t, tt.wantLocation, user.Location)
		})
	}
}
</code></pre>
<p><code>SetMatcher()</code> 内の処理によって、判定ロジックを変更します。<br>
この例だと、HTTP メソッドとリクエストURL に加えて、リクエストBody の内容も見るようになっています。</p>
<p>このように、<code>SetMatcher()</code> を定義してやるだけです。<br>
後はいつもどおり、http.Client の Transport に渡してやるだけなので簡単ですね👍</p>
<h1 id="保存内容を修正する必要が出たときはどうする">保存内容を修正する必要が出たときはどうする？</h1>
<p>yaml ファイルを消すだけです。</p>
<p>例えば、外部APIの仕様が変わり、モックを更新する必要が出てきた場合は、<br>
yaml ファイルを消してやるだけで、次のAPIリクエストの内容を保存 =&gt; つまり、モックを更新できます。</p>
<p>もちろん yaml ファイルを直接変更することもできます。</p>
<p>モックの管理が楽になりますね👍</p>
<h1 id="まとめ">まとめ</h1>
<p>go-vcr を利用することで、外部API通信のモック化および管理が簡単にできるようになりました。<br>
しかも、モックの内容は、実際にリクエストして得た内容なので、<br>
仕様が漏れることもないでしょう。</p>
<p>また、今回は説明しませんでしたが、<br>
go-vcr には <a href="https://github.com/dnaeon/go-vcr#protecting-sensitive-data" target="_blank" rel="noopener noreferrer">Protecting Sensitive Data</a>
 という機能もあり、<br>
指定したデータを保存しないようにするといったこともできます。</p>
<p>カスタマイズ性が高く、とてもおすすめのライブラリです。</p>
<p>もしモックの作成・管理で悩んでいる方がおられたら、<br>
ぜひ一度検討してみてください！</p>
<br>
<p>Go3 Advent Calendar 2019、明日は <a href="https://qiita.com/EbiEbiEvidence" target="_blank" rel="noopener noreferrer">EbiEbiEvidence</a>
 さんです🛫</p>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/go" term="go" label="Go"/><category scheme="https://yyh-gl.github.io/tech-blog/categories/%E3%83%86%E3%82%B9%E3%83%88" term="%E3%83%86%E3%82%B9%E3%83%88" label="テスト"/><category scheme="https://yyh-gl.github.io/tech-blog/categories/advent-calendar" term="advent-calendar" label="Advent Calendar"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">【React+TypeScript】TypeScript入門</title><link href="https://yyh-gl.github.io/tech-blog/blog/react_typescript_sample/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/denago_3/?utm_source=atom_feed" rel="related" type="text/html" title="【DeNA.go #3】Go活用事例やパフォーマンスチューニングの話聞いてきた"/><link href="https://yyh-gl.github.io/tech-blog/blog/github-actions-private-action/?utm_source=atom_feed" rel="related" type="text/html" title="【GitHub Actions】プライベートアクションを使ってみた"/><link href="https://yyh-gl.github.io/tech-blog/blog/mercarigo_11/?utm_source=atom_feed" rel="related" type="text/html" title="【mercari.go #11】エラーハンドリング ＋ singleflight ＋ ISUCON ベンチマーカー"/><link href="https://yyh-gl.github.io/tech-blog/blog/react_memo/?utm_source=atom_feed" rel="related" type="text/html" title="React.memo について調べたのでメモを残しておく"/><link href="https://yyh-gl.github.io/tech-blog/blog/mercari_meetup_for_backend_engineers_1/?utm_source=atom_feed" rel="related" type="text/html" title="【Backend Engineer’s meetup】メルカリ社主催 バックエンダーのための Meetup イベント行ってきた"/><id>https://yyh-gl.github.io/tech-blog/blog/react_typescript_sample/</id><author><name>yyh-gl</name></author><published>2019-12-02T00:00:00+00:00</published><updated>2019-12-02T00:00:00+00:00</updated><content type="html"><![CDATA[<blockquote>TypeScript Advent Calendar 2019 2日目</blockquote><h1 id="typescript-advent-calendar-2019">TypeScript Advent Calendar 2019</h1>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/12/react_typescript_sample/qiita_advent_calendar_2019.png" width="700">
<p>本記事は <a href="https://qiita.com/advent-calendar/2019/typescript" target="_blank" rel="noopener noreferrer">TypeScript Advent Calendar 2019</a>
 の 2 日目の記事です。</p>
<p>内容としては、TypeScript 初級者のための TypeScript 入門です。</p>
<p>基礎的な内容から入り、<br>
最終的には、企業や個人の技術ブログを参考に、<br>
React の実プロジェクトにおいて、<br>
どのように TypeScript が使われているのか紹介できればと思います。<br>
（APIリクエスト周りのTypeScript活用事例を紹介）</p>
<p>今日の記事を読んで TypeScript に入門し、<br>
今後の TypeScript Advent Calendar をお楽しみいただけると幸いです！</p>
<h1 id="基礎編">基礎編</h1>
<h2 id="typescript-とは">TypeScript とは</h2>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/12/react_typescript_sample/ts.png" width="200">
<p><a href="https://www.typescriptlang.org/index.html" target="_blank" rel="noopener noreferrer">TypeScript</a>
 は Microsoft 社によって開発され、
現在は <a href="https://github.com/microsoft/TypeScript" target="_blank" rel="noopener noreferrer">OSS</a>
 として開発が進められています。</p>
<p>「TypeScript とは何か」を簡単に説明すると、<br>
<u>JavaScript に対して、省略も可能な静的型付けとクラスベースオブジェクト指向を加えたスーパーセット</u> です。</p>
<p><a href="https://www.typescriptlang.org/" target="_blank" rel="noopener noreferrer">公式サイト</a>
 はこちらで、<br>
2019年12月2日現在、最新版は 3.7.2 となっています。</p>
<p>では、実際にコードを交えながら基礎的な部分を説明していきます。<br>
ただし、実践編で使用する内容に絞って説明していきますので、<br>
その点はご了承ください🙇‍<br>
（足りない情報は<a href="https://www.typescriptlang.org/docs/home.html" target="_blank" rel="noopener noreferrer">公式ドキュメント</a>
を参考にしてください）</p>
<h2 id="型">型</h2>
<p>では、早速、TypeScript の型に触れていきましょう。<br>
TypeScript で使用できる基本的な型として以下のものがあります。</p>
<ul>
<li>Boolean</li>
<li>Number</li>
<li>String</li>
<li>Array</li>
<li>Tuple</li>
<li>Enum</li>
<li>Any</li>
<li>Void</li>
<li>Null and Undefined</li>
<li>Never</li>
<li>Object</li>
</ul>
<p>だいたいの型は他言語でも用意されているので、<br>
説明がなくても理解できると思います。</p>
<p>Tuple や Never といった、他言語では見慣れない型もあると思いますが、<br>
他サイトでたくさん説明されているので割愛します。</p>
<p>【参考サイト】</p>
<ul>
<li><a href="https://www.typescriptlang.org/docs/handbook/basic-types.html" target="_blank" rel="noopener noreferrer">公式サイト</a>
</li>
<li><a href="https://qiita.com/uhyo/items/e2fdef2d3236b9bfe74a" target="_blank" rel="noopener noreferrer">Qiita記事</a>
</li>
</ul>
<p>型の宣言方法は以下のとおりです。</p>
<pre><code class="language-typescript">function greeter(person: string) {
    return &quot;Hello, &quot; + person;
}

const user: string = &quot;Jane User&quot;;

document.body.textContent = greeter(user);
</code></pre>
<p>1行目にて、greeter() に person という string 型の引数を渡すことが明示されています。<br>
また、変数 <code>user</code> は string 型であることが明記されています。</p>
<p>仮に <code>greeter()</code> に string 型以外の値を渡すと、<br>
コンパイル時 or IDE 上にエラーが吐かれるので、ミスに気づくことが可能です。</p>
<h2 id="インターフェース">インターフェース</h2>
<p>次にインターフェースについて見ていきます。</p>
<p>インターフェースは本来、JavaScript に無い機能ですが、<br>
TypeScript によってその機能が追加されています。</p>
<p>インターフェースは、クラスやオブジェクトの規格を定義するのに使用します。<br>
クラスだけでなく、オブジェクトの規格を定義できるため、<br>
API のレスポンスとして返ってくるデータ（＝オブジェクト）の規格を定義することが可能です。</p>
<p>有用性の高い機能のひとつではないでしょうか。</p>
<p>定義方法は以下のとおりです。</p>
<pre><code class="language-typescript">interface LabeledValue {
    label: string;
}

function printLabel(labeledObj: LabeledValue) {
    console.log(labeledObj.label);
}

let myObj = {size: 10, label: &quot;Size 10 Object&quot;};
printLabel(myObj);
</code></pre>
<p>上記コードは、<code>LabeledValue</code> というインターフェースと、<br>
そのインターフェースを満たす <code>myObj</code> というオブジェクトを定義しています。<br>
加えて、<code>printLabel()</code> という <code>LabeledValue</code> インターフェースを受け取る関数が用意されています。</p>
<p><code>myObj</code> は <code>label</code> を持っているので、<code>LabeledValue</code> インターフェースを満たしており、<br>
<code>printLabel()</code> に引数として渡すことが可能です。</p>
<p>クラスの規格定義としてのインターフェースは以下のとおりです。<br>
こちらは他言語でよく見る形なので詳細な説明は省略します。</p>
<pre><code class="language-typescript">interface ClockInterface {
    currentTime: Date;
    setTime(d: Date): void;
}

class Clock implements ClockInterface {
    currentTime: Date = new Date();
    setTime(d: Date) {
        this.currentTime = d;
    }
    constructor(h: number, m: number) { }
}
</code></pre>
<p>なお、クラスという概念は JavaScript（ES6） に組み込まれているクラスの機能を<br>
ES6 以前の JavaScript でも使えるようにしたものです。</p>
<h2 id="入門時の落とし穴">入門時の落とし穴</h2>
<p>僕が TypeScript を初めて触ったときに戸惑ったのが以下のエラーでした。</p>
<pre><code class="language-zsh">Could not find a declaration file for module 'react-router-config'. '/hoge/index.js' implicitly has an 'any' type.
  Try `npm install @types/react-router-config` if it exists or add a new declaration (.d.ts) file containing `declare module 'react-router-config';`  TS7016

    1 | import React from 'react';
  &gt; 2 | import { renderRoutes, RouteConfigComponentProps } from 'react-router-config';
      |                                                         ^
    3 | import './App.css';
    4 | 
    5 | const App: React.FC&lt;RouteConfigComponentProps&gt; = ({ route }) =&gt; {
</code></pre>
<p>このエラーが何を言っているかと言うと、<br>
「ライブラリで使用する関数や変数に関する型宣言情報がないから、どう解釈したらいいか分からん！」<br>
ってことです。</p>
<p>ライブラリは TypeScript のためではなく、JavaScript のためのものなので、<br>
インポートしたライブラリの中には、TypeScript 対応していないものがあるのは当然ですよね。</p>
<p>では、どうするかですが、<br>
<code>@types</code> を使ってやればOKです。</p>
<h2 id="types">@types</h2>
<p><code>@types</code> を使用することで、提供されている型定義ファイルを取得することができます。</p>
<p><a href="https://typescript-jp.gitbook.io/deep-dive/type-system/types" target="_blank" rel="noopener noreferrer">本サイト</a>
によると、<br>
JavaScriptライブラリの90%に対応しているんだとか。<br>
すごすぎる。。。</p>
<p>例えば、さきほどのエラーに対応する場合は、<br>
<code>npm install @types/react-router-config</code> を実行してやることで、<br>
react-router-config ライブラリの型に関する定義を取得できます。</p>
<h2 id="型定義ファイル">型定義ファイル</h2>
<p>もし型定義ファイルが提供されていない場合は、
自分で型定義ファイルを作る必要があります。
作るときは<a href="https://qiita.com/Nossa/items/726cc3e67527e896ed1e#2-%E5%9E%8B%E5%AE%9A%E7%BE%A9%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB-dts-%E3%82%92%E8%87%AA%E4%BD%9C%E3%81%99%E3%82%8B" target="_blank" rel="noopener noreferrer">本サイト</a>

が参考になると思います。</p>
<p>（<a href="https://qiita.com/Nossa/items/726cc3e67527e896ed1e#3-require-%E3%81%A7%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%82%92%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%82%80" target="_blank" rel="noopener noreferrer">こんな技</a>

もあるようですが…）</p>
<h1 id="実践編">実践編</h1>
<p>では、（かなりざっくりと）基本的なことはお話したので、<br>
実践的な内容に入っていきます。</p>
<p>今回は、React + TypeScript を使用します。</p>
<p>ソースは<a href="https://github.com/yyh-gl/react-typescript-sample" target="_blank" rel="noopener noreferrer">GitHub</a>
上にあげています。</p>
<h2 id="react--typescript-環境のセットアップ">React ＋ TypeScript 環境のセットアップ</h2>
<p>React ＋ TypeScript の開発環境は下記コマンドひとつで揃います。<br>
<code>$ npx create-react-app my-app --typescript</code></p>
<p>ここから、src配下のディレクトリ構成を少し変更していきます。<br>
今回は下記のようなディレクトリ構成を取りました。<br>
Webのフロントエンド開発においてよく見られる形ではないでしょうか？</p>
<pre><code class="language-zsh">$ tree react-typescript-sample
react-typescript-sample
├── package-lock.json
├── package.json
├── public
├── src
│   ├── App.css
│   ├── App.test.tsx
│   ├── App.tsx
│   ├── api
│   │   ├── client.ts
│   │   └── user.ts
│   ├── components
│   ├── index.css
│   ├── index.tsx
│   ├── layouts
│   ├── models
│   │   └── user.ts
│   ├── pages
│   │   └── users.tsx
│   ├── react-app-env.d.ts
│   ├── router
│   │   └── index.tsx
│   └── serviceWorker.ts
├── tsconfig.json
└── yarn.lock
</code></pre>
<p>なお、今回は説明しやすくするために、<br>
<code>components</code> および <code>layouts</code> は使用していません。</p>
<p>本来であれば、<code>pages</code> は <code>components</code> 配下のコンポーネントを組み合わせることにより表現します。<br>
<code>components</code> 配下は、Atomic Design に沿ったディレクトリ構成が取られることが多い気がします。</p>
<p>また、ページのレイアウト（ヘッダーやフッター、メインコンテンツの位置など）は、<br>
<code>layouts</code> 配下のコンポーネントによって表現します。</p>
<h2 id="api-リクエスト">API リクエスト</h2>
<p>最近のフロントエンドでは、<br>
フロントから API リクエストを行うシーンが多くあると思います。</p>
<p>そのさいに、API のレスポンスが<br>
どういったフィールドを持っているのかが定義されていれば、<br>
以下のようなメリットがあります。</p>
<ul>
<li>レスポンス内容がフロントのコードから読み取れる
<ul>
<li>存在しないパラメータにアクセスしようとするといった凡ミスを無くせる</li>
</ul>
</li>
<li>IDE による補完が効く</li>
</ul>
<p>では、実際にどうやって API のレスポンスを定義するのか見ていきます。</p>
<p>今回は、例としてユーザ情報を受け取る API を用意しました。
下記のような JSON を取得します。</p>
<pre><code class="language-json">GET https://localhost:3000/api/v1/users

[
    {
        &quot;id&quot;: 1,
        &quot;first_name&quot;: &quot;信長&quot;,
        &quot;last_name&quot;: &quot;織田&quot;
    },
    {
        &quot;id&quot;: 2,
        &quot;first_name&quot;: &quot;秀吉&quot;,
        &quot;last_name&quot;: &quot;豊臣&quot;
    },
    {
        &quot;id&quot;: 3,
        &quot;first_name&quot;: &quot;光秀&quot;,
        &quot;last_name&quot;: &quot;明智&quot;
    }
]
</code></pre>
<h2 id="1-interface-を定義">1. interface を定義</h2>
<p>まずは、ユーザ情報がどういった形式で送られてくるのか、<br>
interfaceを使って表現します。</p>
<pre><code class="language-typescript">// /src/models/user.ts

export interface User {
    id: number;
    firstName: string;
    lastName: string;
}
</code></pre>
<h2 id="2-api-クライアントを実装">2. API クライアントを実装</h2>
<p>次は API リクエストを送る Axios クライアントを作っていきます。</p>
<pre><code class="language-typescript">// /src/api/client.js

import axios, { AxiosInstance, AxiosResponse } from 'axios';
import camelCaseKeys from 'camelcase-keys';

let client: AxiosInstance;

export default client = axios.create({
    baseURL: `http://localhost:3000/api/v1`,
    headers: {
        'Content-Type': 'application/json',
    }
});

client.interceptors.response.use(
    (response: AxiosResponse): AxiosResponse =&gt; {
        const data = camelCaseKeys(response.data);
        return { ...response.data, data };
    }
);
</code></pre>
<p>ここで注目すべき点が2つあります。</p>
<p>1つ目は、Axios をインポートするさいに型情報も合わせて取得している点です。<br>
3行目にて、<code>axios</code> 以外に <code>AxiosInstance</code> と <code>AxiosResponse</code> を取得しています。</p>
<p>この <code>AxiosInstance</code> と <code>AxiosResponse</code> こそが Axios ライブラリで使用する型情報です。<br>
それぞれ 6行目 と 16行目 で使用しています。</p>
<p>2つ目は、<code>camelcase-keys</code> というライブラリを使用している点です。<br>
JavaScript のコーディング規約では、変数名にキャメルケースを使用します。<br>
しかしながら、 JSON のキー名は多くの場合でスネークケースです。</p>
<p>つまり、普通に JSON を受け取ると、<br>
<code>resposen.first_name</code> のようにしてデータを取り出します。</p>
<p>しかし、これでは JavaScript の命名規則的に気持ち悪いですね。<br>
加えて、<code>User</code> モデル（interface）は <code>firstName</code> として定義しているため、<br>
<code>first_name</code> として受け取るのはよろしくありません。</p>
<p>ここで <code>camelcase-keys</code> ライブラリの登場です。<br>
スネークケースのキー名をキャメルケースに変換するためのもので、<br>
本ライブラリを用いて、受け取った JSON データのキー名を全てをキャメルケースに変換しています。</p>
<p>TypeScript の話から少し脱線しましたが、<br>
これで User インターフェースどおりのオブジェクトを受け取ることが可能になりました。</p>
<h2 id="3-ユーザ一覧取得-api-リクエストを実装">3. ユーザ一覧取得 API リクエストを実装</h2>
<p>では、さきほど実装した Axios クライアントを使って、<br>
API サーバにユーザ情報をもらうリクエストをします。</p>
<pre><code class="language-typescript">// /src/api/user.ts

import { AxiosPromise } from 'axios';

import client from './client';
import { User } from '../models/user';

export const fetchUsers = (): AxiosPromise&lt;User[]&gt; =&gt; client.get(`/users`);
</code></pre>
<p>8行目にて、<code>User[]</code> を受け取ることを明示しています。</p>
<h2 id="4-ユーザ一覧を取得表示">4. ユーザ一覧を取得＆表示</h2>
<p>では、受け取ったユーザ情報を表示してみます。<br>
なお、冒頭で説明したとおり、<br>
簡略化のために、表示に関する全実装を <code>pages</code> コンポーネント内で行います。</p>
<pre><code class="language-typescript">// /src/pages/users.tsx

import React, { useEffect, useState } from 'react';

import { fetchUsers } from '../api/user';
import { User } from '../models/user';

const Users: React.FC = () =&gt; {
    const [userList, setUserList] = useState&lt;User[] | undefined&gt;(undefined);

    const fetchUsersReq = async () =&gt; {
        try {
            const { data } = await fetchUsers();
            return data;
        } catch (e) {
            console.log(e);
        }
    };

    useEffect(() =&gt; {
        const data = fetchUsersReq();
        data.then(users =&gt; {
            setUserList(users);
        });
    }, []);

    return (
        &lt;&gt;
            &lt;h1&gt;User List&lt;/h1&gt;
            {
                userList &amp;&amp; userList.map((user) =&gt; {
                    return (
                        &lt;p key={user.id}&gt;{`${user.lastName} ${user.firstName}`}&lt;/p&gt; &lt;!-- ポイント3 --&gt;
                    );
                })
            }
        &lt;/&gt;
    );
};

export default Users;
</code></pre>
<p>まず初めに登場する型は、<code>React.FC</code>（8行目）です。<br>
この型は React Functional Component を意味します。</p>
<p>次に登場するのは、9行目の <code>useState&lt;User[] | undefined&gt;</code> ですね。<br>
この定義は、<code>userList</code> の型が User[] または undefined であることを示します。</p>
<p>あとは、useEffect() でさきほど実装した API リクエストを行い、<br>
取得したユーザ情報を <code>userList</code> にセットしています。</p>
<br>
<p>このとき、33行目のユーザ情報表示処理では、<br>
User インターフェースを定義しているため、<br>
IDE において、どういったキーが存在するかが補完候補として出てきます！ ↓</p>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/12/react_typescript_sample/complement.png" width="700">
<p>型がちゃんと定義されているので、<br>
取得したデータに対して、どういった処理ができる（どのメソッドを適用できる）かが明確になり、<br>
凡ミスを減らすことができますし、コードの可読性向上にも繋がります。</p>
<p>いいですね！</p>
<p>実践編は以上です。<br>
API リクエスト部分だけかよというツッコミはどうかご勘弁を😇</p>
<p>最後に TypeScript を使う上での注意点と最新版で追加された機能を少し紹介して終わりにしたいと思います。</p>
<h1 id="typescriptを使う上での注意点">TypeScriptを使う上での注意点</h1>
<h2 id="typescript-の型情報はなくなる">TypeScript の型情報はなくなる</h2>
<p>TypeScript で型を定義していたとしても、最終的にそのコードは JavaScript に変換されます。</p>
<p>ご存知のとおり、JavaScript には型などありません。<br>
したがって、実際に動くコードには型情報はついていません。</p>
<p>あくまで開発段階で型の整合性チェックや補完などができるだけであること、<br>
ちゃんと理解しておくことが、とても重要だと思います。</p>
<h2 id="create-react-app-では使えない機能がある">create-react-app では使えない機能がある</h2>
<p>create-react-app の最新版 3.2.0 では、<br>
TypeScript 3.7 から使用できる一部機能にまだ対応していません。</p>
<p>本内容については、次章にて詳細に話します。</p>
<h1 id="最新安定版-37-で追加された機能">最新安定版 3.7 で追加された機能</h1>
<p>2019年11月7日にメジャーアップデートが行われ、バージョン 3.7 がリリースされました。<br>
今回は以下の新機能をついて紹介します。</p>
<h2 id="optional-chaininghttpswwwtypescriptlangorgdocshandbookrelease-notestypescript-3-7htmloptional-chaining"><a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#optional-chaining" target="_blank" rel="noopener noreferrer">Optional Chaining</a>
</h2>
<p>Kotlin を書いたことがある人は、見覚えのある文法ではないでしょうか？</p>
<pre><code class="language-typescript">let x = foo?.bar.baz();
</code></pre>
<p>このように書けば、<code>foo</code> が null または undefined じゃない場合にのみ <code>foo.bar.baz()</code> を実行します。<br>
下記のコードと同義です。</p>
<pre><code class="language-typescript">let x = (foo === null || foo === undefined) ?
    undefined :
    foo.bar.baz();
</code></pre>
<br>
<p>ここで、さきほど、最新版の create-react-app では 最新版 TypeScript の一部機能が使えないと言いましたが、<br>
その機能がこの Optional Chaining です。</p>
<p>本機能を使用しようとすると、</p>
<pre><code class="language-zsh">./src/pages/users.tsx
SyntaxError: /Users/yyh-gl/workspaces/React/react-typescript-sample/src/pages/users.tsx: Support for the experimental syntax 'optionalChaining' isn't currently enabled (29:25):

  27 |             &lt;h1&gt;User List&lt;/h1&gt;
  28 |             {
&gt; 29 |                 userList?.map((user) =&gt; {
     |                         ^
  30 |                     return (
  31 |                         &lt;p&gt;{user.firstName}&lt;/p&gt;
  32 |                     );

Add @babel/plugin-proposal-optional-chaining (https://git.io/vb4Sk) to the 'plugins' section of your Babel config to enable transformation.
</code></pre>
<p>このようにエラーが出て、<br>
Babel（TypeScript を JavaScript に変換するやつ）の設定ファイルに <br>
<code>@babel/plugin-proposal-optional-chaining </code> を追加しろと言われます。</p>
<p>しかしながら、現在、Babel の設定ファイルである <code>.babelrc</code> や <code>babel.config.js</code> に create-react-app（厳密には <code>react-scripts</code>）が対応しておらず、読み込むことができません。</p>
<p>本件については、すでに Issue が出されて、PRもマージ済みということなので、<br>
今後のリリースに期待ですね。。。</p>
<p><a href="https://qiita.com/Nkzn/items/e76b5fad43f238e76fb9#%E7%B4%A0%E3%81%AEcra%E3%81%A7%E3%81%AF%E4%BD%BF%E3%81%88%E3%81%AA%E3%81%84" target="_blank" rel="noopener noreferrer">参考サイト</a>
</p>
<p>なお、Optional Chaining は本家 JavaScript にも組み込まれる予定です！<br>
TypeScript は、JavaScript の Class のように、<br>
JavaScriptのバージョンを上げないと使えない機能を<br>
ライブラリレベルで使えるようにしてくれるのでいいですね👍</p>
<h2 id="nullish-coalescinghttpswwwtypescriptlangorgdocshandbookrelease-notestypescript-3-7htmlnullish-coalescing"><a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#nullish-coalescing" target="_blank" rel="noopener noreferrer">Nullish Coalescing</a>
</h2>
<p>Nullish Coalescing をコードで表すと下記のようになります。</p>
<pre><code class="language-typescript">let x = foo ?? bar();
</code></pre>
<p><code>foo</code> が null または undefined でなければ、 <code>foo</code> が代入されます。<br>
null または undefined であれば、<code>bar()</code> が実行されます。</p>
<p>下記のコードと同義です。</p>
<pre><code class="language-typescript">let x = (foo !== null &amp;&amp; foo !== undefined) ?
    foo :
    bar();
</code></pre>
<p>コードの記述量が減っていいですね👍</p>
<h1 id="まとめ">まとめ</h1>
<p>TypeScript 入門 いかがでしたでしょうか？</p>
<p>詳細な説明を飛ばしたところもありましたが、<br>
TypeScript がどんな感じなのか、少しでも感じてもらえたならば幸いです。</p>
<p>TypeScript は型に注目がいきがちですが、<br>
他にも様々な便利機能があるので、どんどん使い倒していきたいですね！</p>
<p>明日からのアドベントカレンダー記事も楽しみです😃</p>
<br>
<p>TypeScript Advent Calendar 2019、<br>
明日は <a href="https://qiita.com/kimromi" target="_blank" rel="noopener noreferrer">kimromi</a>
 さんの『<a href="https://kimromi.hatenablog.jp/entry/2019/12/03/134214" target="_blank" rel="noopener noreferrer">FlowからTypeScriptに段階的に移行する</a>
』です🛫</p>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/react" term="react" label="React"/><category scheme="https://yyh-gl.github.io/tech-blog/categories/typescript" term="typescript" label="TypeScript"/><category scheme="https://yyh-gl.github.io/tech-blog/categories/advent-calendar" term="advent-calendar" label="Advent Calendar"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">【DeNA.go #3】Go活用事例やパフォーマンスチューニングの話聞いてきた</title><link href="https://yyh-gl.github.io/tech-blog/blog/denago_3/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/github-actions-private-action/?utm_source=atom_feed" rel="related" type="text/html" title="【GitHub Actions】プライベートアクションを使ってみた"/><link href="https://yyh-gl.github.io/tech-blog/blog/mercarigo_11/?utm_source=atom_feed" rel="related" type="text/html" title="【mercari.go #11】エラーハンドリング ＋ singleflight ＋ ISUCON ベンチマーカー"/><link href="https://yyh-gl.github.io/tech-blog/blog/react_memo/?utm_source=atom_feed" rel="related" type="text/html" title="React.memo について調べたのでメモを残しておく"/><link href="https://yyh-gl.github.io/tech-blog/blog/mercari_meetup_for_backend_engineers_1/?utm_source=atom_feed" rel="related" type="text/html" title="【Backend Engineer’s meetup】メルカリ社主催 バックエンダーのための Meetup イベント行ってきた"/><link href="https://yyh-gl.github.io/tech-blog/blog/godo_miniconf/?utm_source=atom_feed" rel="related" type="text/html" title="【Go同miniConf】Goの勉強会に参加してきた話"/><id>https://yyh-gl.github.io/tech-blog/blog/denago_3/</id><author><name>yyh-gl</name></author><published>2019-11-01T00:00:00+00:00</published><updated>2019-11-01T00:00:00+00:00</updated><content type="html"><![CDATA[<blockquote>DeNAさん主催のGo勉強会</blockquote><h1 id="denago-3">DeNA.go #3</h1>
<ul>
<li><a href="https://dena.connpass.com/event/150676/" target="_blank" rel="noopener noreferrer">connpass</a>
</li>
<li>ハッシュタグ：<a href="https://twitter.com/hashtag/DeNAgo" target="_blank" rel="noopener noreferrer">#DeNAgo</a>
</li>
</ul>
<p>初参加です！<br>
ビールとお弁当もらいました。</p>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/11/denago_3/dinner.JPG" width="450">
<p>そしてなんとなんと <br>
k8sの技術書をいただいちゃいました！！！<br>
もちろんステッカーもありましたよ👍</p>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/11/denago_3/k8s.JPG" width="450">
<h1 id="1-go活用事例安全運転支援サービスを支える運用サイト">1. [Go活用事例]安全運転支援サービスを支える運用サイト</h1>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/11/denago_3/session1.JPG" width="450">
<p>登壇者：@suhirotaka さん <br>
オートモーティブ事業本部スマートドライビング部システム開発グループ</p>
<p><a href="https://speakerdeck.com/suhirotaka/gohuo-yong-shi-li-an-quan-yun-zhuan-zhi-yuan-sabisuwozhi-eru-yun-yong-guan-li-sisutemu" target="_blank" rel="noopener noreferrer">スライド</a>
</p>
<h2 id="主題">主題</h2>
<p>管理画面をGoで作成</p>
<h2 id="railsで作ってるものをgoで作る理由">Railsで作ってるものをGoで作る理由</h2>
<ul>
<li>実証実験時はスピード重視でRails</li>
<li>本サービスはパフォーマンス重視でGo</li>
</ul>
<p>順次Goに書き換えていく</p>
<h2 id="goのフレームワーク">Goのフレームワーク</h2>
<p>GoのWAF（Web Application Framework）には</p>
<ul>
<li>フルスタック・MVC</li>
<li>ミニマル・高速</li>
</ul>
<p>の2種類がある</p>
<p>この辺の話は、僕の<a href="https://yyh-gl.hatenablog.com/entry/2019/02/08/195310?_ga=2.260731597.131948474.1572615746-732745836.1548899089" target="_blank" rel="noopener noreferrer">旧ブログ</a>
にもいろいろ書いているのでどうぞー</p>
<p>DeNAではフルスタック・MVCを選択</p>
<h2 id="goにおけるフルスタックなwaf">GoにおけるフルスタックなWAF</h2>
<ul>
<li>Beego：採用！</li>
<li>Revel：開発が止まってきている</li>
<li>Iris：プロジェクトの運用がうまくいっていないようだった</li>
</ul>
<h2 id="beego">Beego</h2>
<ul>
<li>フルスタックのMVCフレームワーク</li>
<li>ORMまでついてる</li>
<li>セッション管理、ロガー、キャッシュなどのライブラリがいろいろついてるけど、全てモジュール化されていて、部分的に他のライブラリを使うことができる</li>
<li>Railsライクなフレームワーク
<ul>
<li>Railsのbefore/after_actionに相当するものもある（Prepare(), Finish()）</li>
</ul>
</li>
</ul>
<h2 id="ライブラリ">ライブラリ</h2>
<p>使用ライブラリは<a href="https://speakerdeck.com/suhirotaka/gohuo-yong-shi-li-an-quan-yun-zhuan-zhi-yuan-sabisuwozhi-eru-yun-yong-guan-li-sisutemu?slide=32" target="_blank" rel="noopener noreferrer">こちら</a>
</p>
<p>こういうの教えてくれるのめっちゃ嬉しい</p>
<ul>
<li>ORM：GORM</li>
<li>ロガー：logrus</li>
<li>PDF生成：gopdf → 日本語もきれいにでるので最高にクール</li>
<li>画像生成：gg</li>
<li>バーコード生成：Barcode</li>
</ul>
<h1 id="2-webシステムのパフォーマンスとgo">2. WebシステムのパフォーマンスとGo</h1>
<p>（写真撮り忘れた…）</p>
<p>登壇者：（@karupanerura）
ゲーム・エンターテインメント事業本部ゲーム事業部Publish統括部共通基盤部アライアンスシステムグループ</p>
<p><a href="https://speakerdeck.com/karupanerura/websisutemufalsehahuomansutogo" target="_blank" rel="noopener noreferrer">スライド</a>
</p>
<h2 id="webシステムにおけるパフォーマンスとは">Webシステムにおけるパフォーマンスとは</h2>
<p>たくさんリクエスト処理できる かつ リソース消費が少ないのが <br>
システム全体で見たときの理想的なパフォーマンス</p>
<h2 id="パフォーマンスチューニングのいろいろ">パフォーマンスチューニングのいろいろ</h2>
<p>詳しいチューニング方法は<a href="https://speakerdeck.com/karupanerura/websisutemufalsehahuomansutogo?slide=24" target="_blank" rel="noopener noreferrer">こちら</a>
</p>
<p>この中で初めて知ったものをピックアップ↓</p>
<h3 id="-server-sent-events">◎ Server Sent Events</h3>
<ul>
<li>HTTPコネクションを持続させる</li>
<li>WebSocketより扱いが簡単らしい</li>
</ul>
<h3 id="バファリングの諸注意">バファリングの諸注意</h3>
<p>結局リソースを消費していることに違わないので、メモリ管理はちゃんとしないといけない</p>
<h2 id="qa">Q&amp;A</h2>
<p>Q. sync.Pool でメモリ効率は良いがメモリは消費していくとは？（<a href="https://speakerdeck.com/karupanerura/websisutemufalsehahuomansutogo?slide=40" target="_blank" rel="noopener noreferrer">該当スライドページ</a>
）</p>
<p>A. Poolが居続けるからメモリ消費するよって話</p>
<br>
<p>Q. SetMaxOpenConnsの数ってどうやって決めるのがいい？</p>
<p>A. DBへのコネクションがどれくらいかとかを可視化して、そのデータに基づいて大きすぎず、小さすぎずの数を探していく（最終的には手探り）</p>
<br>
<p>Q. バッファリングの使い所</p>
<p>A. バッファリングよりシャーディングで対応できることが多い <br>
シャーディングで対応した場合、アプリケーション（実装）がシンプルになる</p>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/%E5%8B%89%E5%BC%B7%E4%BC%9A" term="%E5%8B%89%E5%BC%B7%E4%BC%9A" label="勉強会"/><category scheme="https://yyh-gl.github.io/tech-blog/categories/go" term="go" label="Go"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">【GitHub Actions】プライベートアクションを使ってみた</title><link href="https://yyh-gl.github.io/tech-blog/blog/github-actions-private-action/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/mercarigo_11/?utm_source=atom_feed" rel="related" type="text/html" title="【mercari.go #11】エラーハンドリング ＋ singleflight ＋ ISUCON ベンチマーカー"/><link href="https://yyh-gl.github.io/tech-blog/blog/react_memo/?utm_source=atom_feed" rel="related" type="text/html" title="React.memo について調べたのでメモを残しておく"/><link href="https://yyh-gl.github.io/tech-blog/blog/mercari_meetup_for_backend_engineers_1/?utm_source=atom_feed" rel="related" type="text/html" title="【Backend Engineer’s meetup】メルカリ社主催 バックエンダーのための Meetup イベント行ってきた"/><link href="https://yyh-gl.github.io/tech-blog/blog/godo_miniconf/?utm_source=atom_feed" rel="related" type="text/html" title="【Go同miniConf】Goの勉強会に参加してきた話"/><link href="https://yyh-gl.github.io/tech-blog/blog/id_token_and_access_token/?utm_source=atom_feed" rel="related" type="text/html" title="【OAuth 2.0 / OIDC】アクセストークンとIDトークンの違い ＋ OIDC誕生の歴史"/><id>https://yyh-gl.github.io/tech-blog/blog/github-actions-private-action/</id><author><name>yyh-gl</name></author><published>2019-10-22T00:00:00+00:00</published><updated>2019-10-22T00:00:00+00:00</updated><content type="html"><![CDATA[<blockquote>HCLではなくてyml版です</blockquote><h1 id="プライベートアクションとは">プライベートアクションとは</h1>
<p>GitHub Actions では、開発者がアクション（Lint やテストといったジョブなど）を作って、公開することができます。
<br>
この公開されたアクションは、世界中の人が使えるため、もちろん自分のプロジェクトに持ってきて使用できます。
<br>
この公開されたアクションのことを <u>パブリックアクション</u> といいます。</p>
<p>パブリックアクションが溢れた世界を想像するだけでワクワクしますね👍
<br>
（野良 Docker イメージと同様に、ほいそれとは使えないでしょうが…）</p>
<br>
今回、とりあげるのはパブリックアクションの正反対にあるものです。
<br>
つまり、公開しない（できない）アクション ＝ <u>プライベートアクション</u> です。
<h1 id="プライベートアクションを使うための準備">プライベートアクションを使うための準備</h1>
<p>ディレクトリ構成は以下のとおりです。</p>
<pre><code>.github
├── actions
│   └── golang-test
│       ├── Dockerfile
│       ├── action.yml
│       └── entrypoint.sh
└── workflows
    └── golang.yml
</code></pre>
<p><code>/actions</code> ディレクトリ配下に golang-test という、Lint とテストを実行するアクションを作ってみます。</p>
<p><code>/workflow</code> ディレクトリ配下には、golang 用のワークフロー定義ファイルを置いています。</p>
<p>では、次から各ファイルの定義を見ていきます。</p>
<h1 id="プライベートアクションの定義">プライベートアクションの定義</h1>
<pre><code class="language-yml"># /actions/golang-test/action.yml

name: 'Golang Lint and Test Action'
description: 'Lint and Test for Golang'
author: 'yyh-gl'
runs:
  # Docker を使って実行することを宣言
  using: 'docker'
  # 使用する Docker イメージを指定
  image: 'Dockerfile'
</code></pre>
<p>アクションの定義は上記のとおりです。
<br>
<a href="https://help.github.com/ja/github/automating-your-workflow-with-github-actions/creating-a-docker-container-action#create-an-action-metadata-file" target="_blank" rel="noopener noreferrer">公式ドキュメント</a>
を参考にしました。</p>
<p><code>action.yml</code> 内で使用している <code>Dockerfile</code> は以下のとおりです。</p>
<pre><code class="language-dockerfile"># /actions/golang-test/Dockerfile
FROM golang:1.12.5

LABEL &quot;name&quot;=&quot;Golang workflow&quot; \
    &quot;maintainer&quot;=&quot;yyh-gl &lt;yhonda.95.gl@gmail.com&gt;&quot; \
    &quot;com.github.actions.icon&quot;=&quot;code&quot; \
    &quot;com.github.actions.color&quot;=&quot;green-dark&quot; \
    &quot;com.github.actions.name&quot;=&quot;golang　workflow&quot; \
    &quot;com.github.actions.description&quot;=&quot;This is an Action to run go and golangci-lint commands.&quot;

ENV LINT_VERSION=&quot;v1.18.0&quot;

COPY entrypoint.sh /entrypoint.sh

RUN curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | sh -s -- -b $(go env GOPATH)/bin ${LINT_VERSION} \
  &amp;&amp; chmod +x /entrypoint.sh

ENTRYPOINT [&quot;/entrypoint.sh&quot;]
</code></pre>
<p><code>Dockerfile</code> 内で使用している <code>entorypoint.sh</code> は以下のとおりです。</p>
<pre><code class="language-shell"># /actions/golang-test/entrypoint.sh

#!/bin/bash

APP_DIR=&quot;/go/src/github.com/${GITHUB_REPOSITORY}/&quot;

mkdir -p &quot;${APP_DIR}&quot; &amp;&amp; cp -r ./ &quot;${APP_DIR}&quot; &amp;&amp; cd &quot;${APP_DIR}&quot;

export GO111MODULE=on
go mod tidy
go mod verify

if [[ &quot;$1&quot; == &quot;lint&quot; ]]; then
    echo &quot;############################&quot;
    echo &quot;# Running GolangCI-Lint... #&quot;
    echo &quot;############################&quot;
    golangci-lint --version
    echo
    golangci-lint run --tests --disable-all --enable=goimports --enable=golint --enable=govet --enable=errcheck ./...
fi
</code></pre>
<p><code>Dockerfile</code> と <code>entrypoint.sh</code> は<a href="https://dev.classmethod.jp/etc/github-actions-golang/" target="_blank" rel="noopener noreferrer">こちら</a>
を参考にしました。</p>
<h1 id="ワークフローの定義">ワークフローの定義</h1>
<pre><code class="language-yml"># /workflow/golang.yml

# ワークフローの名前
name: Workflow for Golang
# push をトリガーとしてワークフローを実行
on: [push]

# ジョブを定義：ジョブは並列処理される（デフォルト動作）
jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    # job の中にさらに細かい粒度で step が存在：step は job と違い上から順に実行される
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Lint
        uses: ./.github/actions/golang
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Test
        run: go test ./...

</code></pre>
<p><code>/workflows/golang.yml</code> の中身を上記のとおりです。
<br>
今回は Lint と go test を並列で実行しています。</p>
<h2 id="重要ポイントプライベートアクションとパブリックアクションでの設定差異">重要ポイント：プライベートアクションとパブリックアクションでの設定差異</h2>
<p><u>プライベートアクションを使用するときは チェックアウト が必須です！</u></p>
<p><a href="https://help.github.com/ja/github/automating-your-workflow-with-github-actions/configuring-a-workflow#workflow-file-example" target="_blank" rel="noopener noreferrer">公式ドキュメントのサンプル</a>
を下記に示します。</p>
<pre><code class="language-yml">name: Greet Everyone
# This workflow is triggered on pushes to the repository.
on: [push]

jobs:
  build:
    # Job name is Greeting
    name: Greeting
    # This job runs on Linux
    runs-on: ubuntu-latest
    steps:
      # This step uses GitHub's hello-world-javascript-action: https://github.com/actions/hello-world-javascript-action
      - name: Hello world
        uses: actions/hello-world-javascript-action@v1
        with:
          who-to-greet: 'Mona the Octocat'
        id: hello
      # This step prints an output (time) from the previous step's action.
      - name: Echo the greeting's time
        run: echo 'The time was $｛｛ steps.hello.outputs.time ｝｝.'
</code></pre>
<p>14行目でパブリックアクションを使用しています。
<br>
パブリックアクション使用時は、アクションの本体（コード）がどこからでも取得可能な場所にあるのでチェックアウトが必要ありません。</p>
<p>しかし、プライベートアクションは自分のプロジェクト内にアクションの本体があります。
<br>
したがって、チェックアウトして、プロジェクトのコードをアクション実行環境に持ってくる必要があります。</p>
<h2 id="重要ポイントチェックアウト">重要ポイント：チェックアウト</h2>
<p>ここで、GitHub Actions ではどのようにしてチェックアウトするのか。ですが、
<br>
答えは <u>パブリックアクションを使用する</u> です。</p>
<p>GitHub が公開している公式アクションの中に、<a href="https://github.com/actions/checkout" target="_blank" rel="noopener noreferrer">actions/checkout</a>
 があります。
<br>
これを使用します。</p>
<p>僕のコードでいうと、 <code>/workflow/golang.yml</code> 内の 16 行目で使用しています。</p>
<hr>
<p>「チェックアウト って何？」という方は、
<br>
<a href="https://github.com/actions/checkout" target="_blank" rel="noopener noreferrer">actions/checkout</a>
 の README の説明がとても分かりやすいと思います。</p>
<blockquote>
<p>This action checks out your repository to $GITHUB_WORKSPACE, so that your workflow can access the contents of your repository.</p>
<p>（あなたのリポジトリ（コード）を $GITHUB_WORKSPACE に持ってきて、ワークフローがそのコードにアクセスできるようにする）</p>
</blockquote>
<p>↑ これを実現するためのものです。</p>
<p><u>プライベートアクションはネット上に公開されていないから、
<br>
手元にあるアクション本体（コード）を GtHub Actions の実行環境に持っていった</u>
<br>
というだけですね。</p>
<hr>
<p>・</p>
<p>・</p>
<p>・</p>
<h1 id="ワークフローを実行">ワークフローを実行</h1>
<p>後は push するだけです。</p>
<p>実際、push してみると、
<br>
下記のとおり、ワークフローが実行されました🎉</p>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/10/github-actions-private-action/result.png" width="600">
<p>ログを見ると、Dockerfile からアクションが組み立てられていることが、なんとなく読み取れると思います。</p>
<h1 id="まとめ">まとめ</h1>
<p>パブリックアクションが実現する CI/CD まわりのエコシステムは、とてもワクワクしますね。
<br>
でも、やっぱり公開できないアクションもあると思います。</p>
<p>そういったときにはプライベートアクションを活用していきましょう。</p>
<br>
【余談】
<br>
<p>ワークフローについてもっと知りたい方は、
ぜひ<a href="https://help.github.com/ja/github/automating-your-workflow-with-github-actions/configuring-a-workflow" target="_blank" rel="noopener noreferrer">公式ドキュメント</a>
を読んでみてください。</p>
<br>
<p>日本語対応しています👍</p>
<h1 id="参考記事">参考記事</h1>
<ul>
<li><a href="https://help.github.com/ja/github/automating-your-workflow-with-github-actions/creating-a-docker-container-action" target="_blank" rel="noopener noreferrer">Docker コンテナのアクションを作成する｜Docker公式ドキュメント</a>
</li>
<li><a href="https://help.github.com/ja/github/automating-your-workflow-with-github-actions/configuring-a-workflow" target="_blank" rel="noopener noreferrer">ワークフローを設定する｜Docker公式ドキュメント</a>
</li>
<li><a href="https://help.github.com/ja/github/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions" target="_blank" rel="noopener noreferrer">GitHub Actionsのワークフロー構文｜Docker公式ドキュメント</a>
</li>
</ul>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/ci/cd" term="ci/cd" label="CI/CD"/><category scheme="https://yyh-gl.github.io/tech-blog/categories/github" term="github" label="GitHub"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">【mercari.go #11】エラーハンドリング ＋ singleflight ＋ ISUCON ベンチマーカー</title><link href="https://yyh-gl.github.io/tech-blog/blog/mercarigo_11/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/react_memo/?utm_source=atom_feed" rel="related" type="text/html" title="React.memo について調べたのでメモを残しておく"/><link href="https://yyh-gl.github.io/tech-blog/blog/mercari_meetup_for_backend_engineers_1/?utm_source=atom_feed" rel="related" type="text/html" title="【Backend Engineer’s meetup】メルカリ社主催 バックエンダーのための Meetup イベント行ってきた"/><link href="https://yyh-gl.github.io/tech-blog/blog/godo_miniconf/?utm_source=atom_feed" rel="related" type="text/html" title="【Go同miniConf】Goの勉強会に参加してきた話"/><link href="https://yyh-gl.github.io/tech-blog/blog/id_token_and_access_token/?utm_source=atom_feed" rel="related" type="text/html" title="【OAuth 2.0 / OIDC】アクセストークンとIDトークンの違い ＋ OIDC誕生の歴史"/><link href="https://yyh-gl.github.io/tech-blog/blog/my_thinking_about_planning/?utm_source=atom_feed" rel="related" type="text/html" title="【徒然なるままに】サービス発案における主観と客観のバランスについて"/><id>https://yyh-gl.github.io/tech-blog/blog/mercarigo_11/</id><author><name>yyh-gl</name></author><published>2019-10-07T00:00:00+00:00</published><updated>2019-10-07T00:00:00+00:00</updated><content type="html"><![CDATA[<blockquote>めちゃくちゃためになった</blockquote><h1 id="mercarigo-11">mercari.go #11</h1>
<ul>
<li>connpass： <a href="https://mercari.connpass.com/event/148913/" target="_blank" rel="noopener noreferrer">リンク</a>
</li>
<li>ハッシュタグ： <a href="https://twitter.com/search?q=%23mercarigo&amp;src=typd&amp;lang=ja" target="_blank" rel="noopener noreferrer">&lt;code&gt;#mercarigo&lt;/code&gt;</a>
</li>
</ul>
<p>今回もお弁当とドリンクがありました！ありがたや</p>
<br>
[追記：2019年10月12日]<br>
[Mercari Engineering Blog](https://tech.mercari.com/entry/2019/10/11/160000) にて、本イベントの記事が公開されました。<br>
発表資料が載せてあります。ありがたや🙏
<h1 id="1-about-error-handling-in-go">1. About error handling in Go</h1>
<p>登壇者：jd さん（@JehandadKamal）</p>
<p><a href="https://about.sourcegraph.com/go/gophercon-2019-handling-go-errors" target="_blank" rel="noopener noreferrer">資料</a>
（正式に共有されたものでないので、発表の内容が少し異なります）</p>
<h2 id="errors-are-values">Errors are values</h2>
<p>”<a href="https://blog.golang.org/errors-are-values" target="_blank" rel="noopener noreferrer">Errors are values</a>
” という考え方。</p>
<h2 id="goでよくあるエラー処理パターン">Goでよくあるエラー処理パターン</h2>
<ul>
<li>エラーをラップしてより詳細な情報を付与する</li>
<li>専用構造体を作る</li>
<li>スタックトレースを構成する</li>
</ul>
<h2 id="error-is-your-domain">”Error is your domain”</h2>
<p>Domain Error Struct を作成する。</p>
<pre><code class="language-go">type Error struct {
  Op        Op
  Kind      Kind
  Serverity zapcore.ErrorLevel
  Err       error
}
</code></pre>
<ul>
<li>Op：Operation → 関数名とか</li>
<li>Kind：エラー種別 → NotAvailable, NotFound といったもの</li>
<li>Serverity：エラーレベル</li>
<li>Err：エラー内容</li>
</ul>
<h2 id="上記のような構造体を作る理由">上記のような構造体を作る理由</h2>
<p>error を比較するときは、基本的に文字列の比較になるため取り回しが悪い
<br>
→ ”NotFound” という文字列を比較するとかとか</p>
<p>Domain Error Struct を作れば Kind での比較などが可能になる。</p>
<p>加えて、操作内容やエラー種別とか情報を付与できる。</p>
<h3 id="これ大事">これ大事！</h3>
<p>Remember ”Error is your domain”</p>
<br> 
<h3 id="エラーの分割方法">エラーの分割方法</h3>
<p><a href="https://twitter.com/fukubaka0825/status/1181162651008659461" target="_blank" rel="noopener noreferrer">Twitterメモ</a>
</p>
<h1 id="2-singleflight">2. singleflight</h1>
<p>登壇者：@nsega さん</p>
<p><a href="https://speakerdeck.com/nsega/introduction-to-singleflight" target="_blank" rel="noopener noreferrer">スライド</a>
</p>
<h2 id="singleflight">singleflight</h2>
<ul>
<li>
<p>同じ処理が複数回実行される場合に、一回だけ実行して、その結果を使い回すというもの。
<br>
→ キャッシュに似ていますが、違いは後述します。</p>
</li>
<li>
<p>BFF レイヤーで活躍
<br>
→ マイクロサービスにおいて、複数のAPIにリクエストを投げて、レスポンスを集約するようなときに有効。</p>
</li>
<li>
<p><a href="https://godoc.org/golang.org/x/sync/singleflight" target="_blank" rel="noopener noreferrer">ここ</a>
にある3つの関数さえ押さえればOK。</p>
</li>
</ul>
<h2 id="singleflight-のユースケース">singleflight のユースケース</h2>
<p>初見だと、キャッシュとなにが違うのか分かりづらいと思います。
<br>
ここらへんを見ると singleflight のユースケースがわかってくると思います。</p>
<ul>
<li><a href="https://christina04.hatenablog.com/entry/go-singleflight" target="_blank" rel="noopener noreferrer">singleflight で解決できること1</a>
</li>
<li><a href="https://qiita.com/methane/items/27ccaee5b989fb5fca72" target="_blank" rel="noopener noreferrer">singleflight で解決できること2</a>
</li>
</ul>
<h2 id="qa">Q&amp;A</h2>
<p>Q. goroutine で使うのはどうでしょう？</p>
<p>A.<br></p>
<p>singleflight は扱いが難しいので、呼び出し元がわからなくなると、デバッグが余計難しくなる。
<br>
よって、goroutine ではあまり使わない方が良さそう。
<br>
→ 呼び出し元は明確な方が追跡しやすくていいと思う。</p>
<h1 id="3-isucon9予選のベンチマーカーについてtbd">3. ISUCON9予選のベンチマーカーについて（TBD）</h1>
<p>登壇者：カタツイさん（@catatsuy）</p>
<p><a href="https://gist.github.com/catatsuy/74cd66e9ff69d7da0ff3311e9dcd81fa" target="_blank" rel="noopener noreferrer">資料</a>
</p>
<p>上記資料が全てです！</p>
<p>ISUCON の裏側、つまりベンチマーカーを作った話です。</p>
<p>こんなことを考えて作られているんだと知ることができ、
<br>
めちゃくちゃおもしろかったし、勉強になりました！</p>
<p>ぜひ、上記資料読んでみてください！</p>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/go" term="go" label="Go"/><category scheme="https://yyh-gl.github.io/tech-blog/categories/%E5%8B%89%E5%BC%B7%E4%BC%9A" term="%E5%8B%89%E5%BC%B7%E4%BC%9A" label="勉強会"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">React.memo について調べたのでメモを残しておく</title><link href="https://yyh-gl.github.io/tech-blog/blog/react_memo/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/mercari_meetup_for_backend_engineers_1/?utm_source=atom_feed" rel="related" type="text/html" title="【Backend Engineer’s meetup】メルカリ社主催 バックエンダーのための Meetup イベント行ってきた"/><link href="https://yyh-gl.github.io/tech-blog/blog/godo_miniconf/?utm_source=atom_feed" rel="related" type="text/html" title="【Go同miniConf】Goの勉強会に参加してきた話"/><link href="https://yyh-gl.github.io/tech-blog/blog/id_token_and_access_token/?utm_source=atom_feed" rel="related" type="text/html" title="【OAuth 2.0 / OIDC】アクセストークンとIDトークンの違い ＋ OIDC誕生の歴史"/><link href="https://yyh-gl.github.io/tech-blog/blog/my_thinking_about_planning/?utm_source=atom_feed" rel="related" type="text/html" title="【徒然なるままに】サービス発案における主観と客観のバランスについて"/><link href="https://yyh-gl.github.io/tech-blog/blog/ogp/?utm_source=atom_feed" rel="related" type="text/html" title="【OGP】リンク先のサムネイル画像を表示できるようにした話"/><id>https://yyh-gl.github.io/tech-blog/blog/react_memo/</id><author><name>yyh-gl</name></author><published>2019-09-18T00:00:00+00:00</published><updated>2019-09-18T00:00:00+00:00</updated><content type="html"><![CDATA[<blockquote>React Hooks 楽しい</blockquote><h1 id="reactmemo-とは">React.memo とは</h1>
<p><a href="https://ja.reactjs.org/docs/react-api.html#reactmemo" target="_blank" rel="noopener noreferrer">公式ドキュメント</a>
を見ると、</p>
<blockquote>
<p>これは React.PureComponent に似ていますが、クラスではなく関数コンポーネント用です。</p>
</blockquote>
<p>とあります。</p>
<p>つまり、 React.PureComponent を関数コンポーネントで実現するための手段らしいです。</p>
<h1 id="reactpurecomponent-とは">React.PureComponent とは</h1>
<p><a href="https://ja.reactjs.org/docs/react-api.html#reactpurecomponent" target="_blank" rel="noopener noreferrer">公式ドキュメント</a>
を見ると、</p>
<blockquote>
<p>React.PureComponent は React.Component と似ています。
両者の違いは React.Component が shouldComponentUpdate() を実装していないことに対し、
React.PureComponent は props と state を浅く (shallow) 比較することでそれを実装していることです。</p>
</blockquote>
<p>とあります。</p>
<p><u>shouldComponentUpdate() によって、どういった変更があれば再描画するかを定義する</u>ようです。</p>
<br>
<p>追加でこの<a href="https://the2g.com/2814" target="_blank" rel="noopener noreferrer">参考記事</a>
を読んでみると、</p>
<blockquote>
<p>PureComonentはprops及びstateの変更を検出した場合のみレンダリングを行います。
Messageコンポーネントではmessage propsの変更を察知し、必要分の更新を行うようになります。</p>
</blockquote>
<p>とあります。</p>
<p>自分で再描画条件を定義できるので、無駄な再描画を省くことができ、パフォーマンス向上を期待できるんですね。</p>
<p>→ React.PureComponent を用いることでパフォーマンスを向上させることができるようです。<br>
（参考記事内にもあるとおり銀の弾丸ではないようですが…）</p>
<h1 id="浅い比較-とは">浅い比較 とは</h1>
<blockquote>
<p>shouldComponentUpdate() は浅い比較によって変更検知を行う。</p>
</blockquote>
<p>とありましたが、浅い比較とはなんでしょうか。<br>
（shouldComponentUpdate() のデフォルトが浅い比較というだけで、オリジナルの比較方法を実装可能なようです）</p>
<p>さきほどの<a href="https://the2g.com/2814" target="_blank" rel="noopener noreferrer">参考記事</a>
にて説明されていました。</p>
<blockquote>
<p>浅い比較というのは、簡潔に述べるとオブジェクトの参照先が同じであれば等しいと見なすことです。</p>
</blockquote>
<p>参照先しか見ていないので、中身は見ていないということですね。<br>
（このような実装なのは、React の思想として、props や state といったデータは immutable であるべきだとしているからだと思います）</p>
<h2 id="ちなみに">ちなみに</h2>
<p>ミューテート（変更）せずに新しいオブジェクトを作るには下記のようにして、新しいオブジェクトを作って返してやればいいようです。（<a href="https://ja.reactjs.org/docs/optimizing-performance.html#the-power-of-not-mutating-data" target="_blank" rel="noopener noreferrer">参考</a>
）</p>
<pre><code class="language-javascript">Object.assign({}, prevState, {color: 'blue'});
</code></pre>
<h1 id="reactmemo-実践していく予定">React.memo 実践（していく予定）</h1>
<p>React.memo の使い方は</p>
<ul>
<li><a href="https://ja.reactjs.org/docs/react-api.html#reactmemo" target="_blank" rel="noopener noreferrer">公式ドキュメント</a>
</li>
<li><a href="https://aloerina01.github.io/blog/2018-10-25-1" target="_blank" rel="noopener noreferrer">他の方のブログ記事</a>
</li>
</ul>
<p>上記を見ればだいたいわかりそうです。</p>
<p>会社のプロジェクトに導入できそうなところあったら使ってみたいと思います💪</p>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/react" term="react" label="React"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">【Backend Engineer’s meetup】メルカリ社主催 バックエンダーのための Meetup イベント行ってきた</title><link href="https://yyh-gl.github.io/tech-blog/blog/mercari_meetup_for_backend_engineers_1/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/godo_miniconf/?utm_source=atom_feed" rel="related" type="text/html" title="【Go同miniConf】Goの勉強会に参加してきた話"/><link href="https://yyh-gl.github.io/tech-blog/blog/id_token_and_access_token/?utm_source=atom_feed" rel="related" type="text/html" title="【OAuth 2.0 / OIDC】アクセストークンとIDトークンの違い ＋ OIDC誕生の歴史"/><link href="https://yyh-gl.github.io/tech-blog/blog/my_thinking_about_planning/?utm_source=atom_feed" rel="related" type="text/html" title="【徒然なるままに】サービス発案における主観と客観のバランスについて"/><link href="https://yyh-gl.github.io/tech-blog/blog/ogp/?utm_source=atom_feed" rel="related" type="text/html" title="【OGP】リンク先のサムネイル画像を表示できるようにした話"/><link href="https://yyh-gl.github.io/tech-blog/blog/blog_style_fix/?utm_source=atom_feed" rel="related" type="text/html" title="【HTML + CSS + Prism.js】ブログの見た目を整えた話"/><id>https://yyh-gl.github.io/tech-blog/blog/mercari_meetup_for_backend_engineers_1/</id><author><name>yyh-gl</name></author><published>2019-08-21T00:00:00+00:00</published><updated>2019-08-21T00:00:00+00:00</updated><content type="html"><![CDATA[<blockquote>実は2日連続でメルカリ行ってた</blockquote><h1 id="backend-engineers-meetup-マイクロサービスにおける認証認可基盤">Backend Engineer’s meetup ~マイクロサービスにおける認証認可基盤~</h1>
<ul>
<li><a href="https://mercari.connpass.com/event/142624/" target="_blank" rel="noopener noreferrer">connpass</a>
</li>
<li>ハッシュタグ：<a href="https://twitter.com/hashtag/merpay_meetup" target="_blank" rel="noopener noreferrer">#merpay_meetup</a>
</li>
</ul>
<p>メルカリさん恒例のオリジナルドリンクもらいました</p>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/08/mercari_meetup_for_backend_engineers_1/original_drink.jpeg" height="400">
<h1 id="1-マイクロサービスの内部通信における認証について">1. マイクロサービスの内部通信における認証について</h1>
<p>登壇者：@pospome さん</p>
<p><a href="https://www.slideshare.net/pospome/ss-165369557/pospome/ss-165369557" target="_blank" rel="noopener noreferrer">スライド</a>
（日本語が消えてしまっていますが、ダウンロードしたら見れました）</p>
<h2 id="上記スライドの簡易メモ">上記スライドの簡易メモ</h2>
<ul>
<li>
<p>アカウント管理とログイン処理はそれぞれのチームに任せている</p>
<ul>
<li>SubjectID という 全サービス共通のID に変換して扱う</li>
</ul>
</li>
<li>
<p>メルカリでは、OIDCベースの認可の仕組みを採用</p>
<ul>
<li>RFCに書いてあるものと大差ないので、今回は <code>マイクロサービスの内部通信における認証</code> について話す</li>
</ul>
</li>
<li>
<p>全サービスは Gatwway を経由</p>
<ul>
<li>Gateway から Authority Service にくる</li>
</ul>
</li>
<li>
<p>Authority Service を認証基盤チームが管理</p>
<ul>
<li>外部からのリクエスト検証と内部通信用のトークンを生成している</li>
</ul>
</li>
<li>
<p>内部トークンは毎リクエストごとに生成</p>
<ul>
<li>マイクロサービス間で使用されるトークンはリクエスト単位で同一</li>
</ul>
</li>
<li>
<p>内部トークン用のSDKを提供</p>
<ul>
<li>Goのみ対応</li>
<li>SDKを使うといろいろとよしなにしてくれる
<ul>
<li>クレームをいい感じに取得</li>
<li>SubjectID のパースとかをいい感じにしてくれる</li>
</ul>
</li>
</ul>
</li>
<li>
<p>マイクロサービスはバッチのためのエンドポイントをもつことがあるので、Gatewayによってユーザが直接叩くことがきない環境を作れるのはメリットとなる</p>
</li>
</ul>
<h1 id="2-パネルディスカッション">2. パネルディスカッション</h1>
<p>登壇者：</p>
<ul>
<li>Keigo Watanabe さん</li>
<li>@kazegusuri</li>
<li>@nerocrux</li>
<li>@pospome</li>
</ul>
<br>
<p>パネルディスカッションのはずがほとんど質疑で終わりましたｗ</p>
<p>質疑は さきほどの <a href="https://www.slideshare.net/pospome/ss-165369557/pospome/ss-165369557" target="_blank" rel="noopener noreferrer">発表</a>
 に対するものが主でした。</p>
<p>したがって、以下、上記発表に関する質問と回答になります。</p>
<h3 id="q-第三パーティーにスコープを指定させるのではなく外部スコープと内部スコープのマッピングを行ったのはなぜか">Q. 第三パーティーにスコープを指定させるのではなく、外部スコープと内部スコープのマッピングを行ったのはなぜか</h3>
<p>A.</p>
<p>ユースケースベースでスコープを提供した方が第三パーティーの開発者がわかりやすい。</p>
<p>リソースベースだとどれが必要なスコープなのかが分かりづらい。</p>
<br>
（yyh-gl 感想）
<p>AWSのポリシーがリソースベースだと思うんだけど、どのポリシーが必要か分かりづらいもんねー</p>
<h3 id="q-jwt内部トークンの保持期間消すタイミング有効期限">Q. JWT（内部トークン）の保持期間（消すタイミング、有効期限）</h3>
<p>A. 保存していない</p>
<h3 id="q-authority-serviceの可用性">Q. Authority Serviceの可用性</h3>
<p>A.</p>
<p>処理自体は複雑ではないし、特に何か特別なことをやっているわけではない。</p>
<p>マイクロサービスに対するリクエストのリトライ、タイムアウトとかはやっている。</p>
<h3 id="q-サービス間のアクセス制御はどのようにやってるか各サービスが送信元をチェックするのかどのサービスが度のサービスにアクセスするかの制御はどうしてるのか">Q. サービス間のアクセス制御はどのようにやってるか？各サービスが送信元をチェックするのか？どのサービスが度のサービスにアクセスするかの制御はどうしてるのか？</h3>
<p>A.</p>
<p>どちらかというと認可の話だと思っている。まだやっていない。</p>
<p>Originを見て、どこまでの処理をマイクロサービスがやっていいかは決めている。</p>
<h3 id="q-不正監視はしている">Q. 不正監視はしている？</h3>
<p>A. 内部トークンの有効期限が短いので、現状やっていない。</p>
<h3 id="q-外部スコープと内部スコープの管理が大変そうマイクロサービスを分割したときとかこのテーブルの管理は誰がどうやっている">Q. 外部スコープと内部スコープの管理が大変そう。マイクロサービスを分割したときとか。このテーブルの管理は（誰が）どうやっている？</h3>
<p>A.</p>
<p>まだ一部でしか使っていないので、管理が難しいフェーズではない。ただし、今後その必要性は感じているので、対策を考える必要あり。</p>
<h3 id="q-公開鍵の失効タイミングはどのようにしているかスロット的な仕組みは入れているのか">Q. 公開鍵の失効タイミングはどのようにしているか？スロット的な仕組みは入れているのか？</h3>
<p>A.</p>
<p>公開鍵と秘密鍵はN世代で管理している。</p>
<p>メルペイでは Design Doc を作ってしっかりと議論してから開発を進めていくと決めている。</p>
<h3 id="q-jwtトークンにクレーム含ませると長くなってくると思うけどパフォーマンスとか大丈夫">Q. JWTトークンにクレーム含ませると長くなってくると思うけど、パフォーマンスとか大丈夫？</h3>
<p>A.</p>
<p>長くなることは懸念している。</p>
<p>CWT(<a href="https://tools.ietf.org/html/rfc8392%29%28CBOR" target="_blank" rel="noopener noreferrer">https://tools.ietf.org/html/rfc8392)(CBOR</a>
) とかで、バイナリ化したいと勝手に思っている。</p>
<h3 id="q-ユーザーのアカウント認証は-authority-service-でやっているか">Q. ユーザーのアカウント認証は Authority Service でやっているか？</h3>
<p>A. ログイン部分は特にやってない</p>
<h3 id="q-可用性について性能面で意識したこと">Q. 可用性について、性能面で意識したこと</h3>
<p>A.</p>
<p>まず、前提としてメルカリはレイテンシについてはあんまり考えない方針。レイテンシはモノリシックにしたら早くなるに決まっているから。</p>
<p>ただ、共通基盤は全サービスが利用するから早くする必要がある。だからmemcachedとかでローカルで完結するようにしたりはしてる。</p>
<h3 id="q-sdkの更新はどうやっている">Q. SDKの更新はどうやっている</h3>
<p>A. @here ですｗ 配布先に展開が必要… まさに今問題になっていますｗ</p>
<h3 id="q-sdkの更新は-サイドカー-とか-istio-でやらない">Q. SDKの更新は サイドカー とか Istio でやらない？</h3>
<p>A. 今後やっていきたいです</p>
<h3 id="q-トークンの有効期限">Q. トークンの有効期限</h3>
<p>A.</p>
<p>ものすごく短い。リフレッシュもできない。</p>
<p>1リクエストが10分かかるわけもないという判断軸で期限を決めている。</p>
<h3 id="q-外部と内部のマッピングなどの手作業が必要になるところはどこがある">Q. 外部と内部のマッピングなどの手作業が必要になるところはどこがある</h3>
<p>A.</p>
<p>SubjectID はアカウントの種類が増えると増やさないといけないが、アカウントの種類はそんなに増えないと思っているので、その都度増やす対応を取る。</p>
<p>他にマスターデータも手作業が必要である。今はは手作業でやっていてしんどいので自動化していきたい。</p>
<h3 id="q-あるサービスから他のサービスにバッチ処理することはあるか">Q. あるサービスから他のサービスにバッチ処理することはあるか</h3>
<p>A.</p>
<p>あります。バッチ処理のときも内部トークンを使う。</p>
<p>内部トークンは Authority Service から生成する仕組みがある。</p>
<p>（各サービスが秘密鍵をもっていて、それを使うと生成できる。その秘密鍵にスコープは現在ない。今後つけたい）</p>
<h3 id="q-外部スコープと内部スコープのマッピングにクライアント情報を足せば各マイクロサービス間で認証する必要がなさそうauthority-serviceだけで認証が完結できそう">Q. 外部スコープと内部スコープのマッピングにクライアント情報を足せば、各マイクロサービス間で認証する必要がなさそう。（＝Authority Serviceだけで認証が完結できそう）</h3>
<p>A.</p>
<p>反対です。それは各マイクロサービスが絶対に安全であるという前提でやっているから。</p>
<p>各Serviceが自分が受けていいものかを判断する。どんなリクエストが来るかはわからない。</p>
<h3 id="q-一番厳しいユースケースは今後認証基盤の大変そうなところ">Q. 一番厳しいユースケースは？（今後認証基盤の大変そうなところ）</h3>
<p>A.</p>
<p>内部トークンの寿命が短いので、pub/subといった非同期通信に対応できない。解決策はまだない。</p>
<p>バッチ処理は各サービスが Authority Service にトークンを作りに行くようにしている。（それでしのいでいる）</p>
<hr>
<p>ここでようやくパネルディスカッションです。</p>
<p>話題はひとつだけですがｗ</p>
<h3 id="q-苦労話">Q. 苦労話</h3>
<p>A.</p>
<ul>
<li>
<p>@pospome さん</p>
<p>内部通信における問題を考えるということがしんどい。</p>
<p>PO的なこともやっているので、いろいろやらないといけなくてさらにしんどい。</p>
</li>
<li>
<p>@kazegusuri さん</p>
<p>Authority Service の複雑な考え方が社内に受け入れられるか不安だった。</p>
<p>しかし、ちゃんと受け入れてもらえてよかったー。</p>
<p>@pospome さんと @nerocrux さんがよくやってくれたおかげ。</p>
</li>
<li>
<p>@nerocrux さん</p>
<p>フルタイムで手を動かせるエンジニアが4人だけでつらい。</p>
<p>認可サーバのユースケースはよく変わるからつらい。</p>
</li>
</ul>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/%E5%8B%89%E5%BC%B7%E4%BC%9A" term="%E5%8B%89%E5%BC%B7%E4%BC%9A" label="勉強会"/><category scheme="https://yyh-gl.github.io/tech-blog/categories/%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3" term="%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3" label="セキュリティ"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">【Go同miniConf】Goの勉強会に参加してきた話</title><link href="https://yyh-gl.github.io/tech-blog/blog/godo_miniconf/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/id_token_and_access_token/?utm_source=atom_feed" rel="related" type="text/html" title="【OAuth 2.0 / OIDC】アクセストークンとIDトークンの違い ＋ OIDC誕生の歴史"/><link href="https://yyh-gl.github.io/tech-blog/blog/my_thinking_about_planning/?utm_source=atom_feed" rel="related" type="text/html" title="【徒然なるままに】サービス発案における主観と客観のバランスについて"/><link href="https://yyh-gl.github.io/tech-blog/blog/ogp/?utm_source=atom_feed" rel="related" type="text/html" title="【OGP】リンク先のサムネイル画像を表示できるようにした話"/><link href="https://yyh-gl.github.io/tech-blog/blog/blog_style_fix/?utm_source=atom_feed" rel="related" type="text/html" title="【HTML + CSS + Prism.js】ブログの見た目を整えた話"/><link href="https://yyh-gl.github.io/tech-blog/blog/mercari_go/?utm_source=atom_feed" rel="related" type="text/html" title="【mercari.go #8】メルカリのGoに関する勉強会メモ"/><id>https://yyh-gl.github.io/tech-blog/blog/godo_miniconf/</id><author><name>yyh-gl</name></author><published>2019-08-06T00:00:00+00:00</published><updated>2019-08-06T00:00:00+00:00</updated><content type="html"><![CDATA[<blockquote>CyberAgent ＆ merpay 主催のGo勉強会</blockquote><h1 id="概要">概要</h1>
<p>CyberAgent ＆ merpay が共催したGoのイベント</p>
<ul>
<li><a href="https://mercari.connpass.com/event/141047/" target="_blank" rel="noopener noreferrer">Connpass情報</a>
</li>
<li>ハッシュタグ：#godo_miniconf</li>
</ul>
<p>（写真撮るの忘れた…）</p>
<p>以下、発表まとめ</p>
<h1 id="1-マイクロサービスとmonorepo">1. マイクロサービスとMonoRepo</h1>
<ul>
<li>登壇者：江頭 宏亮さん（@_hiro511）</li>
<li><a href="https://speakerdeck.com/_hiro511/microservices-and-monorepo" target="_blank" rel="noopener noreferrer">発表スライド</a>
</li>
</ul>
<h2 id="リポジトリ管理について">リポジトリ管理について</h2>
<p>WinTicket というサービス開発・運用中</p>
<p><u>36個のマイクロサービスで動いている</u></p>
<ul>
<li>マルチリポジトリ：マイクロサービスごとにリポジトリが別れている</li>
<li>モノリポジトリ：ひとつのリポジトリ。WinTicket ではこっち</li>
</ul>
<h2 id="モノリポジトリ">モノリポジトリ</h2>
<ul>
<li>Google, FB, Tiwtter, Uberが採用</li>
<li>メリット
<ul>
<li>依存管理をシンプルにできる
<ul>
<li>マルチリポジトリの場合、複数のリポジトリに変更を加える必要があるし、変更を取り込むのが面倒</li>
<li>モノレポだとすべてのコードが一箇所にあるので変更が楽</li>
</ul>
</li>
<li>一貫性のある変更
<ul>
<li>複数のサービスにまたがる変更においても、アトミックなコミットが可能</li>
</ul>
</li>
<li>コードの共有と再利用が用意
<ul>
<li>common ディレクトリがあればできる</li>
</ul>
</li>
<li>大きなリファクタリングが容易</li>
</ul>
</li>
</ul>
<h2 id="ビルドとテストを効率良くしたいという">ビルドとテストを効率良くしたいという</h2>
<p><u>モノリポジトリだと、ビルドとテストに時間がかかる</u> ので、効率よくビルドとテストしたい</p>
<ul>
<li>Bazel（ベイゼル）：ビルド・テストツール
<ul>
<li>Go,  Andoroid, iOSなど様々な言語に対応</li>
<li>Googleが使っている（Googleの自社ツールがOSS化）</li>
<li>必要箇所だけビルド・テストする
<ul>
<li>速い</li>
</ul>
</li>
<li>スケーラブル</li>
<li>拡張可能
<ul>
<li>StarDarkという独自言語で設定定義</li>
</ul>
</li>
<li>WinTicketではDockerビルドもこれ</li>
</ul>
</li>
</ul>
<h2 id="go-with-bazel">Go with Bazel</h2>
<ol>
<li>Bazel のインストール by brew</li>
<li>WORKSPACEファイルの作成
<ul>
<li>外部の依存関係を記述</li>
</ul>
</li>
<li>BUILDファイルを作成
<ul>
<li>ビルド方法を示したもの</li>
<li>Gazzelを利用して自動生成可能</li>
</ul>
</li>
</ol>
<p>ディレクトリ構成例</p>
<pre><code>.
├BUILD.bazel
├WORKSPACE
└cmd
   └main.go
</code></pre>
<h2 id="gazzelは-go-modules-と-dep-に対応">Gazzelは Go Modules と dep に対応</h2>
<p>go.mod, Gopkg.lockファイルから依存パッケージを取りこみWORKSPACEファイルに書き込んでくれる</p>
<h2 id="protocol-bufferをgoコンパイル可能">Protocol BufferをGoコンパイル可能</h2>
<p>golang/protocolbufとgogoprotoに対応している</p>
<h2 id="ビルドアウトプットをリモートにキャッシュできる">ビルドアウトプットをリモートにキャッシュできる</h2>
<ul>
<li>開発者やCIなどでビルドアウトプットを共有できる
<ul>
<li>全員が高速なビルド体験を得られる</li>
</ul>
</li>
<li>キャッシュバックエンド
<ul>
<li>nginx</li>
<li>google cloud storage などなど</li>
</ul>
</li>
</ul>
<h1 id="go-modules-and-proxy-walkthrough">Go Modules and Proxy Walkthrough</h1>
<ul>
<li>登壇者：キタローさん（@ktr_0731）</li>
<li><a href="https://speakerdeck.com/ktr_0731/go-modules-and-proxy-walkthrough-515ee291-bab5-4eb0-861d-9b0c0ca0050b" target="_blank" rel="noopener noreferrer">発表スライド</a>
</li>
</ul>
<h2 id="go-modules-の特徴">Go modules の特徴</h2>
<ul>
<li>リポジトリのモジュール化</li>
<li>セマンティックバージョニング</li>
<li>go.modによる依存管理</li>
<li>go.sumによるチェックサムの管理
<ul>
<li>正しい（安全な）モジュールか確認できる</li>
</ul>
</li>
</ul>
<p>★ Go 1.13 でもautoがデフォルトのまま</p>
<p>ただし、src内でもgo.modがあればonになるようになる</p>
<h2 id="go-modules-有効時の-go-get-の挙動">Go Modules 有効時の go get の挙動</h2>
<ul>
<li>$GOPATH/src 配下にモジュールが配置されなくなる</li>
<li>go.modとgo.sumが書き換わる</li>
<li><code>go get -u=patch</code> とするとパッチを当てられる</li>
</ul>
<h2 id="go-modules-周辺ツール">Go Modules 周辺ツール</h2>
<p><a href="https://text.baldanders.info/release/2019/06/next-steps-toward-go-2/" target="_blank" rel="noopener noreferrer">追加資料</a>
</p>
<ul>
<li>Module Index
<ul>
<li>パブリックに利用可能なモジュールをクエリ検索できる</li>
</ul>
</li>
<li>Module Authentication
<ul>
<li>GOPATHに取得する go get は取得したモジュールを検証するすべがなかった</li>
<li>go modules で検証が可能になった</li>
</ul>
</li>
<li>Go checksum database（sumdb）
<ul>
<li>あらゆるモジュールのチェックサムを集約</li>
<li>モジュールの初回インストール時はチェックサムできないのを解決</li>
</ul>
</li>
<li>Module Mirrors
<ul>
<li>モジュールのコードやチェックサムのキャッシュを行う</li>
<li>特定のサーバの可用性やレイテンシに影響されるのを防ぐ</li>
<li>一度キャッシュされたものは基本的に削除されないので注意
<ul>
<li>突然のリポジトリ削除に対処するため（ex. go-bindata）</li>
</ul>
</li>
</ul>
</li>
<li>Module Proxy
<ul>
<li>Go 1.13 から go modules はproxyからモジュールを取得しにいくようになる</li>
<li>$GOPROCXY と $GOSUMDB で設定変更可能</li>
</ul>
</li>
</ul>
<h2 id="private-modules">Private Modules</h2>
<ul>
<li>github のプライベートリポジトリに proxy.golang.org はアクセスできない
<ul>
<li>セキュリティ的な問題からモジュール取得に失敗するとエラーとなる</li>
</ul>
</li>
<li>$GONNOPROXY を使えば解決可能
<ul>
<li>Go 1.13 からは、デフォルトで (link: <a href="http://proxy.golang.org" target="_blank" rel="noopener noreferrer">http://proxy.golang.org</a>
) proxy.golang.org 経由で依存を解決しにいく
<ul>
<li>プライベートリポジトリへのアクセスに失敗する</li>
<li>環境変数に GONOPROXY を設定して回避したらOK</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="パネルディスカッション">パネルディスカッション</h1>
<p>登壇者：</p>
<ul>
<li>
<p>とのもりさん（@osamingo）メルカリ</p>
</li>
<li>
<p>江頭さん（@_hiro511）サイバー</p>
</li>
<li>
<p>たかなみさん（@storz）メルペイ</p>
</li>
</ul>
<h1 id="プロダクト関連の話">プロダクト関連の話</h1>
<h2 id="テスト">テスト</h2>
<ul>
<li>WinTicket
<ul>
<li>クリーンアーキテクチャなので全部tesableな（interface）作りを意識</li>
<li>gomockというライブラリを使っている</li>
<li>codecov というカバレッジを可視化している
<ul>
<li>現在91%くらい</li>
</ul>
</li>
<li>testifyのassertを使っている
<ul>
<li>アサーション使わない問題は認識した上で選択</li>
</ul>
</li>
<li>どこが違うか知りたいときはgocmp を使っている</li>
</ul>
</li>
<li>メルペイ
<ul>
<li>gomockを使ってモッキング</li>
<li>codecov というカバレッジを可視化している</li>
<li>assertを使わず、gocmpという構造体の比較を行っている
<ul>
<li>testifyコントリビュータに聞くと madrier&hellip;? というライブラリをおすすめされた</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="ロギング">ロギング</h2>
<ul>
<li>WinTicket
<ul>
<li>zapを使っている</li>
<li>ログ収集はCloudLoggingを使っている
<ul>
<li>GCPのk8sを使っているから</li>
</ul>
</li>
<li>アクセスログはビッグクエリに流している</li>
</ul>
</li>
<li>メルペイ
<ul>
<li>zapを使っている</li>
<li>datadogに全て流している
<ul>
<li>お金かかるのでログを残すものの取捨選択をし始めている</li>
</ul>
</li>
<li>templateリポジトリがあってログとかの基盤系処理が容易されている</li>
<li>アクセスログはビッグクエリに流している</li>
</ul>
</li>
</ul>
<h2 id="repositorypackage戦略">repository/package戦略</h2>
<ul>
<li>WinTicket
<ul>
<li>kubernetesのリポジトリ構成を参考にしている
<ul>
<li>/pkg 配下にマイクロサービスごとにディレクトリが切られている
<ul>
<li>各マイクロサービスはクリーンアーキテクチャ</li>
<li>一般的なクリーンアーキテクチャ</li>
</ul>
</li>
<li>/cmd 配下にマイクロサービスごとにmain.go と bin が入ってる</li>
</ul>
</li>
</ul>
</li>
<li>メルペイ
<ul>
<li>マイクロサービスごとにリポジトリを分けている</li>
<li>ディレクトリ構成はマイクロサービス（チーム）ごとに別れている
<ul>
<li>主流はクリーンアーキテクチャ</li>
<li>フラットにパッケージを切るのも主流
<ul>
<li>ドメインごとに切っている</li>
<li>人によってパッケージの切り方が異なってくるので、統一するために、最近はクリーンアーキテクチャを採用することが増えている</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="エディタ">エディタ</h2>
<ul>
<li>
<p>WinTicket</p>
<ul>
<li>IntelliJ</li>
</ul>
</li>
<li>
<p>メルペイ</p>
<ul>
<li>GoLand</li>
<li>Vim</li>
<li>Emacs</li>
</ul>
</li>
</ul>
<p>acme（russが使ってるやつ）はいないｗ</p>
<h2 id="go-modules-は使っているか">go modules は使っているか</h2>
<ul>
<li>
<p>WinTicket</p>
<ul>
<li>dep使用</li>
</ul>
</li>
<li>
<p>メルペイ</p>
<ul>
<li>昔ながらのやつはdep</li>
<li>最近のはmodules</li>
</ul>
</li>
</ul>
<h1 id="エンジニアの育成について">エンジニアの育成について</h1>
<h2 id="育成どうしてます">育成どうしてます？</h2>
<ul>
<li>
<p>WinTicket</p>
<ul>
<li>ディベロッパーガイドラインを作っており、クリーンアーキテクチャとかについてかっちりとルールを決めている
<ul>
<li>プロジェクトにおける、クリーンアーキテクチャの各層ごとの役割が明文化されている</li>
</ul>
</li>
<li>モノレポなので結構人によってズレがでないようなパッケージ構成になっている</li>
<li>指摘とかはみんながちゃんと言えるような環境づくりをしている（心理的安全性が高い環境）</li>
</ul>
</li>
<li>
<p>メルペイ</p>
<ul>
<li>tentenさんのGopher道場で実力をつけていってる</li>
<li>明文化されているガイドラインはない
<ul>
<li>各マイクロサービスのリポジトリを見て盗むのが主流</li>
</ul>
</li>
<li>アーキテクトチームがあり、マイクロサービスの基本的な考え方を指導している</li>
<li><a href="https://github.com/kaiinui/note/blob/master/Design--Designdoc.md" target="_blank" rel="noopener noreferrer">Design Doc</a>
 を導入しており、他のチームからレビューしてもらえる環境を作っている</li>
</ul>
</li>
</ul>
<h2 id="webエンジニアの採用">Webエンジニアの採用</h2>
<ul>
<li>メルペイ
<ul>
<li>技術試験のコードを自動採点する仕組みがある</li>
</ul>
</li>
</ul>
<h2 id="新卒教育">新卒教育</h2>
<ul>
<li>
<p>サイバー</p>
<ul>
<li>現場に入って学ぶ（OJT）</li>
</ul>
</li>
<li>
<p>メルカリ</p>
<ul>
<li>tentenさんのGopher道場
<ul>
<li>（いいなぁ）</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/go" term="go" label="Go"/><category scheme="https://yyh-gl.github.io/tech-blog/categories/%E5%8B%89%E5%BC%B7%E4%BC%9A" term="%E5%8B%89%E5%BC%B7%E4%BC%9A" label="勉強会"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">【OAuth 2.0 / OIDC】アクセストークンとIDトークンの違い ＋ OIDC誕生の歴史</title><link href="https://yyh-gl.github.io/tech-blog/blog/id_token_and_access_token/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/my_thinking_about_planning/?utm_source=atom_feed" rel="related" type="text/html" title="【徒然なるままに】サービス発案における主観と客観のバランスについて"/><link href="https://yyh-gl.github.io/tech-blog/blog/ogp/?utm_source=atom_feed" rel="related" type="text/html" title="【OGP】リンク先のサムネイル画像を表示できるようにした話"/><link href="https://yyh-gl.github.io/tech-blog/blog/blog_style_fix/?utm_source=atom_feed" rel="related" type="text/html" title="【HTML + CSS + Prism.js】ブログの見た目を整えた話"/><link href="https://yyh-gl.github.io/tech-blog/blog/mercari_go/?utm_source=atom_feed" rel="related" type="text/html" title="【mercari.go #8】メルカリのGoに関する勉強会メモ"/><link href="https://yyh-gl.github.io/tech-blog/blog/go_web_api/?utm_source=atom_feed" rel="related" type="text/html" title="【Go + レイヤードアーキテクチャー】DDDを意識してWeb APIを実装してみる"/><id>https://yyh-gl.github.io/tech-blog/blog/id_token_and_access_token/</id><author><name>yyh-gl</name></author><published>2019-06-19T00:00:00+00:00</published><updated>2019-06-19T00:00:00+00:00</updated><content type="html"><![CDATA[<h1 id="はじめに">はじめに</h1>
<p>Web API のセキュリティ周りについて調べていると、<br>
「OAuth 2.0」や「OpenID Connect」という単語をよく見かけると思います。</p>
<p>さらに調べると、「アクセストークン」と「IDトークン」という単語に出会いました。</p>
<br>
<p>しかし、この2つのトークンの違いについて、<br>
いまいち理解ができていなかったので、今回は両者の違いを調べてみました。</p>
<p>加えて、トークンについて調べる中で、<br>
OpenID Connectが生まれた経緯も知ることができたのでメモしておきます。</p>
<h1 id="2つのトークンの違い">2つのトークンの違い</h1>
<p>アクセストークン と IDトークン、両者は役割が大きく異なります。</p>
<ul>
<li>アクセストークン：認可（リソースへのアクセスコントロール＝あるリソースへの権限（readやwriteなど）を持っているかどうか確認すること）</li>
<li>IDトークン：認証（その人が誰かを確認すること）</li>
</ul>
<p>名前のままでした。</p>
<p>認可に使うためのいろいろな情報が詰まっているのがアクセストークンで、
認証に使うためのいろいろな情報が詰まっているのがIDトークンです。</p>
<h1 id="openid-connectが生まれた経緯">OpenID Connectが生まれた経緯</h1>
<p>OAuth 2.0およびOpenID Connectについて調べていると、<br>
「OpenID Connect は OAuth 2.0 を拡張した仕様」であるという記述を見かけました。</p>
<p>どうしてOpenID Connectが必要になったのか、<br>
この辺の経緯について述べていきます。</p>
<h1 id="oauth-20-は-認可-の仕組み">OAuth 2.0 は 認可 の仕組み</h1>
<p>まずは、OAuth 2.0について見ていきます。</p>
<br>
<p><u>OAuth 2.0 は 認可 の仕組みであり、 認証 の仕組みではない</u><br>
のですが、実際にはOAuth 2.0を認証用途で使っているシステムは多く存在します。</p>
<p>OAuth 2.0 で認証を行うことの問題点については、<br>
<a href="https://www.sakimura.org/2012/02/1487/" target="_blank" rel="noopener noreferrer">こちら</a>
 の記事に詳しく書いてあります。</p>
<p>上記記事より、OAuth 2.0 による認証の問題点は、<br>
<u>クライアント（アプリケーション）側でトークンの正当性を確かめる術がない</u> ことであるとわかります。</p>
<p>なお、ここでいう「正当性」に関して補足しておくと、<br>
「正当なトークン」とは、クライントが受け取ったトークンがそのクライアントのために用意されたものであることを意味します。</p>
<p>つまり、クライアント側でトークンの正当性を確かめる術がない＝クライアントが自身のためのトークンであることを検証する術がないという意味です。<br>
（トークンの改ざん検知うんぬんの話ではありませんのでご注意ください）</p>
<blockquote>
<p>「OAuth 2.0 による認証の問題点」という言葉を使っていますが、先述のとおりOAuth 2.0は認可のための仕組みなので、厳密には「認証の問題」なんて存在しません。
説明しやすくするためにこういった言葉を使っています。</p>
</blockquote>
<h1 id="クライアント側でトークンの正当性を確かめたい">クライアント側でトークンの正当性を確かめたい</h1>
<p><u>OAuth 2.0 による認証の問題は OpenID Connect に則ることで解決できます。</u></p>
<p>では、どうして OpenID Connect を使うと安全に認証できるようになるのでしょうか。<br>
キーとなるのは IDトークン に含まれる <u>audクレーム</u> です。</p>
<h1 id="audクレーム">audクレーム</h1>
<p>audクレーム は IDトークン に含まれるデータのひとつです。<br>
（「クレーム」はJSONにおける「キー」とほぼ同義だと思ってください）</p>
<p>では、この audクレーム がどういった情報を持っているかと言うと、<br>
<u>そのトークンがどのクライアントのために発行されたものか</u> という情報です。</p>
<br>
<p>したがって、audクレームを使用することで、<br>
クライアントは自身のためのトークンかどうか調べることが可能です。</p>
<p>この「クライアント側で audクレーム のチェックを行う」ことは仕様として決められています。</u>（<a href="https://tools.ietf.org/html/rfc7519#section-4.1.3" target="_blank" rel="noopener noreferrer">参考</a>
）</p>
<br>
<p>このような仕組み（ルール）があるから、<br>
OpenID ConnectでOAuth 2.0 による認証の問題を解決できるわけですね。なるほど</p>
<h1 id="まとめ">まとめ</h1>
<ul>
<li>アクセストークンは認可、IDトークンは認証に使うもの</li>
<li>認証がしたいなら OpenID Connect を使いましょう</li>
</ul>
<br>
<p>今回の内容は、自分が調べたことをだいぶざっくりメモした程度のものです。<br>
下記に参考記事を載せておくので、詳細はそちらを御覧ください。</p>
<h1 id="参考">参考</h1>
<ul>
<li><a href="https://tools.ietf.org/html/rfc6749" target="_blank" rel="noopener noreferrer">OAuth 2.0 仕様</a>
</li>
<li><a href="https://openid-foundation-japan.github.io/openid-connect-core-1_0.ja.html" target="_blank" rel="noopener noreferrer">OpenID Connect 仕様</a>
</li>
<li><a href="https://qiita.com/TakahikoKawasaki/items/f2a0d25a4f05790b3baa" target="_blank" rel="noopener noreferrer">OAuth 2.0 &#43; OpenID Connect のフルスクラッチ実装者が知見を語る（@TakahikoKawasaki さん）</a>
</li>
<li><a href="https://qiita.com/TakahikoKawasaki/items/8f0e422c7edd2d220e06" target="_blank" rel="noopener noreferrer">IDトークンが分かれば OpenID Connect が分かる（@TakahikoKawasaki さん）</a>
</li>
<li><a href="https://qiita.com/wadahiro/items/ad36c7932c6627149873" target="_blank" rel="noopener noreferrer">OAuth 2.0/OpenID Connectの2つのトークンの使いみち（@wadahiro さん）</a>
</li>
<li><a href="https://www.sakimura.org/2012/02/1487/" target="_blank" rel="noopener noreferrer">単なる OAuth 2.0 を認証に使うと、車が通れるほどのどでかいセキュリティー・ホールができる（Nat Sakimura さん）</a>
</li>
</ul>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/web-api" term="web-api" label="Web API"/><category scheme="https://yyh-gl.github.io/tech-blog/categories/%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3" term="%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3" label="セキュリティ"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">【徒然なるままに】サービス発案における主観と客観のバランスについて</title><link href="https://yyh-gl.github.io/tech-blog/blog/my_thinking_about_planning/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/ogp/?utm_source=atom_feed" rel="related" type="text/html" title="【OGP】リンク先のサムネイル画像を表示できるようにした話"/><link href="https://yyh-gl.github.io/tech-blog/blog/blog_style_fix/?utm_source=atom_feed" rel="related" type="text/html" title="【HTML + CSS + Prism.js】ブログの見た目を整えた話"/><link href="https://yyh-gl.github.io/tech-blog/blog/mercari_go/?utm_source=atom_feed" rel="related" type="text/html" title="【mercari.go #8】メルカリのGoに関する勉強会メモ"/><link href="https://yyh-gl.github.io/tech-blog/blog/go_web_api/?utm_source=atom_feed" rel="related" type="text/html" title="【Go + レイヤードアーキテクチャー】DDDを意識してWeb APIを実装してみる"/><link href="https://yyh-gl.github.io/tech-blog/blog/gopath/?utm_source=atom_feed" rel="related" type="text/html" title="【goenv】GOPATH が変わらないときの対処法"/><id>https://yyh-gl.github.io/tech-blog/blog/my_thinking_about_planning/</id><author><name>yyh-gl</name></author><published>2019-06-18T00:00:00+00:00</published><updated>2019-06-18T00:00:00+00:00</updated><content type="html"><![CDATA[<blockquote>サービス発案って難しい…</blockquote><h1 id="研修での-サービス発案-をやった">研修での サービス発案 をやった</h1>
<p>新卒研修で サービス発案 について学び、実際に</p>
<ul>
<li>問題提議</li>
<li>ソリューション検討</li>
<li>サービスに落とし込む</li>
</ul>
<p>など、チームで作業しました。<br>
（今回考えたサービスを、今後チームで開発していきます）</p>
<br>
そして、一日考えたサービスをターゲット層となる人たちに <br>
「こんなサービスどうですか？あったら欲しいですか？」といったアンケートを行いました。
<br>
<p><u>返ってきた答えは「欲しくない」 が過半数でした</u>。</p>
<h1 id="そのとき僕たちは">そのとき僕たちは</h1>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/06/my_thinking_about_planning/sad.png" width="400">
<p>正直、意気消沈しました。</p>
<br>
<p>ただ、こういう結果になった原因は明白でした。</p>
<p>なぜかというと、この時、チーム内から多く出た声が</p>
<p>「必死に考えたサービスだったのに」<br>
「絶対欲しいでしょこれ」<br>
「俺は欲しい」</p>
<p>といった内容だったからです。</p>
<br>
<p>ハッカソンでもあるあるですよね。<br>
自分たちが考えたサービスに愛着が出てきて、<u>客観性がなくなっている状態</u>。</p>
<p>そうです。僕たちは客観的になれていなかったんです。<br></p>
<h1 id="それでもめげずに僕たちは動いた">それでもめげずに僕たちは動いた</h1>
<p>めそめそしていても仕方ないので、僕たちはアンケートを答えてくれた人に <br>
話を聞きに行ってみることにしました。</p>
<p>この行動が大正解でした。</p>
<br>
<p>チーム外の人の話を聞くと、どういったところがだめだったのかが見えてきました。<br>
加えて、 <u>自分たちもサービスを客観視することができるようになり、<br>他にもだめなところが見えてきました。<br></u></p>
<br>
<p>後、意外だったのですが、自分たちが特にどこに力を入れていて、<br>
どういった解決方法を取ろうとしているのか、熱量を持って伝えると、<br>
相手方が理解して、共感・納得してくれることがありました。</p>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/06/my_thinking_about_planning/talking.png" width="400">
<h1 id="つまり">つまり…</h1>
<p>サービスを提案する上で、第一に大事なのは <u>客観性</u> だと感じました。</p>
<p>自分たちがどれだけいいものだと思っても、<br>
他の人々がいらないと言ったら、そのサービスは世の中には受け入れられません。</p>
<p>つまり、客観的に見る ＝ 世の人々がなにに課題を感じているのか調査し、<br>
ソリューションを提供していくことが大事です。</p>
<br>
<p>しかしながら、さきほど言ったとおり、</p>
<blockquote>
<p>熱量を持って伝えると、相手方が理解して、共感・納得してくれることもありました。</p>
</blockquote>
<p>こういうケースもあります。</p>
<p>これは、多少主観的でも論理的に正しいことを熱量持って伝えることで、<br>
世の人々がまだ気づいていない課題に気づき、提案サービスの必要性を感じてもらえた瞬間だと思います。</p>
<p>ただ、相手にサービスの良さを気づいてもらうには、<br>
サービスに対する絶対的自信（主観）がないと難しいですよね。<br></p>
<p>すなわち、主観 も大事ってことですね。</p>
<h1 id="主観と客観のバランスが難しい">主観と客観のバランスが難しい</h1>
<p>ここまでの内容をまとめると <br>
僕は「サービス発案において、主観 と 客観 どちらも大事」という結論に落ちつきました。</p>
<p>でも、主観と客観のバランスってめちゃくちゃ難しくないですか？</p>
<p>主観的意見もある程度は受け入れてもらえるんです。<br>
そして、そこがそのサービスのユニークな機能になると思います。</p>
<p>しかし、主観的意見が多くなりすぎると、誰にも求められないサービスができあがってしまう。</p>
<br>
<p>いかに、この 主観 と 客観 を両立するのか。<br>
まだまだ サービス発案 について学ぶことは多いと感じました。</p>
<h1 id="徒然なるまま-すぎた">徒然なるまま …すぎた</h1>
<p>研修で感じたことを書きなぐっただけなので、<br>
論理的に破綻していることろ、一般論的に間違っているところ、多々あると思います。</p>
<p>でも、今はとにかく思ったことを間違っていてもいいからアウトプットしておき、<br>
数年後見たときにどう感じるのか知りたいと思いました。だから、書きました。</p>
<p>// TODO: 数年後の自分よ、続編記事をちゃんと書くように</p>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/%E3%83%9D%E3%82%A8%E3%83%A0" term="%E3%83%9D%E3%82%A8%E3%83%A0" label="ポエム"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">【OGP】リンク先のサムネイル画像を表示できるようにした話</title><link href="https://yyh-gl.github.io/tech-blog/blog/ogp/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/blog_style_fix/?utm_source=atom_feed" rel="related" type="text/html" title="【HTML + CSS + Prism.js】ブログの見た目を整えた話"/><link href="https://yyh-gl.github.io/tech-blog/blog/mercari_go/?utm_source=atom_feed" rel="related" type="text/html" title="【mercari.go #8】メルカリのGoに関する勉強会メモ"/><link href="https://yyh-gl.github.io/tech-blog/blog/go_web_api/?utm_source=atom_feed" rel="related" type="text/html" title="【Go + レイヤードアーキテクチャー】DDDを意識してWeb APIを実装してみる"/><link href="https://yyh-gl.github.io/tech-blog/blog/gopath/?utm_source=atom_feed" rel="related" type="text/html" title="【goenv】GOPATH が変わらないときの対処法"/><link href="https://yyh-gl.github.io/tech-blog/blog/evans_ddd_1/?utm_source=atom_feed" rel="related" type="text/html" title="【エリック・エヴァンスのドメイン駆動設計】DDD入門 Part 1"/><id>https://yyh-gl.github.io/tech-blog/blog/ogp/</id><author><name>yyh-gl</name></author><published>2019-06-17T00:00:00+00:00</published><updated>2019-06-17T00:00:00+00:00</updated><content type="html"><![CDATA[<blockquote>OGP大事</blockquote><h1 id="twitter-のリンクにサムネイル画像が表示されない">Twitter のリンクにサムネイル画像が表示されない</h1>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/06/ogp/before.png" width="600">
<p>このように Twitter でブログのリンクを載せても、サムネイルが表示されない。</p>
<p>はてなブログをやっていたときは、何もしなくてもサムネイルが表示されていました。</p>
<p>トップ画像をよしなにサムネイルにしてくれるのかなぁっと思っていましたが違ったんですね…。</p>
<h1 id="どうやったらサムネイル画像が表示されるか">どうやったらサムネイル画像が表示されるか</h1>
<p>Twitter や Facebook などの SNS でタイトルやサムネイルといったWebページの情報を表示するには、<br>
<u>Open Graph Protocol（OGP）</u> というものを設定する必要があります。</p>
<p>OGP を設定するだけで、Twitter や Facebook でサムネイル付きのリンクを表示することができます。</p>
<p><a href="https://digitalidentity.co.jp/blog/seo/ogp-share-setting.html" target="_blank" rel="noopener noreferrer">こちらのサイト</a>
 で詳細が説明されています。</p>
<h1 id="ogp-の設定">OGP の設定</h1>
<p>OGP の設定項目には以下のものがあります。</p>
<ul>
<li>og:title</li>
<li>og:type</li>
<li>og:url</li>
<li>og:description</li>
<li>og:image</li>
</ul>
<p>これらを HTML に meta タグで埋め込めば OK です。</p>
<pre><code class="language-html">&lt;meta property=&quot;og:title&quot; content=&quot;【Go + レイヤードアーキテクチャー】DDDを意識してWeb APIを実装してみる&quot;&gt;
&lt;meta property=&quot;og:type&quot; content=&quot;article&quot;&gt;
&lt;meta property=&quot;og:url&quot; content=&quot;https://yyh-gl.github.io/tech-blog/blog/go_web_api/&quot;&gt;
&lt;meta property=&quot;og:description&quot; content=&quot;hoge&quot;&gt;
&lt;meta property=&quot;og:image&quot; content=&quot;https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/06/go_web_api/featured.png&quot;&gt;
</code></pre>
<p>こんな感じですね。<br>
これを head タグ内に埋め込みます。</p>
<p>ただし、僕の場合、Hugo のテーマの方で、 og:image 以外は設定してくれていました。<br>
したがって、今回は og:image を追加で設定しました。</p>
<h2 id="ogimage-の設定">og:image の設定</h2>
<p>下記のような og:image の設定を <code>/themes/&lt;your-theme-name&gt;/layouts/partials/meta.html</code> に追加しました。</p>
<pre><code class="language-html">&lt;meta property=&quot;og:image&quot; content=&quot;｛｛ .Site.BaseURL ｝｝｛｛ if .Params.featured ｝｝img｛｛ .Page.Date.Format &quot;2006/01&quot; | relURL ｝｝/｛｛ .Params.featured ｝｝｛｛ else ｝｝｛｛ .Site.Params.intro.ogp.src ｝｝｛｛ end ｝｝&quot; /&gt;
</code></pre>
<p>なにやら長たらしく定義していますが、やっていることをまとめると、<br></p>
<ul>
<li>featured画像（各記事ごとのサムネイル画像）が設定されていれば それを使用</li>
<li>featured画像が設定されていなければ、デフォルトの OGP 用画像を使用</li>
</ul>
<p>以上のことをしています。</p>
<h2 id="おまけtoml-による定数定義">【おまけ】toml による定数定義</h2>
<p>og:image を定義するさいに <code>.Site.Params.intro.ogp.src</code> こんなのを使っています。<br>
これは展開されると OGP 用画像のパスになるわけですが、そのパスをどうやって定義しているかというと…</p>
<p><code>/&lt;your-blog-root&gt;/confi.toml</code> に以下のように設定を記述すれば使えるようになります。</p>
<pre><code class="language-toml">[params.intro]
    header                = &quot;yyh-gl's Tech Blog&quot;
    paragraph             = &quot;技術系ネタ中心のブログです。サーバサイドをメインとしたフルスタックエンジニアを目指しています。&quot;
    rssIntro              = true
    socialIntro           = true
    
    &lt; 一部省略 &gt;

    [params.intro.ogp]
      src = &quot;img/main/ogp_image.png&quot;
      alt = &quot;yyh-gl's image for OGP&quot;
</code></pre>
<p>9 〜 11 行目が OGP 用のデフォルト画像を設定しているところです。</p>
<h1 id="結果">結果</h1>
<p>OGP が正しく設定できているかは 以下のサイトを使って確かめることが可能です。</p>
<ul>
<li><a href="https://cards-dev.twitter.com/validator" target="_blank" rel="noopener noreferrer">Card validator（Twitter）</a>
</li>
<li><a href="https://developers.facebook.com/tools/debug/" target="_blank" rel="noopener noreferrer">シェアデバッガー（Facebook）</a>
</li>
</ul>
<p>僕は Twitter にしか共有する気がなかったので、 Card validator を使用してデバッグしました。</p>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/06/ogp/debug.png" width="600">
<p>こんな感じで確かめることができます。</p>
<br>
<p>最後に、Twitter 上でどのように表示されているか確認します。</p>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/06/ogp/after.png" width="600">
<p>少しサイズがずれちゃっていますが、ちゃんと表示できていますね👍</p>
<h1 id="感想">感想</h1>
<p>はてなブログを見に行ってみたら、 OGP 用の設定がされていました。<br>
裏で設定してくれていたんですね。</p>
<p>OGP という仕組みを知れてよかったです。</p>
<blockquote class="twitter-tweet" data-lang="ja"><p lang="ja" dir="ltr">リンクのサムネイル出るようになったで🤡<a href="https://t.co/OGXRRGonKc">https://t.co/OGXRRGonKc</a></p>&mdash; ｴﾝｼﾞﾆｱのﾎｹﾞさん 🌕 (@yyh_gl) <a href="https://twitter.com/yyh_gl/status/1140245493844307969?ref_src=twsrc%5Etfw">2019年6月16日</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/web%E5%85%A8%E8%88%AC" term="web%E5%85%A8%E8%88%AC" label="Web全般"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">【HTML + CSS + Prism.js】ブログの見た目を整えた話</title><link href="https://yyh-gl.github.io/tech-blog/blog/blog_style_fix/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/mercari_go/?utm_source=atom_feed" rel="related" type="text/html" title="【mercari.go #8】メルカリのGoに関する勉強会メモ"/><link href="https://yyh-gl.github.io/tech-blog/blog/go_web_api/?utm_source=atom_feed" rel="related" type="text/html" title="【Go + レイヤードアーキテクチャー】DDDを意識してWeb APIを実装してみる"/><link href="https://yyh-gl.github.io/tech-blog/blog/gopath/?utm_source=atom_feed" rel="related" type="text/html" title="【goenv】GOPATH が変わらないときの対処法"/><link href="https://yyh-gl.github.io/tech-blog/blog/evans_ddd_1/?utm_source=atom_feed" rel="related" type="text/html" title="【エリック・エヴァンスのドメイン駆動設計】DDD入門 Part 1"/><link href="https://yyh-gl.github.io/tech-blog/blog/bigdata_processing/?utm_source=atom_feed" rel="related" type="text/html" title="【大規模サービス技術入門 5章】大規模データの処理方法についてまとめた"/><id>https://yyh-gl.github.io/tech-blog/blog/blog_style_fix/</id><author><name>yyh-gl</name></author><published>2019-06-16T00:00:00+00:00</published><updated>2019-06-16T00:00:00+00:00</updated><content type="html"><![CDATA[<h1 id="シンタックスハイライト導入">シンタックスハイライト導入</h1>
<p>このブログ、ちょっと前までコードのシンタックスハイライトが効いていませんでした。</p>
<p>正確には対応していない言語が（めちゃくちゃ）ありました。</p>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/06/blog_style_fix/syntax_highlight_before.png" width="600">
<p>このとおり、 Goにも対応していませんでした…。</p>
<br>
<p>もともと、このブログのテーマは <a href="https://themes.gohugo.io/" target="_blank" rel="noopener noreferrer">Hugo Themes</a>
（Hugo 公式 テーマショップ的なの）に <br>
あったものを使わせてもらっているのですが、さすがに対応していない言語が多すぎたので、<br>
シンタックスハイライト部分だけ個別に導入することにしました。</p>
<h1 id="prismjs">Prism.js</h1>
<p>さっそく、「HTML シンタックスハイライト」で調べてみました。</p>
<p>そしたら、だいたい以下の3つが出てきました。</p>
<ul>
<li><a href="https://prismjs.com/" target="_blank" rel="noopener noreferrer">Prism.js</a>
</li>
<li><a href="https://highlightjs.org/" target="_blank" rel="noopener noreferrer">highlight.js</a>
</li>
<li><a href="https://github.com/google/code-prettify" target="_blank" rel="noopener noreferrer">Google code-prettify</a>
</li>
</ul>
<p>どれにしようか迷ったのですが、見た目が一番好みだった Prism.js を使うことにしました。</p>
<h2 id="導入">導入</h2>
<p>導入方法については記事がたくさんあるので、そちらをご覧ください。</p>
<ul>
<li><a href="https://prismjs.com/download.html#themes=prism&amp;languages=markup&#43;css&#43;clike&#43;javascript" target="_blank" rel="noopener noreferrer">公式ダウンロードページ</a>
</li>
<li><a href="https://mndangler.net/2017/04/syntaxhighlighter_prism-js/" target="_blank" rel="noopener noreferrer">導入 参考記事</a>
</li>
<li><a href="https://thk.kanzae.net/net/wordpress/t1171/" target="_blank" rel="noopener noreferrer">導入 参考記事</a>
</li>
<li><a href="https://niwaka-web.com/prism_js/" target="_blank" rel="noopener noreferrer">導入 参考記事</a>
</li>
</ul>
<h2 id="導入後">導入後</h2>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/06/blog_style_fix/syntax_highlight_after.png" width="600">
<p>きれいですねー</p>
<p>今回導入した Prism.js のプラグインは、</p>
<ul>
<li>Line Highlight：行指定した箇所をハイライトする機能（上記画像内では使用していません）</li>
<li>Line Numbers：行番号を表示する機能</li>
<li>Show Language：右上に 言語名 を表示している機能</li>
</ul>
<p>の3つです。</p>
<h1 id="困ったこと">困ったこと</h1>
<h2 id="行番号が表示されない">行番号が表示されない</h2>
<p>行番号を表示するには、</p>
<pre><code class="language-html">&lt;pre class=&quot;line-numbers&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;
  コード
&lt;/code&gt;&lt;/pre&gt;
</code></pre>
<p>上記コードのように、表示するコードスニペットに対して、<br>
line-numbers というクラスを付与してあげるだけでOKです。</p>
<p>…が、なぜか行番号が他の要素の下にいってしまい、見えなくなっていました。<br>
したがって、prism.css を修正して行番号が他の要素の上に来るようにしました。</p>
<h2 id="リスト表示の行間が異様に広い">リスト表示の行間が異様に広い</h2>
<p>Prism.js 導入後…</p>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/06/blog_style_fix/li_incorrect.png" width="600">
<p>このようになぜか リスト表示（箇条書き）の行間が異様に広くなり、文字が折り返されずはみ出ています。</p>
<p>まさかと思い、prism.css を無効にすると…</p>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/06/blog_style_fix/li_correct.png" width="600">
<p>直った！</p>
<p>ということで、なにかしらのスタイルが悪さをしている模様。</p>
<p>しかし、これは僕が手抜きで、</p>
<pre><code class="language-html">&lt;pre class=&quot;line-numbers&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;
  コード
&lt;/code&gt;&lt;/pre&gt;
</code></pre>
<p>のコードを、コードスニペット部分だけじゃなく、記事全体に対して適用していたため発生していました。<br>
（手抜いて本当にごめんなさい。悪気はなかったんです。）</p>
<br>
<p>しかしながら、記事のコンテンツに関する HTML は Hugo が自動生成してくれるため、<br>
中身をさわることができない模様…。</p>
<p>どうしようと困っているときに、<a href="https://qiita.com/peaceiris/items/8b7fdbb700f6dd355f99#%E7%BD%AE%E6%8F%9B%E6%96%B9%E6%B3%95" target="_blank" rel="noopener noreferrer">こちら</a>
 の記事を発見。</p>
<p>これで生成された HTML 内の要素を置換できます。</p>
<p>最終的には、 <code>content-single.html</code> を以下のとおり修正しました。</p>
<pre><code class="language-html">&lt;article class=&quot;post&quot;&gt;
  ｛｛ .Render &quot;header&quot; ｝｝
  &lt;section id=&quot;social-share&quot;&gt;
    ｛｛ partial &quot;share-buttons&quot; . ｝｝
  &lt;/section&gt;
  ｛｛ .Render &quot;featured&quot; ｝｝
  &lt;div class=&quot;content&quot;&gt;
    ｛｛ .Content | replaceRE &quot;&lt;pre&gt;&quot; &quot;&lt;pre class=\&quot;line-numbers\&quot;&gt;&quot; | safeHTML ｝｝
  &lt;/div&gt;
  &lt;footer&gt;
    ｛｛ .Render &quot;stats&quot; ｝｝
  &lt;/footer&gt;
&lt;/article&gt;
</code></pre>
<p>修正したのは 8行目部分です。</p>
<pre><code class="language-html">｛｛ .Content ｝｝
</code></pre>
<p>だけだった部分を</p>
<pre><code class="language-html">｛｛ .Content | replaceRE &quot;&lt;pre&gt;&quot; &quot;&lt;pre class=\&quot;line-numbers\&quot;&gt;&quot; | safeHTML ｝｝
</code></pre>
<p>こうすることで、 コードスニペット部分だけに line-numbers を適用することができました。</p>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/06/blog_style_fix/li_after.png" width="600">
<p>行間もシンタックスハイライト&amp;行番号 もいい具合に表示できています。</p>
<h1 id="まとめ">まとめ</h1>
<p>Prism.js いいですね！</p>
<p>フロントに疎い僕でも簡単にシンタックスハイライト対応ができました。</p>
<p>フロントの勉強もどんどんやっていきます。</p>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/html/css" term="html/css" label="HTML/CSS"/><category scheme="https://yyh-gl.github.io/tech-blog/categories/web%E5%85%A8%E8%88%AC" term="web%E5%85%A8%E8%88%AC" label="Web全般"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">【mercari.go #8】メルカリのGoに関する勉強会メモ</title><link href="https://yyh-gl.github.io/tech-blog/blog/mercari_go/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/go_web_api/?utm_source=atom_feed" rel="related" type="text/html" title="【Go + レイヤードアーキテクチャー】DDDを意識してWeb APIを実装してみる"/><link href="https://yyh-gl.github.io/tech-blog/blog/gopath/?utm_source=atom_feed" rel="related" type="text/html" title="【goenv】GOPATH が変わらないときの対処法"/><link href="https://yyh-gl.github.io/tech-blog/blog/evans_ddd_1/?utm_source=atom_feed" rel="related" type="text/html" title="【エリック・エヴァンスのドメイン駆動設計】DDD入門 Part 1"/><link href="https://yyh-gl.github.io/tech-blog/blog/bigdata_processing/?utm_source=atom_feed" rel="related" type="text/html" title="【大規模サービス技術入門 5章】大規模データの処理方法についてまとめた"/><link href="https://yyh-gl.github.io/tech-blog/blog/good_api/?utm_source=atom_feed" rel="related" type="text/html" title="【Web API（Rails） + Vue.js】ブログのいいねボタン自作してみた"/><id>https://yyh-gl.github.io/tech-blog/blog/mercari_go/</id><author><name>yyh-gl</name></author><published>2019-06-15T00:00:00+00:00</published><updated>2019-06-15T00:00:00+00:00</updated><content type="html"><![CDATA[<h1 id="mercarigo-8">mercari.go #8</h1>
<ul>
<li>connpass： <a href="https://mercari.connpass.com/event/132114/?utm_campaign=event_message_to_selected_participant&amp;utm_source=notifications&amp;utm_medium=email&amp;utm_content=title_link" target="_blank" rel="noopener noreferrer">リンク</a>
</li>
<li>ハッシュタグ： <a href="https://twitter.com/search?q=%23mercarigo&amp;src=typd&amp;lang=ja" target="_blank" rel="noopener noreferrer">&lt;code&gt;#mercarigo&lt;/code&gt;</a>
</li>
<li>独自ルール： <a href="https://twitter.com/zaki_hmkc/status/1139481689300713472" target="_blank" rel="noopener noreferrer">懇親会のGルール</a>
 <br>
懇親会のときに登壇者を囲んでもいいけど、自分たち以外にもう一人入ってこれるスペースを常に開けておこうねっていうルール。とてもよい！</li>
<li>雰囲気</li>
</ul>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/06/mercari_go/goods.JPG" height="300">
<p>ビール以外にもおいしそうなご飯もありましたが、写真を撮るの忘れ…</p>
<br>
<p>以降、自分用のメモを書き連ねます。<br>
詳細はスライドの方をご覧ください。</p>
<h1 id="1-goで学ぶknative">1. Goで学ぶKnative</h1>
<p>登壇者： @toshi0607 さん</p>
<p><a href="https://speakerdeck.com/toshi0607/learning-knative-with-go" target="_blank" rel="noopener noreferrer">スライドリンク</a>
</p>
<h2 id="knativehttpscloudgooglecomknativehlja"><a href="https://cloud.google.com/knative/?hl=ja" target="_blank" rel="noopener noreferrer">Knative</a>
</h2>
<ul>
<li>Knative ＝ 最新のサーバーレス ワークロードをビルド、デプロイ、管理できる Kubernetes ベースのプラットフォーム
<ul>
<li>AWS の Lmabda に近いことを k8s 上でできると解釈</li>
</ul>
</li>
<li>登壇者含め、会場内で Knative を本番に導入している人はなし。<br>まだ時期尚早っぽい</li>
<li>k8s のリソースを抽象化し、独自のPaaS/FaaSを構築するためのパーツを提供</li>
<li>k8s 上にのっかる。</li>
<li>Knative の構成
<ul>
<li><a href="https://speakerdeck.com/toshi0607/learning-knative-with-go?slide=8" target="_blank" rel="noopener noreferrer">Serving</a>
</li>
<li><a href="https://speakerdeck.com/toshi0607/learning-knative-with-go?slide=13" target="_blank" rel="noopener noreferrer">Build</a>
</li>
<li><a href="https://speakerdeck.com/toshi0607/learning-knative-with-go?slide=15" target="_blank" rel="noopener noreferrer">Eventing</a>
</li>
</ul>
</li>
<li>現状、一部、Istio に依存してしまっているので、Istioの導入が必要不可欠</li>
<li>登壇者は 機能実装に一層集中するための基盤 として注目している</li>
<li>yml ファイルで定義した内容に基づいて コード生成</li>
</ul>
<h2 id="感想">感想</h2>
<p>終盤、 Knative の内部処理を コードリーディング していたのですが、<br>
見入ってしまいメモを忘れていました。。。</p>
<p>Knative 初めて聞いたのですが、おもしろそうだなという感想。</p>
<p>k8s の勉強しないとな。</p>
<h1 id="2-gotham-goとgophercon-euに参加してきました">2. Gotham GoとGopherCon EUに参加してきました</h1>
<p>登壇者： @tenntenn</p>
<p><a href="https://docs.google.com/presentation/d/1u6E0btAS_uJP8F62Ly2GdZScJYbLK-Ub9QnnMGm0IRY" target="_blank" rel="noopener noreferrer">スライドリンク</a>
</p>
<br>
<ul>
<li>技術をアウトプットするところに人は集まる</li>
<li>メルペイ エキスパートチーム では <u>50%以上の時間</u> をコミュニティへの貢献に充てている</li>
<li>海外カンファレンスに参加する理由
<ul>
<li>最新の技術を知る</li>
<li>世界各地のエンジニアとの交流</li>
</ul>
</li>
</ul>
<h2 id="gotham-go">Gotham Go</h2>
<ul>
<li>ニューヨークで毎年開かれている Go カンファレンス</li>
<li>1トラック</li>
<li>200名くらいが参加する（そんなに大規模ではない）</li>
<li>ハンズオンがあった
<ul>
<li>パックマン（ゲーム）作った（<a href="https://github.com/danicat/pacgo" target="_blank" rel="noopener noreferrer">github</a>
）</li>
<li>絵文字で動くらしい</li>
<li>step by step で初心者におすすめ</li>
</ul>
</li>
<li><u>自作楽器</u> を Go から操作する</li>
<li>スライスをプール（再利用）する方法
<ul>
<li>leachsync を使う方法が良さそうという結論</li>
</ul>
</li>
<li>セッションのレベルは 日本の Go Conference と同等
<ul>
<li>ただし、 現地に Goチーム がいるので登壇者が豪華</li>
</ul>
</li>
<li>突然ビンゴ大会が始まったりする</li>
</ul>
<h2 id="gophercon-eu">GopherCon EU</h2>
<ul>
<li>ヨーロッパで毎年開催されている
<ul>
<li>ヨーロッパ中から Gopher が集まる</li>
</ul>
</li>
<li>参加者は200名くらい</li>
<li>2トラックで大きめ</li>
<li>ダイバーシティスカラーシップがあり、費用の補助が出る（一部）</li>
<li>リーダビリティに関するセッション
<ul>
<li>width が大きいスパゲッティコード と dipth が大きい行き過ぎた抽象化 どちらもそれぞれいやなことがある。この間ぐらいがいいよねーって話。</li>
</ul>
</li>
<li>GoTrace： Go Routine を可視化するライブラリ → <a href="https://divan.dev/posts/visual_programming_go/" target="_blank" rel="noopener noreferrer">参考記事リンク</a>

<ul>
<li><u>IDE でコードを読むなんて、 洞窟でたいまつをもって壁画に書かれた文字を読むようなもの。</u> 可視化しましょう！</li>
</ul>
</li>
<li><u>現在使用では、 map に range を使うとキーがランダムに並ぶ</u> ので、それを使ってLT大会の発表順を決めた</li>
</ul>
<h2 id="感想-1">感想</h2>
<ul>
<li>メルペイ エキスパートチーム では <u>50%以上の時間</u> をコミュニティへの貢献に充てている</li>
</ul>
<p>これすごくないですか？</p>
<p>多くのつよつよエンジニアが集まるのも納得です。</p>
<br>
<p>海外のカンファレンスのノリがおもしろそうでした。</p>
<p>発表にかける気合がすごい笑</p>
<p>ぜひ、一度行ってみたいです。</p>
<h1 id="3-go--webassemblyを活用する">3. Go + WebAssemblyを活用する</h1>
<p>登壇者： @__syumai</p>
<ul>
<li>メルペイのバックエンドエンジニア</li>
<li>Go Playground にタブを追加する chrome拡張を作った人</li>
</ul>
<p><a href="https://speakerdeck.com/syumai/using-go-and-webassembly/" target="_blank" rel="noopener noreferrer">スライドリンク</a>
</p>
<h2 id="go-webassemblywasm-ワズム">Go WebAssembly（wasm ワズム）</h2>
<ul>
<li>experimental の機能</li>
<li>1.11 以上で使用可能</li>
<li>GOOS=js GOARCH=wasm でビルドすると .wasm ファイルが生成され、JavaScript から使用できる
≒ JavaScriptからGoを使用できるようになる</li>
<li>クリックの動作をGoで実装したりした</li>
<li>select{} 使わないと main 関数が終了して JavaScriptから呼べなくなる（<a href="https://twitter.com/shumon_84/status/1139502364673466368" target="_blank" rel="noopener noreferrer">参考</a>
）</li>
<li>つらみ
<ul>
<li>GOOS=js GOARCH=wasm でしかビルドできないので、テストができない
<ul>
<li>（解決策）テストしたい部分は別パッケージにエクスポートする。Goで実装するやつは main.go だけに依存するようにしたらいい。</li>
</ul>
</li>
<li>DOM操作をGoでやった（JavaScript ならしゅっと書けるのに…）
<ul>
<li>（解決策）ビジネスロジック部分だけをGoで実装するようにしないとつらい</li>
<li>DOM操作は素直に JavaScript にお任せした方がいい</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="感想-2">感想</h2>
<p>JavaScriptからGoで実装した機能を使えるのはいろいろと便利そう。</p>
<h1 id="4-e2e-testing-with-main-function">4. E2E Testing with &lsquo;main&rsquo; function</h1>
<p>登壇者： @yuki.ito</p>
<br>
<ul>
<li>サンプルリポジトリ： <a href="https://github.com/110y/go-e2e-example" target="_blank" rel="noopener noreferrer">https://github.com/110y/go-e2e-example</a>
</li>
<li>普通にテストしようとすると <code>main</code> 関数 がカバレッジに含まれないから、含まれるように努力する話
<ol>
<li>e2e で TestMain を起動し、go test . でトップレベルのコードをgoroutineで起動</li>
<li>Mainで起動されたサーバに対して TestMainから接続してリクエストを投げる</li>
<li>TestMainで生成したクライアントから個々のテストを実行する。</li>
<li>mainのカバレッジも取れる。</li>
</ol>
</li>
</ul>
<h2 id="感想-3">感想</h2>
<p>こういう工夫して問題解決する話大好きです。</p>
<p>その手があったか。とただただ説明を聞き入ってました。</p>
<h1 id="全体まとめ">全体まとめ</h1>
<p>メルカリ社の技術力の高さがとても分かる勉強会でした。</p>
<p>中の人たちが積極的に外に出てキャッチアップをしている姿見習っていきたいと思います。</p>
<p>また参加したいなー</p>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/go" term="go" label="Go"/><category scheme="https://yyh-gl.github.io/tech-blog/categories/%E5%8B%89%E5%BC%B7%E4%BC%9A" term="%E5%8B%89%E5%BC%B7%E4%BC%9A" label="勉強会"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">【Go + レイヤードアーキテクチャー】DDDを意識してWeb APIを実装してみる</title><link href="https://yyh-gl.github.io/tech-blog/blog/go_web_api/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/gopath/?utm_source=atom_feed" rel="related" type="text/html" title="【goenv】GOPATH が変わらないときの対処法"/><link href="https://yyh-gl.github.io/tech-blog/blog/evans_ddd_1/?utm_source=atom_feed" rel="related" type="text/html" title="【エリック・エヴァンスのドメイン駆動設計】DDD入門 Part 1"/><link href="https://yyh-gl.github.io/tech-blog/blog/bigdata_processing/?utm_source=atom_feed" rel="related" type="text/html" title="【大規模サービス技術入門 5章】大規模データの処理方法についてまとめた"/><link href="https://yyh-gl.github.io/tech-blog/blog/good_api/?utm_source=atom_feed" rel="related" type="text/html" title="【Web API（Rails） + Vue.js】ブログのいいねボタン自作してみた"/><link href="https://yyh-gl.github.io/tech-blog/blog/scrum_entry/?utm_source=atom_feed" rel="related" type="text/html" title="スクラムについて学んだ話"/><id>https://yyh-gl.github.io/tech-blog/blog/go_web_api/</id><author><name>yyh-gl</name></author><published>2019-06-14T00:00:00+00:00</published><updated>2019-06-14T00:00:00+00:00</updated><content type="html"><![CDATA[<blockquote>2019/10/30 に内容を一部更新しました</blockquote><h1 id="更新2019年10月30日">更新（2019年10月30日）</h1>
<p>初回投稿から3ヶ月経ちました。<br>
この3ヶ月で新しく得た知見を基に、内容を一部アップデートしました。</p>
<h1 id="今回やること">今回やること</h1>
<p>Goのディレクトリ構成についていろいろと調べる中で、<br>
<a href="https://www.slideshare.net/pospome/go-80591000" target="_blank" rel="noopener noreferrer">こちらの資料</a>
 がとても分かりやすかったので、<br>
今回はこちらを参考にGoでWeb APIを作っていきたいと思います。</p>
<br>
<p>加えて、本プロジェクトでは、DDD と レイヤードアーキテクチャー を取り入れます。<br>
（内容はほぼレイヤードアーキテクチャになってしまいましたが…）</p>
<p>DDD については、「DDD を Go とレイヤードアーキテクチャでやるなら、こんな感じかな？」という個人の見解レベルです。<br>
パッケージ構成の参考になれば幸いです。<br>
（ですので、ドメインモデルは重度のドメイン貧血症に陥っていますｗ）</p>
<p>釣りタイトルみたいになっちゃっててすみません🧝‍♀️</p>
<h2 id="環境">環境</h2>
<ul>
<li>MacOS Mojave 10.14.6</li>
<li>Go 1.12.5</li>
</ul>
<p>なお、今回は、Gin や Mux などといったフレームワークは使わず、<br>
httprouter のみで薄く作っていこうと思います。</p>
<p>Mux を使った実装は <a href="https://yyh-gl.hatenablog.com/entry/2019/02/08/195310" target="_blank" rel="noopener noreferrer">僕の前のブログで紹介している</a>
 のでよければどうぞ。</p>
<br>
・
<p>・</p>
<p>・</p>
<p>では、早速本題に入っていきましょう。</p>
<h1 id="採用アーキテクチャレイヤードアーキテクチャ">採用アーキテクチャ：レイヤードアーキテクチャ</h1>
<p><a href="https://www.slideshare.net/pospome/go-80591000" target="_blank" rel="noopener noreferrer">参考記事内</a>
 で紹介されているのは <u>レイヤードアーキテクチャ</u> をベースに <br>
いろいろカスタマイズされたものらしいです。</p>
<p>クリーンアーキテクチャに似たアーキテクチャだとか。</p>
<hr>
<p>ユースケース層という呼び方はクリーンアーキテクチャ由来ですね。</p>
<p>DDD の文脈だと アプリケーション層 と呼ばれますが、<br>
アプリケーションって意味が広くて分かりづらいので、<br>
本プロジェクトでは ユースケース という単語を使用します。</p>
<hr>
<p>とりあえず、今回はスライドページ19で紹介されているディレクトリ構成に従って、 <br>
<u>DDD を意識して</u> Web API を実装していこうと思います。</p>
<p>（意識だけして、実践できずに終わりましたが😇）</p>
<br>
<p>レイヤードアーキテクチャ における各層の依存関係 について説明します。</p>
<p>依存関係の図は下記のとおりです。</p>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/06/go_web_api/architecture.png" width="600">
<p>矢印は依存の方向を示しています。<br>
例えば、上図だと Handler層 は UseCase層 の処理を利用することを意味します。</p>
<br>
<p>一般的なレイヤードアーキテクチャだと、上から下に一方向に依存します。<br>
しかし、今回は、Infra層が Domain層に依存しています。<br>
このあたりはオニオンアーキテクチャーやクリーンアーキテクチャと同じやり方ですね。</p>
<p>さきほどの図を視点を変えて見てみます。（下記の図）<br>
今回採用したアーキテクチャは、<br>
オニオンアーキテクチャーやクリーンアーキテクチャのように、<br>
依存が中心方向に <u>のみ</u> 向いていることがわかります。</p>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/06/go_web_api/dependency_direction1.png" width="600">
<p><u>すべての依存が中心に向かっているこの状態が理想です</u>。</p>
<p>（Handler層と Infra層が一緒の層みたいになっていますが、全くの別物です。うまく分離して描けず、こうなりました。ご注意を）</p>
<hr>
<p>依存関係について、もう少し述べておくと、<br>
基本的に依存はひとつ下の層までに抑えておくべきのようです。</p>
<p>ただし、簡略化のために2つ下の層まで依存している例もあるので、<br>
そこはチームとして同意が取れていれば良いのではないでしょうか。</p>
<hr>
<br>
<p>ここで、ユーザから APIリクエスト があった場合を考えてみます。</p>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/06/go_web_api/dependency_direction2.png" width="600">
<p>ユーザからのリクエストは Handler で受け取られ、 UseCase を使って処理が行われます。<br>
さらに、UseCase は Domain を使って処理を行います。<br>
ここまでは処理が中心に進んでいる、つまり依存は中心に向かって発生しています。</p>
<p>しかし、たいていのサービスって DB を使用しますよね。<br>
つまり、ユースケースからドメインを介して、Infra を利用することになります。</p>
<p>UseCase → Domain → Infra</p>
<p>…依存が外側を向いてしまいました。<br>
これは許されていません。ではどうするか。</p>
<p><u><a href="https://medium.com/eureka-engineering/go-dependency-inversion-principle-8ffaf7854a55" target="_blank" rel="noopener noreferrer">依存性逆転の法則</a>
</u> を使います。</p>
<br>
<p><u>依存性逆転の法則 とは、 interfaceを利用して、依存の方向を逆にすること</u> です。</p>
<p>もう少し詳しく説明します。<br>
まず、 ① Domain層 において、 DB とのやりとりを interface で定義しておきます。<br>
interface （後ほどコード内にて BookRepository として出てきます） 自体は実装を持たないので、<br>
どこにも依存していません。</p>
<p>次に、 ② Infra層 から Domain層 に定義した interface （後ほどコード内にて BookPersistence として出てきます） を実装します。</p>
<br>
<p>①, ② の2ステップを踏むことで、まず Domain は interface に対して 処理をお願いするだけでよくなります。
先ほども言ったとおり interface は 実装を持たないので依存関係はありません。</p>
<p>interface 自体は実装を持ちませんが、<br>
Infra が interface の実装を行っているので、ちゃんとDBアクセスして処理を行うことができます。</p>
<p>ここで、 Infra は interface を実装しているので、依存が interface 、すなわち Domain に向いています。</p>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/06/go_web_api/dependency_direction3.png" width="600">
<p>依存性が逆転し、すべての依存関係が中心に向かうようになりましたね。</p>
<br>
<p>ここはとっつきづらいところなので、まだいまいち理解できないかもしれません。</p>
<p>以降、実際のコードを紹介していくので、コードに落とし込みながら考えてみてください。</p>
<h1 id="完成物">完成物</h1>
<p>完成物に関しては <a href="https://github.com/yyh-gl/go-api-server-by-ddd" target="_blank" rel="noopener noreferrer">こちら</a>
 に置いておきます。</p>
<h2 id="api-一覧">API 一覧</h2>
<p>書籍管理システム の API を想定</p>
<ul>
<li>書籍一覧 取得</li>
<li>書籍詳細 取得</li>
<li>書籍 追加</li>
<li>書籍 貸出</li>
<li>書籍 返却</li>
</ul>
<br>
<p>ディレクトリ構成はこんな感じです。</p>
<pre><code class="language-tree">api-server-with-go-kit-and-ddd
├── cmd
│   └── api
│       └── main.go  // サーバ起動したり、依存注入、ルーティングを行う
├── domain
│   └── blog.go
├── go.mod
├── go.sum
├── handler
│   └── rest // RESTful API 用のハンドラー
│       └── blog.go
├── infra
│   └── blog.go
└── usecase
    └── blog.go
</code></pre>
<h1 id="書籍一覧を取得するapiを作る">書籍一覧を取得するAPIを作る</h1>
<h2 id="domain-層">Domain 層</h2>
<p>まずは、<code>/domain/model</code> に書籍モデルを作っていきます。</p>
<p><u>Domain層 はシステムが扱う業務領域に関するコードを置くところです。</u></p>
<p>よって、「書籍」 がどういうものなのかモデルという形で定義します。</p>
<p><code>/domain/model/book.go</code></p>
<pre><code class="language-go">package model

import &quot;time&quot;

// Book : Book を表すドメインモデル
// !! 重度のドメイン貧血症です !!
type Book struct {
	Id       int64
	Title    string
	Author   string
	IssuedAt time.Time
}
</code></pre>
<p>冒頭でも述べたとおり、みごとなドメイン貧血症っぷりです。</p>
<p>ちゃんと 値オブジェクトを使ったりして、ごりごり DDD していきたいですが、今回は…省きます🙇‍♂️</p>
<br>
<p>次に、<code>/domain/repository/book.go</code> を作っていきます。</p>
<p>今回、 <u>リポジトリでやることを簡単に言うと、 DB や KVS などで行う CRUD処理 の定義です。</u><br>
ただし、<u>Domain層には技術的関心事を持ち込まない</u> というルールがあるため、<br>
ここでは interface を定義するだけです。</p>
<p>実装は、後述する infra で行います。<br>
（<u>Infra層 は技術的関心事を扱う層です</u>）</p>
<p>リポジトリについてちゃんと知りたい方は、<br>
<a href="https://blog.fukuchiharuki.me/entry/use-repository-and-dao-according-to-the-purpose" target="_blank" rel="noopener noreferrer">こちら</a>
が参考になると思います。</p>
<br>
<p><code>/domain/repository/book.go</code></p>
<pre><code class="language-go">package repository

import (
	&quot;context&quot;

	&quot;github.com/yyh-gl/go-api-server-by-ddd/domain/model&quot;
)

// BookRepository : Book における Repository のインターフェース
//  -&gt; 依存性逆転の法則により infra 層は domain 層（本インターフェース）に依存
type BookRepository interface {
	GetAll(context.Context) ([]*model.Book, error)
}
</code></pre>
<p>今は 全ての書籍を取得する関数 <code>GetAll()</code> のみ定義します。</p>
<br>
<p>ここで、はじめに示した 依存関係の図 を思い出してください。</p>
<p>今定義した Domain層 は他の層のコードを一切利用していません。<br>
つまり、<u>下図の赤枠の中で依存関係が完結しています</u>。</p>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/06/go_web_api/dependency_domain.png" width="600">
<h2 id="infra-層">Infra 層</h2>
<p>さきほど述べたとおり、<u>Infra層 は技術的関心事を扱う層です。</u></p>
<p>ここでさっき定義した repository の処理を実装します。</p>
<p><code>/infra/persistence/book.go</code></p>
<pre><code class="language-go">package persistence

// repository という名前にしたいが domain 配下の repository とパッケージ名が被ってしまうため persistence で代替

import (
	&quot;context&quot;
	&quot;time&quot;

	&quot;github.com/yyh-gl/go-api-server-by-ddd/domain/model&quot;
	&quot;github.com/yyh-gl/go-api-server-by-ddd/domain/repository&quot;
)

type bookPersistence struct{}

// NewBookPersistence : Book データに関する Persistence を生成
func NewBookPersistence() repository.BookRepository {
	return &amp;bookPersistence{}
}

// GetAll : DB から Book データを全件取得（BookRepository インターフェースの GetAll() を実装したもの）
//  -&gt; 本来は DB からデータを取得するが、簡略化のために省略（モックデータを返却）
func (bp bookPersistence) GetAll(context.Context) ([]*model.Book, error) {
	book1 := model.Book{}
	book1.Id = 1
	book1.Title = &quot;DDDが分かる本&quot;
	book1.Author = &quot;たろうくん&quot;
	book1.IssuedAt = time.Now().Add(-24 * time.Hour)

	book2 := model.Book{}
	book2.Id = 2
	book2.Title = &quot;レイヤードアーキテクチャが分かる本&quot;
	book2.Author = &quot;はなこさん&quot;
	book2.IssuedAt = time.Now().Add(-24 * 7 * time.Hour)

	return []*model.Book{&amp;book1, &amp;book2}, nil
}
</code></pre>
<p>なお、 実際には DB にアクセスし、データを持ってくるようにします。<br>
ここでは一旦モックデータを返すようにしておきます。</p>
<p>また、Persistence という単語がいきなり出てきましたが、これは Repository と同義です。<br>
実際に <code>NewBookPersistence()</code> の中身を見ると Repository のインターフェースを返していると思います。<br>
（<code>NewBookPersistence()</code>の詳細は後述）</p>
<p>本当は Repositoryという名前を使いたかったのですが、<br>
Domain層と Infra層 でパッケージ名が被ってしまうため、やむなくこうしています。</p>
<br>
<p>先ほどと同様に 依存関係 を確認します。</p>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/06/go_web_api/dependency_infra.png" width="600">
<p>Infra層 は Domain層 で作った <code>/domain/repository/book.go</code> のインターフェース（BookRepository）を実装しています。<br></p>
<br>
<p>ここで、Goに慣れていない方は、どこでインターフェースと関連づけてるの？<br>
という疑問が生まれると思います。</p>
<p>答えは、 <code>NewBookPersistence()</code> です。<br>
この関数の戻り値は インターフェース です。<br>
したがって、17行目でreturnする bookPersistence がインターフェースを満たしていないとエラーとなります。<br>
このようにして インターフェースを満たしているか否かを判別します。</p>
<p><code>NewBookPersistence()</code> をどこで使うかは後述します。</p>
<br>
<p>では、依存関係を見ていきます。<br>
上述したとおり、Infra層 は Domain層 のインターフェースを満たすように作られているので、Domain層に依存しています。<br>
Goには implements とかないので分かりづらいですね。<br>
でも、確かに依存しています。</p>
<h2 id="usecase-層">UseCase 層</h2>
<p><u>UseCase層 では、システムのユースケースを満たす処理の流れを実装します。</u></p>
<p>今回は単純な処理しかしないので、この層の存在価値が少し分かりづらくなってしまいます。</p>
<p>複雑なビジネスロジックがあるときは、この層の存在が効いてくると思います。</p>
<br>
<p>コードは以下のとおりです。</p>
<p><code>/usecase/book.go</code></p>
<pre><code class="language-go">package usecase

import (
	&quot;context&quot;

	&quot;github.com/yyh-gl/go-api-server-by-ddd/domain/model&quot;
	&quot;github.com/yyh-gl/go-api-server-by-ddd/domain/repository&quot;
)

// BookUseCase : Book における UseCase のインターフェース
type BookUseCase interface {
	GetAll(context.Context) ([]*model.Book, error)
}

type bookUseCase struct {
	bookRepository repository.BookRepository
}

// NewBookUseCase : Book データに関する UseCase を生成
func NewBookUseCase(br repository.BookRepository) BookUseCase {
	return &amp;bookUseCase{
		bookRepository: br,
	}
}

// GetAll : Book データを全件取得するためのユースケース
//  -&gt; 本システムではあまりユースケース層の恩恵を受けれないが、もう少し大きなシステムになってくると、
//    「ドメインモデルの調節者」としての役割が見えてくる
func (bu bookUseCase) GetAll(ctx context.Context) (books []*model.Book, err error) {
	// Persistence（Repository）を呼出
	books, err = bu.bookRepository.GetAll(ctx)
	if err != nil {
		return nil, err
	}
	return books, nil
}
</code></pre>
<br>
<p>UseCase層 の依存関係も見てみましょう。</p>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/06/go_web_api/dependency_usecase.png" width="600">
<p>UseCase層 は <code>/domain/repository</code> を呼び出しています。<br>
したがって、 UseCase層 は Domain層 に依存しています。</p>
<br>
<p><a href="https://www.slideshare.net/pospome/go-80591000" target="_blank" rel="noopener noreferrer">参考にしている資料</a>
 では、<br>
UseCase層 をさらに input と output で切っていますが、複雑になりすぎると思い、省略しました。</p>
<h2 id="handler-層">Handler 層</h2>
<p>次に Handler層 です。</p>
<p><u>本プロジェクトにおける、Handler層 の役目は、HTTPリクエストを受け取り、UseCase を使って処理を行い、結果を返す</u> ことです。</p>
<p>ただし、本来の Handler層は HTTPリクエストに限った話ではありません。</p>
<p>外部にあるものがなんであれ、その差異を吸収して、ユースケースに伝えるのが役目です。</p>
<p>したがって、HTTP通信以外でも対応できるように、本プロジェクトでは <code>/handler/rest</code> というふうにディレクトリを切っています。<br>
（RESTful API であることを明確にしてみました）<br>
CLIを追加するなら <code>/handler/cli</code> というふうにディレクトリを切ればOK。</p>
<br>
<p>本プロジェクトのコード的には以下のようになります。</p>
<p><code>/handler/blog.go</code></p>
<pre><code class="language-go">package rest

// Handler 層を変えるだけで、例えば CLI にも簡単に対応可能

import (
	&quot;encoding/json&quot;
	&quot;net/http&quot;
	&quot;time&quot;

	&quot;github.com/julienschmidt/httprouter&quot;
	&quot;github.com/yyh-gl/go-api-server-by-ddd/usecase&quot;
)

// BookHandler : Book における Handler のインターフェース
type BookHandler interface {
	Index(http.ResponseWriter, *http.Request, httprouter.Params)
}

type bookHandler struct {
	bookUseCase usecase.BookUseCase
}

// NewBookUseCase : Book データに関する Handler を生成
func NewBookHandler(bu usecase.BookUseCase) BookHandler {
	return &amp;bookHandler{
		bookUseCase: bu,
	}
}

// BookIndex : GET /books -&gt; Book データ一覧を返す
func (bh bookHandler) Index(w http.ResponseWriter, r *http.Request, pr httprouter.Params) {
	// request : 本 API のリクエストパラメータ
	//  -&gt; こんな感じでリクエストも受け取れますが、今回は使いません
	type request struct {
		Begin uint `query:&quot;begin&quot;`
		Limit uint `query:&quot;limit&quot;`
	}

	// bookField : response 内で使用する Book を表す構造体
	//  -&gt; ドメインモデルの Book に HTTP の関心事である JSON タグを付与したくないために Handler 層で用意
	//     簡略化のために JSON タグを付与したドメインモデルを流用するプロジェクトもしばしば見かける
	type bookField struct {
		Id       int64     `json:&quot;id&quot;`
		Title    string    `json:&quot;title&quot;`
		Author   string    `json:&quot;author&quot;`
		IssuedAt time.Time `json:&quot;issued_at&quot;`
	}

	// response : 本 API のレスポンス
	type response struct {
		Books []bookField `json:&quot;books&quot;`
	}

	ctx := r.Context()

	// ユースケースの呼出
	books, err := bh.bookUseCase.GetAll(ctx)
	if err != nil {
		// TODO: エラーハンドリングをきちんとする
		http.Error(w, &quot;Internal Server Error&quot;, 500)
		return
	}

	// 取得したドメインモデルを response に変換
	res := new(response)
	for _, book := range books {
		var bf bookField
		bf = bookField(*book)
		res.Books = append(res.Books, bf)
	}

	// クライアントにレスポンスを返却
	w.Header().Set(&quot;Content-Type&quot;, &quot;application/json&quot;)
	if err = json.NewEncoder(w).Encode(res); err != nil {
		// TODO: エラーハンドリングをきちんとする
		http.Error(w, &quot;Internal Server Error&quot;, 500)
		return
	}
}
</code></pre>
<br>
<p>依存関係は以下のとおりです。</p>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/06/go_web_api/dependency_handler.png" width="600">
<p>57行目で UseCase を使用するので、UseCase層に依存しています。</p>
<h2 id="maingo">main.go</h2>
<p>ここまでで、書籍に関する Handler, UseCase, Repository が用意できました。<br>
最後に、<code>main.go</code> にて、これらの依存関係を定義してやることで、利用可能な状態にします。<br>
（DI とかはやってません🙏）</p>
<p>このとき利用するのが、各層に用意されている <code>NewXxx()</code> という関数です。</p>
<p><code>NewXxx()</code> を使用して、Handler や UseCase, Repository を生成し、メソッドを実行できるようにします。</p>
<p><code>/cmd/api/main.go</code></p>
<pre><code class="language-go">package main

import (
	&quot;fmt&quot;
	&quot;log&quot;
	&quot;net/http&quot;

	&quot;github.com/julienschmidt/httprouter&quot;
	handler &quot;github.com/yyh-gl/go-api-server-by-ddd/handler/rest&quot;
	&quot;github.com/yyh-gl/go-api-server-by-ddd/infra/persistence&quot;
	&quot;github.com/yyh-gl/go-api-server-by-ddd/usecase&quot;
)

func main() {
	// 依存関係を注入（DI まではいきませんが一応注入っぽいことをしてる）
	// DI ライブラリを使えば、もっとスマートになるはず
	bookPersistence := persistence.NewBookPersistence()
	bookUseCase := usecase.NewBookUseCase(bookPersistence)
	bookHandler := handler.NewBookHandler(bookUseCase)

	// ルーティングの設定
	router := httprouter.New()
	router.GET(&quot;/api/v1/books&quot;, bookHandler.Index)

	// サーバ起動
	fmt.Println(&quot;========================&quot;)
	fmt.Println(&quot;Server Start &gt;&gt; http://localhost:3000&quot;)
	fmt.Println(&quot;========================&quot;)
	log.Fatal(http.ListenAndServe(&quot;:3000&quot;, router))
}
</code></pre>
<p>注目していただきたのが、17行目から19行目の処理です。<br>
ここで、各層の <code>NewXxx()</code> の処理を使って依存関係を定義しています。</p>
<p>DI ライブラリを使うことで、よりスマートに書けると思いますが、<br>
愚直にやるならこんな感じです。</p>
<h1 id="テスト">テスト</h1>
<p>ここまでの実装で 書籍一覧 取得リクエスト を送れるようになりました。</p>
<pre><code class="language-bash">$ go run cmd/api/main.go
$ curl -X GET  http://localhost:3000/api/v1/books
</code></pre>
<p>上記コマンドを実行すると、<br>
2つの書籍データが返ってくるはずです。</p>
<pre><code class="language-json">{
  &quot;books&quot;: [
    {
      &quot;id&quot;: 1,
      &quot;title&quot;: &quot;DDDが分かる本&quot;,
      &quot;author&quot;: &quot;たろうくん&quot;,
      &quot;issued_at&quot;: &quot;2019-10-29T02:22:09.264835+09:00&quot;
    },
    {
      &quot;id&quot;: 2,
      &quot;title&quot;: &quot;レイヤードアーキテクチャが分かる本&quot;,
      &quot;author&quot;: &quot;はなこさん&quot;,
      &quot;issued_at&quot;: &quot;2019-10-23T02:22:09.264841+09:00&quot;
    }
  ]
}
</code></pre>
<br>
<p>エンドポイントが一個しかなかったり、DB 接続してなかったりと、未完成なところが多いですが、<br>
DDD や レイヤードアーキテクチャ が絡んできて、結構重い内容になってきたので、一旦ここで切ろうと思います。<br>
後日、続編記事を出したいと思います。</p>
<h1 id="まとめ">まとめ</h1>
<p>レイヤードアーキテクチャがメインの話になりましたが、<br>
アーキテクチャについて勉強中だったので、僕的にはちょうど良い勉強になりました。</p>
<p>今後は、エヴァンス本で「ドメイン知識をどのようにしてドメインモデルに落とし込んでいくのか」ってところを勉強していこうと思います。</p>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/go" term="go" label="Go"/><category scheme="https://yyh-gl.github.io/tech-blog/categories/web-api" term="web-api" label="Web API"/><category scheme="https://yyh-gl.github.io/tech-blog/categories/%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3" term="%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3" label="アーキテクチャ"/><category scheme="https://yyh-gl.github.io/tech-blog/categories/ddd" term="ddd" label="DDD"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">【goenv】GOPATH が変わらないときの対処法</title><link href="https://yyh-gl.github.io/tech-blog/blog/gopath/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/evans_ddd_1/?utm_source=atom_feed" rel="related" type="text/html" title="【エリック・エヴァンスのドメイン駆動設計】DDD入門 Part 1"/><link href="https://yyh-gl.github.io/tech-blog/blog/bigdata_processing/?utm_source=atom_feed" rel="related" type="text/html" title="【大規模サービス技術入門 5章】大規模データの処理方法についてまとめた"/><link href="https://yyh-gl.github.io/tech-blog/blog/good_api/?utm_source=atom_feed" rel="related" type="text/html" title="【Web API（Rails） + Vue.js】ブログのいいねボタン自作してみた"/><link href="https://yyh-gl.github.io/tech-blog/blog/scrum_entry/?utm_source=atom_feed" rel="related" type="text/html" title="スクラムについて学んだ話"/><link href="https://yyh-gl.github.io/tech-blog/blog/terraform_ecs/?utm_source=atom_feed" rel="related" type="text/html" title="【Terraform + ECS + RDS】Terraform で ECS環境構築してみた"/><id>https://yyh-gl.github.io/tech-blog/blog/gopath/</id><author><name>yyh-gl</name></author><published>2019-06-13T00:00:00+00:00</published><updated>2019-06-13T00:00:00+00:00</updated><content type="html"><![CDATA[<h1 id="gopath-が変わらない">GOPATH が変わらない…</h1>
<p>今日こんな現象に遭遇した。</p>
<pre><code>$ export GOPATH=/Users/yyh-gl/workspaces/Go

$ echo $GOPATH
/Users/yyh-gl/workspaces/Go

$ go env GOPATH
/Users/yyh-gl/go/1.12.5
</code></pre>
<p>GOPATH が書き換わらない。</p>
<h1 id="解決方法">解決方法</h1>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/06/gopath/help.png" width="600">
<p>社内Slack で適当につぶやいたら、同期が助けてくれた（神）</p>
<p>画像にある Qiita のリンクが <a href="https://qiita.com/gimKondo/items/add08298e24ae400505e" target="_blank" rel="noopener noreferrer">こちら</a>
</p>
<p>ちなみに僕の環境の goenv は バージョン 1.12.5 だったので、2系に上げなくても発生する模様。</p>
<blockquote>
<p>（追記：19/06/14）またまた同期が教えてくれました。<br>
<a href="https://blog.ast.moe/blog/2019-03-26/" target="_blank" rel="noopener noreferrer">こちらの記事</a>
 によると、
goenv による管理は バージョン 1.12 からとのこと。</p>
</blockquote>
<br>
<p>結論：<u>goenv が GOPATH を管理しようとしてた</u></p>
<br>
<p>goenv の管理から外してやるには <code>GOENV_DISABLE_GOPATH=1</code> にしてやればOK。</p>
<p>僕は <code>zshrc</code> に以下のとおり追記しました。</p>
<p><code>export GOENV_DISABLE_GOPATH=1</code></p>
<p>（zshrc の読み込み直しを忘れずに）</p>
<h1 id="結果">結果</h1>
<pre><code>$ go env GOPATH
/Users/yyh-gl/workspaces/Go
</code></pre>
<p>変わった。よかった</p>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/go" term="go" label="Go"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">【エリック・エヴァンスのドメイン駆動設計】DDD入門 Part 1</title><link href="https://yyh-gl.github.io/tech-blog/blog/evans_ddd_1/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/bigdata_processing/?utm_source=atom_feed" rel="related" type="text/html" title="【大規模サービス技術入門 5章】大規模データの処理方法についてまとめた"/><link href="https://yyh-gl.github.io/tech-blog/blog/good_api/?utm_source=atom_feed" rel="related" type="text/html" title="【Web API（Rails） + Vue.js】ブログのいいねボタン自作してみた"/><link href="https://yyh-gl.github.io/tech-blog/blog/scrum_entry/?utm_source=atom_feed" rel="related" type="text/html" title="スクラムについて学んだ話"/><link href="https://yyh-gl.github.io/tech-blog/blog/terraform_ecs/?utm_source=atom_feed" rel="related" type="text/html" title="【Terraform + ECS + RDS】Terraform で ECS環境構築してみた"/><link href="https://yyh-gl.github.io/tech-blog/blog/android_push/?utm_source=atom_feed" rel="related" type="text/html" title="【Android + Kotlin + Firebase】Androidアプリにプッシュ通知を実装してみた"/><id>https://yyh-gl.github.io/tech-blog/blog/evans_ddd_1/</id><author><name>yyh-gl</name></author><published>2019-06-11T00:00:00+00:00</published><updated>2019-06-11T00:00:00+00:00</updated><content type="html"><![CDATA[<h1 id="ddd-の勉強始めます">DDD の勉強始めます</h1>
<p>新卒研修を受ける中で DDD が出てきて、勉強したくなったので、<br>
<a href="https://www.amazon.co.jp/dp/B00GRKD6XU/ref=dp-kindle-redirect?_encoding=UTF8&amp;btkr=1" target="_blank" rel="noopener noreferrer">『エリック・エヴァンスのドメイン駆動設計』（エリック・エヴァンス著，今関 剛 監訳，和智 右桂、牧野 祐子 訳）</a>
を読んでいこうと思います。</p>
<p>今回は第1部「ドメインモデルを機能させる」の 1章 と 2章 をまとめます。</p>
<p>注意： 僕の理解をそのままメモとして書き連ねていきます。<br>
したがって、誤った理解もあると思うので、そのときはDMとかでご指摘お願いします！</p>
<h1 id="1章-知識をかみ砕く">1章 知識をかみ砕く</h1>
<p><u>ソフトウェアを作るときに、はじめから対象を十分に理解している開発者などいない。</u></p>
<blockquote>
<p>対象 ＝ これから作るソフトウェアで実現する作業 ＝ ドメイン</p>
</blockquote>
<p>したがって、対象について詳しい人（ドメインエキスパート）と開発者で <br>
十分に話し合って理解を深めることが重要である。</p>
<br>
<p>理解したことはモデルとして書き出す。 <br>
そして、ドメインエキスパートは足りないところがあれば追加で説明する。<br>
開発者は分からないところがあれば質問する。</p>
<p>上記工程を何度も繰り返し、その都度得た知識をモデルに落とし込んでいく。<br>
→ <u>継続的学習</u>（継続的学習は開発が始まった後でも行う）</p>
<br>
<p>はじめから対象を如実に表したモデルを作れることは滅多にない。</p>
<p>ドメインエキスパート と 開発者 では見ている視点が違うので少し話を聞いたぐらいで <br>
完璧なモデルを作ることができないのは当たり前である。</p>
<p>だからこそ、対話を通して、互いに疑問点や不要な点を洗い出し、洗練する必要がある。<br>
これが <u>知識のかみ砕き</u> である。</p>
<h1 id="1章-まとめ">1章 まとめ</h1>
<ul>
<li>ドメインエキスパートと開発者が話し合ってドメインをモデルに落とし込んでいく
<ul>
<li>用語の説明や不足点の追加など とにかく話す</li>
<li>ドメイン：ソフトウェア化する対象（業務やサービスなど、ソフトウェア化の対象となりうる万物）</li>
</ul>
</li>
<li>一発で完璧なモデリングはできないから、継続的に改善していく</li>
</ul>
<h1 id="2章-コミュニケーションと言語の使い方">2章 コミュニケーションと言語の使い方</h1>
<p>ドメインエキスパートが使う専門用語を開発者は理解できないし、<br>
開発者が使う専門用語をドメインエキスパートは理解できない。</p>
<p>ドメインエキスパートと開発者の両者が同じ意味だと思って使っていたとしても <br>
たいていの場合、差異がある。</p>
<p>このような差異があると <u>通訳</u> が必要となる。<br>
通訳はコミュニケーションを鈍らせ、知識のかみ砕きを沈滞させる。</p>
<h2 id="共通言語としてのモデル">共通言語としてのモデル</h2>
<p>通訳をなくすために、 <u>モデルを言語の骨格として使用</u> する。</p>
<p>ドメインエキスパートと開発者のコミュニケーションやコード、ドキュメント、図など <br>
全てにおいて、その言語を使用する。</p>
<br>
<p>ここで、モデルはドメインエキスパートと開発者のコミュニケーションから生まれることを思い出す。</p>
<p>つまり、コミュニケーションの中で認識の違いが見つかるなどして、<br>
言語定義に対する変更があったときにはモデルが変更になり、<br>
さらにはコード中のクラス名やメソッド名が変わることもありえる。</p>
<br>
<p>こうすることで、<br>
ドメインエキスパートと開発者は、ともに不正確なところや矛盾を指摘し合い、<br>
より確かなドメインモデルを構築することができる。</p>
<br>
<p>こうして作成されたモデルをドメインエキスパートが理解できなかった場合、<br>
そのモデルには何か問題があることがわかる。</p>
<p>つまり、実現したいソフトウェアではないということになる。</p>
<h2 id="図とドキュメントに関する注意点">図とドキュメントに関する注意点</h2>
<blockquote>
<p>ここでいうドキュメントとは開発者側でのみ使用するドキュメントだと思われる</p>
</blockquote>
<p><u>設計に関する本質的な詳細は、コードにおいてとらえられる。</u> <br>
したがって、図でモデルを表現はしないし、ドキュメントによって全て説明しようとはしない。</p>
<blockquote>
<p>モデル ≠ 図</p>
</blockquote>
<br>
<p>図はモデルについてのコミュニケーション、説明を助けるために使う。</p>
<p>ドキュメントはコードと会話の補足事項のみを記述する。</p>
<blockquote>
<p>ドキュメントは常に最新である必要があるから、<br>
補足事項以外も含めて全てドキュメント化するのはつらい的な意味合いに感じた。</p>
</blockquote>
<blockquote>
<p>なにより先述したとおり、「設計に関する本質的な詳細は、コードにおいてとらえられる」から。<br>
XP を代表とするいくつかの手法では、コードで全てを語る。</p>
</blockquote>
<h1 id="2章-まとめ">2章 まとめ</h1>
<ul>
<li>
<p>ドメインエキスパートと開発者の共通言語は、ドメインモデルを言語の骨格として使用する</p>
<ul>
<li>そこで理解できないことがあれば、モデルのリファクタリングが必要</li>
</ul>
</li>
<li>
<p>図とドキュメントはあくまで補助資料。コードで語ろう。</p>
</li>
</ul>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/ddd" term="ddd" label="DDD"/><category scheme="https://yyh-gl.github.io/tech-blog/categories/%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3" term="%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3" label="アーキテクチャ"/><category scheme="https://yyh-gl.github.io/tech-blog/categories/%E8%AA%AD%E6%9B%B8%E3%81%BE%E3%81%A8%E3%82%81" term="%E8%AA%AD%E6%9B%B8%E3%81%BE%E3%81%A8%E3%82%81" label="読書まとめ"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">【大規模サービス技術入門 5章】大規模データの処理方法についてまとめた</title><link href="https://yyh-gl.github.io/tech-blog/blog/bigdata_processing/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/good_api/?utm_source=atom_feed" rel="related" type="text/html" title="【Web API（Rails） + Vue.js】ブログのいいねボタン自作してみた"/><link href="https://yyh-gl.github.io/tech-blog/blog/scrum_entry/?utm_source=atom_feed" rel="related" type="text/html" title="スクラムについて学んだ話"/><link href="https://yyh-gl.github.io/tech-blog/blog/terraform_ecs/?utm_source=atom_feed" rel="related" type="text/html" title="【Terraform + ECS + RDS】Terraform で ECS環境構築してみた"/><link href="https://yyh-gl.github.io/tech-blog/blog/android_push/?utm_source=atom_feed" rel="related" type="text/html" title="【Android + Kotlin + Firebase】Androidアプリにプッシュ通知を実装してみた"/><link href="https://yyh-gl.github.io/tech-blog/blog/engineering_organization_theory_mentoring/?utm_source=atom_feed" rel="related" type="text/html" title="【エンジニアリング組織論への招待】メンタリングの技術"/><id>https://yyh-gl.github.io/tech-blog/blog/bigdata_processing/</id><author><name>yyh-gl</name></author><published>2019-06-10T00:00:00+00:00</published><updated>2019-06-10T00:00:00+00:00</updated><content type="html"><![CDATA[<h1 id="はじめに">はじめに</h1>
<p>社内で伊藤 直也さんと田中 慎司さんが書かれた</p>
<p><a href="https://amzn.to/2wR3QlL" target="_blank" rel="noopener noreferrer">『Web開発者のための大規模サービス技術入門』</a>
を輪読しました。</p>
<p>今回は、僕が担当した 第5回の「大規模データ処理[実践]入門」についてまとめます。</p>
<p>なお、本書は2010年に出版された本であるため、</p>
<p>少なくとも第5回の内容は今では当たり前のことという印象を受けました。</p>
<p>それでも、しっかりと文章で学んでおくことは大事だと思うのでまとめます。</p>
<br>
<p>★印は個人メモです。</p>
<p>以下まとめ</p>
<h1 id="大量なデータを扱う場面">大量なデータを扱う場面</h1>
<p>全文検索やデータマイニングなど RDBMSで処理できない規模のデータを</p>
<p>処理したい場面は多く存在します。</p>
<p>では、RDBMSが使えない規模のデータをどう処理すればいいでしょうか。</p>
<h1 id="データを抽出">データを抽出</h1>
<p>結論から言うと、RDBMSで扱うことができないデータは、適宜RDBMSから <u>抽出</u> して利用します。</p>
<h2 id="具体的には">具体的には</h2>
<p>バッチ処理でRDBMSからデータを抽出し、</p>
<p>別途インデックスサーバのようなものを作って、そこに入れていきます。</p>
<blockquote>
<p>★ ここで言っているインデックスサーバというのは、例えば全文検索用であれば</p>
</blockquote>
<blockquote>
<p>「検索用にチューニングした（検索しやすくした）データ構造」と考えるべきでしょう。</p>
</blockquote>
<blockquote>
<p>★ 最近は、<a href="https://www.fluentd.org/" target="_blank" rel="noopener noreferrer">Fluentd</a>
 を使用してログを外部に吐き出してから解析したりしますよね。</p>
</blockquote>
<blockquote>
<p>それと考え方は一緒だと思います。</p>
</blockquote>
<br>
<p>インデックスサーバにはRPC（Remote Procedure Call）を使ってアクセスします。</p>
<p>（なお、RPCと言いましたが、現在では Web API でのアクセスが一般的なので、以降、 Web API を例に使用します）</p>
<p>イメージとしては下図のようになります。</p>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/06/bigdata_processing/web_api_version.png" width="600">
<h1 id="用途特化型のインデクシング">用途特化型のインデクシング</h1>
<p>上述した方法を、はてな社（著者がはてな社出身の方なのでよく出てきます）では、</p>
<p><u>用途特化型インデクシング</u> と呼ぶそうです。</p>
<h2 id="用途特化型インデクシングとrdbms">用途特化型インデクシングとRDBMS</h2>
<p>RDBMS はデータソートや統計処理、JOIN など、データに対して様々な処理を行うことができます。</p>
<p>しかし、汎用的故に、特定の目的だけに使うときには、それ用にチューニングしたデータ構造、</p>
<p>すなわち 用途特化型インデクシング を使う方が圧倒的に速くなります。</p>
<blockquote>
<p>★ 先ほど言っていた Fluentd を用いたログ解析システム は ログ解析用にチューニングしたものと言えるでしょうか。</p>
</blockquote>
<h1 id="用途特化型インデクシングの使用例-全文検索エンジン">用途特化型インデクシングの使用例： 全文検索エンジン</h1>
<p>全文検索エンジンでは、以下3点の要求をどう満たすか 考える必要があります。</p>
<ul>
<li>大量のデータから検索したい</li>
<li>高速に検索したい</li>
<li>「いい感じ」の文書を上位に持ってきたい</li>
</ul>
<p>特に難しいのが 「いい感じ」を持ってくるところ。</p>
<blockquote>
<p>★ ここでいう「いい感じ」とは、関連度の高いキーワード とかでしょうか。</p>
</blockquote>
<blockquote>
<p>コンテキストによって「いい感じ」は変わってくるので皆さんが考える「いい感じ」を想像して読みすすめてください。</p>
</blockquote>
<h2 id="rdbms-では要件を満たせない">RDBMS では要件を満たせない</h2>
<p>RDBMS は特定のカラムでしか並び替えることができません。</p>
<p>例えば、作成日時で並べ替えるとか、名前のアルファベット順で並び替えるとかですね。</p>
<p>はてな社では、「いい感じ」の文章を上位に持ってくるために</p>
<p><u>スコアリング処理</u> を使用しているそうです。</p>
<br>
<p>しかし、スコアリング処理には、文章が持つさまざまな情報を複合的に利用する必要があります。</p>
<p>これは特定のカラムでしか並び替えできない RDBMS が苦手する分野です。</p>
<p>よって、ここで 用途特化型インデクシング が必要となります。</p>
<blockquote>
<p>★ いろんな人が投稿した記事（文章）を単語レベルに分割して</p>
</blockquote>
<blockquote>
<p>保存とかしているんでしょうか？</p>
</blockquote>
<blockquote>
<p>とにかく、文章全文が保存されたデータソースから検索するのではなくて、</p>
</blockquote>
<blockquote>
<p>より検索しやすい形に整形されたデータソースに対して</p>
</blockquote>
<blockquote>
<p>検索をかけることが大事ということが分かってもらえれば幸いです。</p>
</blockquote>
<br>
<p>はてな社では、スコアリングしやすいデータ構造に変換してやる処理（検索インデックス）を</p>
<p>自前で作成しています。（≒ 全文検索エンジンを自作）</p>
<p>すなわち、用途特化型インデクシングを作成し、全文検索しているわけですね。</p>
<h1 id="理論と実践">理論と実践</h1>
<p>全文検索システムは、RDBMS の JOIN を使って実現することもできるでしょう。（多分）</p>
<p>一方で、「RDBMS で JOIN を使わない」というのはよく聞く話です。</p>
<p>僕もコードレビューで、クエリ高速化のために JOIN を使わないように言われたことがありますし、</p>
<p>その考え方は理解できます。</p>
<p>しかし、それはRDS研究者からすれば「RDBMS で JOIN を使わないなんて、</p>
<p>RDS を否定しながら RDS を使うようなもの」と言われてしまいます。</p>
<br>
<p>ここで大事なのは、</p>
<p><u>「RDBMS で JOIN を使わない」というノウハウは 『実践』的にはすごく有益なノウハウであること。</u></p>
<p>しかし、JOIN句を使えば、全文検索システムを作ることができるし、</p>
<p>他の様々な場面においても JOIN句を使用することで解決できる問題はたくさんあります。</p>
<p>こっちは <u>『理論』</u> の話。</p>
<p>理論側では、JOIN句を使わないのは、バッドノウハウです。</p>
<br>
<p>何が言いたいかというと、</p>
<p>大規模な Webアプリケーション を運用・開発しようとすると、</p>
<p><u>実践も理論も両方やっていかないといけない</u> ということです。</p>
<p>直面した課題に対して、ある側面ではバッドノウハウであっても、</p>
<p>他の面から見たときにグッドノウハウであることがあります。</p>
<br>
<p><u>我々エンジニアに求められるのは、実践も理論も両方をバランス良く使う力です。</u></p>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/%E8%AA%AD%E6%9B%B8%E3%81%BE%E3%81%A8%E3%82%81" term="%E8%AA%AD%E6%9B%B8%E3%81%BE%E3%81%A8%E3%82%81" label="読書まとめ"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">【Web API（Rails） + Vue.js】ブログのいいねボタン自作してみた</title><link href="https://yyh-gl.github.io/tech-blog/blog/good_api/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/scrum_entry/?utm_source=atom_feed" rel="related" type="text/html" title="スクラムについて学んだ話"/><link href="https://yyh-gl.github.io/tech-blog/blog/terraform_ecs/?utm_source=atom_feed" rel="related" type="text/html" title="【Terraform + ECS + RDS】Terraform で ECS環境構築してみた"/><link href="https://yyh-gl.github.io/tech-blog/blog/android_push/?utm_source=atom_feed" rel="related" type="text/html" title="【Android + Kotlin + Firebase】Androidアプリにプッシュ通知を実装してみた"/><link href="https://yyh-gl.github.io/tech-blog/blog/engineering_organization_theory_mentoring/?utm_source=atom_feed" rel="related" type="text/html" title="【エンジニアリング組織論への招待】メンタリングの技術"/><link href="https://yyh-gl.github.io/tech-blog/blog/hello_world/?utm_source=atom_feed" rel="related" type="text/html" title="Hello Wolrd"/><id>https://yyh-gl.github.io/tech-blog/blog/good_api/</id><author><name>yyh-gl</name></author><published>2019-06-08T00:00:00+00:00</published><updated>2019-06-08T00:00:00+00:00</updated><content type="html"><![CDATA[<blockquote>いいね機能つけました</blockquote><h1 id="いいねボタンがないブログ">いいねボタンがないブログ</h1>
<p>本ブログ、いいねボタンが <u>ありませんでした</u>。</p>
<p>だから、作っちゃいました。っていう記事です。</p>
<h1 id="構成">構成</h1>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/06/good_api/architecture.png" width="600">
<br>
<p>上図のように</p>
<p>記事ページからAPIサーバにリクエストを送り、 いいねの数を取得・加算します。</p>
<p>記事ページからAPIサーバへのリクエスト部分（クライアント）には Vue + axios を使用。</p>
<p>APIサーバは Rails で実装しました。</p>
<p>（以前から Slackのスラッシュコマンド用に使用していたAPIサーバを流用しました）</p>
<h1 id="apiサーバ">APIサーバ</h1>
<p>Rails で APIサーバを建てる方法に関しては、</p>
<p>以前に Qiita で <a href="https://qiita.com/yyh-gl/items/30bd91c2b33fdfbe49b5" target="_blank" rel="noopener noreferrer">入門記事</a>
 書いたのでそちらをご覧ください。</p>
<p>（少し古い記事ですが、そんなに問題はないはずです）</p>
<h2 id="db-にテーブル作成">DB にテーブル作成</h2>
<p>今回、ブログ記事を管理するために、下記のテーブルを作成しました。</p>
<pre><code>mysql&gt; describe blog_posts;
+------------+--------------+------+-----+---------+----------------+
| Field      | Type         | Null | Key | Default | Extra          |
+------------+--------------+------+-----+---------+----------------+
| id         | bigint(20)   | NO   | PRI | NULL    | auto_increment |
| title      | varchar(255) | NO   |     | NULL    |                |
| count      | varchar(255) | NO   |     | 0       |                |
| created_at | datetime     | NO   |     | NULL    |                |
| updated_at | datetime     | NO   |     | NULL    |                |
+------------+--------------+------+-----+---------+----------------+
5 rows in set (0.00 sec)
</code></pre>
<p><code>title</code>には、日本語のタイトル（本記事だと『【WEB API（RAILS） + VUE.JS】ブログのいいねボタン自作してみた』）ではなく、
記事ファイル（マークダウン）の名前（本記事だと『good_api』, 拡張子抜き）が入ります。</p>
<br>
<p>Web上の記事データと APIサーバのレコード をどうやって結びつけるか考えたとき、</p>
<p>ページが持っている記事の情報って、 URL に含まれる 記事ファイル名 しかないなぁ…と考え、</p>
<p>URL から取得した 英title と テーブルの <code>title</code> が一致するものを探すようにしました。</p>
<h2 id="corsの設定">CORSの設定</h2>
<p>今回重要なのは CORS の設定です。</p>
<p>CORS を説明するとなると、 CSRF の説明やらなんやらで、とても長くなり、本題からかなり脱線するので</p>
<p>今回は <a href="http://watanabe-tsuyoshi.hatenablog.com/entry/2015/03/04/123649" target="_blank" rel="noopener noreferrer">こちらのサイト</a>
 をご紹介するだけにしておきます。</p>
<p>僕的に一番分かりやすかったです。</p>
<p>・</p>
<p>・</p>
<p>・</p>
<p>では、本題の CORS の設定についてですが、</p>
<p>Rails における CORS の設定はとても簡単です。</p>
<div>
<ol>
<li>
<p>Gemfile に <code>rack-cors</code> を追加</p>
<p>Rails で生成した Gemfile にデフォルトで入っていますが、コメントアウトされています。</p>
<p>コメントを解除してあげましょう。</p>
<pre><code class="language-text"># Gemfile

…省略

# Use Rack CORS for handling Cross-Origin Resource Sharing (CORS), making cross-origin AJAX possible
gem 'rack-cors'

…省略
</code></pre>
</li>
<li>
<p><code>cors.rb</code> を編集</p>
<p>こちらも元から存在するファイルです。</p>
<p>中身に関しては、コメントを解除してあげるだけでOKです。</p>
<pre><code class="language-ruby"># &lt;Rails Root Directory&gt;/config/initializers/cors.rb   

Rails.application.config.middleware.insert_before 0, Rack::Cors do
  allow do
    origins 'https://yyh-gl.github.io'

    resource '*',
      headers: :any,
      methods: [:get, :post, :options]
  end
end
</code></pre>
<p><code>origins</code> で指定した場所からのアクセスに関しては、同一生成元ポリシーを少し無視して</p>
<p>アクセスを許可します。</p>
<p>ワイルドカードによる指定もできます。</p>
<p>今回は、僕のブログからのアクセスのみを許可します。</p>
 <br>
<p><code>resource</code> によってアクセスを許可するリソースを指定できます。</p>
<p><code>resource</code> で許可したリソースに対して、</p>
<p><code>headers</code> および <code>methods</code> で指定したヘッダおよびメソッドのみを受け付けます。</p>
 <br>
<p><a href="https://github.com/cyu/rack-cors#rack-configuration" target="_blank" rel="noopener noreferrer">こちら</a>
 を見ていただければ、より詳しい設定方法が分かると思います。</p>
<p>今回実装するAPIは GET と POST しか使わないので</p>
<p><code>methods: [:get, :post, :options]</code> となっています。</p>
 <br>
<p><code>options</code> は <u>プリフライトリクエスト</u> と言って、</p>
<p>事前にサーバに対してリクエストを送信しても大丈夫か問い合わせるさいに使用します（<a href="https://developer.mozilla.org/ja/docs/Web/HTTP/CORS#Preflighted_requests" target="_blank" rel="noopener noreferrer">参考</a>
）。</p>
<p>忘れずに追加しましょう。
<br></p>
</li>
</ol>
</div>
<br>
以上で、Rails における CORS の設定は完了です。
<h1 id="クライアントの実装">クライアントの実装</h1>
<p>次は、記事ページからリクエストを送る部分です。</p>
<p>まず、HTMLファイルはこんな感じです ↓</p>
<pre><code class="language-html">&lt;html&gt;
      &lt;div id=&quot;GoodCounter&quot;&gt;
        &lt;good-counter&gt;&lt;/good-counter&gt;
      &lt;/div&gt;
&lt;/html&gt;

&lt;script src=&quot;/tech-blog/js/axios.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;/tech-blog/js/vue.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;/tech-blog/js/vue_app.js&quot;&gt;&lt;/script&gt;
</code></pre>
<p>中の処理を説明すると、</p>
<p>IDが <code>GoodCounter</code> の <code>div</code>要素の部分に Vue コンポーネント（後述）を入れ込んでいます。</p>
<p><code>script</code>タグは、上から axios, Vue, Vue コンポーネント を読み込んでいます。</p>
<p>次に Vue コンポーネントです。</p>
<pre><code class="language-js">// vue_app.js

Vue.component('good-counter', {
  template: '&lt;button v-on:click=&quot;addCount&quot;&gt;\n' +
    '&lt;i class=&quot;far fa-thumbs-up&quot;&gt;&lt;/i&gt; いいね　｛｛ good_count ｝｝\n' +
    '&lt;/button&gt;',
  data: function () {
    return {
      good_count: &quot;-&quot;,
    }
  },
  mounted () {
    // URL から記事情報を取得
    let paths = location.pathname.split('/');
    // URL のタイトル部分のみを抽出
    // GET /posts/:title への リクエストURL を作成
    let reqUrl = '&lt;server url&gt;' + paths[paths.length - 2];

    axios
      .get(reqUrl)
      .then(response =&gt; this.good_count = response.data.post.count)
  },
  methods: {
    addCount: function (event) {
      // URL から記事情報を取得
      let paths = location.pathname.split('/');
      // URL のタイトル部分のみを抽出
      // POST /posts/:title/good への リクエストURL を作成
      let reqUrl = '&lt;server url&gt;' + paths[paths.length - 2] + '/good';

      if(event) {
        axios
          .post(reqUrl)
          .then(response =&gt; this.good_count = response.data.after)
      }
    }
  }
});

// root インスタンスを作成
new Vue({
  el: '#GoodCounter',
});
</code></pre>
<p>いろいろ書いていますが、 URL から記事タイトルを取得し、</p>
<p>それを基にリクエストを送っているだけです。</p>
<p>Vue コンポーネントのマウント時に いいねの数を GET しています。</p>
<p>そして、いいねボタンが押されるたびに <code>addCount()</code> が実行されて、 いいね が加算されます。</p>
<br>
<p>Vue の SFC を使いたかったのですが、勉強不足で実現できず、このような実装になりました。</p>
<p>詳しい人ぜひ教えてください。</p>
<h1 id="完成">完成！</h1>
<p>できあがったものは、↓ の方にスクロールしていったら実物があるので見てみてください</p>
<br>
<p>だれがいいねしてくれたかは分からないですが、 誰かがしてくれた という事実を噛み締めたいと思います。</p>
<br>
<p>Vue は僕の会社でも使われているので、今後も積極的にキャッチアップを続けていきたいです。</p>
<p>フロントの知識もっとつけていきたいですねー👾</p>
<p>（APIサーバへのアクセスを制限しないとな…）</p>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/web-api" term="web-api" label="Web API"/><category scheme="https://yyh-gl.github.io/tech-blog/categories/vue.js" term="vue.js" label="Vue.js"/><category scheme="https://yyh-gl.github.io/tech-blog/categories/html/css" term="html/css" label="HTML/CSS"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">スクラムについて学んだ話</title><link href="https://yyh-gl.github.io/tech-blog/blog/scrum_entry/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/terraform_ecs/?utm_source=atom_feed" rel="related" type="text/html" title="【Terraform + ECS + RDS】Terraform で ECS環境構築してみた"/><link href="https://yyh-gl.github.io/tech-blog/blog/android_push/?utm_source=atom_feed" rel="related" type="text/html" title="【Android + Kotlin + Firebase】Androidアプリにプッシュ通知を実装してみた"/><link href="https://yyh-gl.github.io/tech-blog/blog/engineering_organization_theory_mentoring/?utm_source=atom_feed" rel="related" type="text/html" title="【エンジニアリング組織論への招待】メンタリングの技術"/><link href="https://yyh-gl.github.io/tech-blog/blog/hello_world/?utm_source=atom_feed" rel="related" type="text/html" title="Hello Wolrd"/><id>https://yyh-gl.github.io/tech-blog/blog/scrum_entry/</id><author><name>yyh-gl</name></author><published>2019-06-05T00:00:00+00:00</published><updated>2019-06-05T00:00:00+00:00</updated><content type="html"><![CDATA[<h1 id="スクラムとは">スクラムとは</h1>
<h2 id="概要">概要</h2>
<ul>
<li>
<p><u>変化に対し柔軟に開発を運用するためのアジャイルフレームワーク</u></p>
</li>
<li>
<p>開発に常に優先度をつける</p>
</li>
<li>
<p>仕事を進めることを主眼に考え、そのために改善を常に行う</p>
</li>
<li>
<p>ロールが3つあり、協調しあい開発する</p>
<ul>
<li>プロダクトオーナー</li>
<li>スクラムチーム</li>
<li>開発チーム</li>
</ul>
</li>
<li>
<p>POが満足するアウトプットがあったかのみを検証</p>
</li>
<li>
<p>5つのイベントがある（後述）</p>
</li>
<li>
<p>2つのアウトプット（成果物）がある（後述）</p>
</li>
</ul>
<h2 id="特徴">特徴</h2>
<ul>
<li>
<p>非常にシンプルなフレームワーク</p>
<ul>
<li>定められたルールが他の手法より少なくアレンジが容易</li>
</ul>
</li>
<li>
<p>実践的で経験主義</p>
</li>
<li>
<p>世界的に普及している</p>
</li>
</ul>
<h1 id="アジャイル開発とは">アジャイル開発とは</h1>
<h2 id="アジャイルとスクラムの違い">アジャイルとスクラムの違い</h2>
<p>スクラムとはアジャイル開発手法のひとつ</p>
<p>他にもXPとかがある</p>
<h1 id="アジャイルソフトウェア開発宣言">アジャイルソフトウェア開発宣言</h1>
<p><a href="https://agilemanifesto.org/iso/ja/manifesto.html" target="_blank" rel="noopener noreferrer">ここ</a>
にいろいろな言語で宣言されています</p>
<p>この宣言では以下のことを重要視している</p>
<ul>
<li>個人と対話</li>
<li>動くソフトウェア</li>
<li>顧客との協調</li>
<li>変化への対応</li>
</ul>
<h1 id="スクラムとウォータフォールの違い">スクラムとウォータフォールの違い</h1>
<ul>
<li>
<p>ウォータフォール</p>
<ul>
<li>計画、設計、実装、テストが一方向に進む</li>
<li>リリース直前の実装や仕様に漏れがあると最悪の場合プロジェクトがぽしゃる</li>
<li>運用・保守には強い。新規案件向けではない</li>
</ul>
</li>
<li>
<p>スクラム</p>
<ul>
<li>開発期間中に計画、設計、実装、テストのリサイクルを何度も回す</li>
<li>細かいスパンでリリースするので、大きな手戻りが少ない</li>
</ul>
</li>
</ul>
<h1 id="スクラムで登場するロール役割">スクラムで登場するロール（役割）</h1>
<p>あくまでテンプレの内容を紹介</p>
<p>自分のチームに合わせて変えてOK（むしろカスタマイズすることが重要）</p>
<h2 id="プロダクトオーナーpo">プロダクトオーナー（PO）</h2>
<ul>
<li>
<p>役割</p>
<ul>
<li>プロダクトのビジネス価値に責任を持つ</li>
<li>リリース判断をすることができる</li>
<li>優先度の判断役</li>
</ul>
</li>
<li>
<p>求められる力</p>
<ul>
<li>情報アウトプット（見える化、透明性） → 実現したいことをちゃんと伝える力</li>
<li>クライアントとチームを繋ぐハブ役</li>
</ul>
</li>
</ul>
<h2 id="スクラムマスターsm">スクラムマスター（SM）</h2>
<ul>
<li>
<p>役割</p>
<ul>
<li>スクラム開発に関わる全ての人を支援し、成功に導く
<ul>
<li>POのビジネス的な相談を受けたり、開発チームの技術的な相談を受けたり などなど</li>
</ul>
</li>
<li>スクラムの理論や価値を関係者全員に教え、理解してもらう</li>
<li>開発チームへの障害や外部干渉を取り除き、防ぐ</li>
</ul>
</li>
<li>
<p>求められる力</p>
<ul>
<li>サーヴァントリーダシップ（奉仕型リーダー）
<ul>
<li>下からみんなを持ち上げるようなリーダー</li>
</ul>
</li>
<li>理解と実行の話づくりと良きファシリテーター</li>
</ul>
</li>
</ul>
<br>
<blockquote>
<p><u>SMが開発に加わるのはOK？</u></p>
</blockquote>
<blockquote>
<p>チームが良しとするならばOK。</p>
</blockquote>
<blockquote>
<p>はじめから参加することは基本的にない。</p>
</blockquote>
<h2 id="開発チーム">開発チーム</h2>
<ul>
<li>
<p>役割</p>
<ul>
<li>具体的な開発を遂行</li>
<li>リリース可能なプロダクトバックログアイテムを完成させる</li>
<li>何をどのように作るか決定する（POは実現したいものを言うが、どうやって作り上げるかは開発チームに委ねる）</li>
</ul>
</li>
<li>
<p>求められる力</p>
<ul>
<li>主体性と協調性（ただ作るだけの存在にならない） → 受注体質はだめ</li>
<li>仮説や知識を理解し、サービス価値向上の施策を立案する</li>
</ul>
</li>
</ul>
<h2 id="関係図">関係図</h2>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/06/scrum_entry/relationship.png" width="600">
<br>
<blockquote>
<p><u>ランダムロールってうまくいく？</u></p>
</blockquote>
<blockquote>
<p>ランダムロール：SMがおらず、スプリントごとにランダムにロールを決定すること</p>
</blockquote>
<blockquote>
<p>ランダムロールは難しい。各ロールを理解が出来ていることが重要。</p>
</blockquote>
<blockquote>
<p>全員が「ロールの役割をチーム内で合意できている状態」になっていることが重要。</p>
</blockquote>
<blockquote>
<p>見切り発車は危険。チームが成熟しているとうまくいきそう。</p>
</blockquote>
<h1 id="スクラムはイベントで構成されている">スクラムは「イベント」で構成されている</h1>
<h2 id="定義">定義</h2>
<p>イベントとはスプリント内に規則性を作り出すためのタイムボックスのこと</p>
<p>→ 定義されていないMTGの必要性を最小限にできる</p>
<h2 id="目的">目的</h2>
<p>進むべき方向が間違っていないかを確認する</p>
<h2 id="イベントの種類">イベントの種類</h2>
<p>以下5つのイベントがある。</p>
<h2 id="1-スプリントプランニング">1. スプリントプランニング</h2>
<ul>
<li>
<p>達成できるプロダクトバックログアイテムを約束する</p>
</li>
<li>
<p>開発チームとSMでやり、POに報告する</p>
</li>
<li>
<p><u>何をどのように作るか、どういう状態をゴールとするか決定する</u></p>
</li>
<li>
<p>チーム全員が同意していることが大事</p>
</li>
<li>
<p>二部制で実施</p>
<ul>
<li>第一部：何を作るか 検討
<ul>
<li>どのくらいできるか</li>
<li>どれをやるか</li>
</ul>
</li>
<li>第二部：どう作るか 検討</li>
</ul>
</li>
</ul>
<h2 id="2-デイリースクラム">2. デイリースクラム</h2>
<ul>
<li>
<p>開発チームが毎日やる短い打ち合わせ</p>
<ul>
<li>15分以上やってはいけない</li>
</ul>
</li>
<li>
<p>スプリントゴールとバックログの進捗の検査を行う</p>
</li>
<li>
<p>現在のスプリント終了までに期待される成果物を作成できるのか毎日把握しなければいけない</p>
</li>
<li>
<p>内容は開発チームが設定し、質問ベースで会話したり、議論ベースで会話してもよい</p>
</li>
<li>
<p>POとSMは参加しない</p>
<ul>
<li>参加すると、開発チームからPO、SMに報告する場になってしまうから、開発チーム内での議論が弾まなくなる。
ただし、スクラム初心者のチームに関してはSMがファシリテーターとして参加することもある。</li>
</ul>
</li>
<li>
<p>デイリースクラムは問題解決の場ではない</p>
<ul>
<li>この場では「こういう問題が発生した」という障害となる事柄を伝えるだけにする（その後当事者を集めたりしたらいい）</li>
</ul>
</li>
</ul>
<h2 id="3-リファインメント">3. リファインメント</h2>
<ul>
<li>
<p>POによるプロダクトバックログアイテムの詳細化と優先順位の見直しや調整を行う</p>
</li>
<li>
<p>POと開発チームが参加し、ロードマップやサービスビジョンからプロダクトバックログアイテムの作成する</p>
<ul>
<li>新しく増えたプロダクトバックログアイテムの優先度見直して、全体の並び替えを行う</li>
</ul>
</li>
<li>
<p>時間は未定で、チームで決める</p>
</li>
</ul>
<h2 id="4-スプリントレビュー">4. スプリントレビュー</h2>
<ul>
<li>
<p>スクラムチームとステークホルダーが強力し、成果物の検査・適応をする</p>
</li>
<li>
<p>開発チームがPOとステークホルダーに対して、完了した成果物のデモを行い、イベント参加者からの質問に答える</p>
</li>
<li>
<p>リリースするかどうかPOの判断に一任され、そこで出た不具合や新たな要求はプロダクトバックログに追加される</p>
</li>
<li>
<p><u>大事なことは動くものを見せること。そして、素直に話すこと（機能改善などについて思ったことを素直に話す）</u></p>
</li>
</ul>
<h2 id="5-レトロスペクティブ">5. レトロスペクティブ</h2>
<ul>
<li>
<p>日本語にすると「振り返り」</p>
</li>
<li>
<p>スプリントの検査を行い、改善計画を立てる</p>
</li>
<li>
<p><u>反省会ではないことを意識する。</u></p>
<ul>
<li>反省会：悪かったことを言うだけで、次の行動を決めない状況</li>
</ul>
</li>
<li>
<p>会話から出た項目に関して、その結果を確認するためのアクションを洗い出し、<u>次回のスプリントバックログに含めなければいけない。</u></p>
</li>
</ul>
<h1 id="スクラムにおける成果物とは">スクラムにおける成果物とは</h1>
<h2 id="プロダクトバックログpbl">プロダクトバックログ（PBL）</h2>
<h3 id="定義-1">定義</h3>
<p>優先順位が決められた要求事項（プロダクトバックログアイテム（PBLI））が集まって一覧化されたもの</p>
<h3 id="責任者">責任者</h3>
<p>POが責任を持つ</p>
<h3 id="ライフサイクル">ライフサイクル</h3>
<p>★調べて追記する予定</p>
<h2 id="スプリントバックログsbl">スプリントバックログ（SBL）</h2>
<h3 id="定義-2">定義</h3>
<p>スプリントにおける開発チームのしごとを定義したタスクリスト</p>
<h3 id="責任者-1">責任者</h3>
<p>開発チームが責任を持つ</p>
<h3 id="ライフサイクル-1">ライフサイクル</h3>
<p>スプリントの間だけ存在する（スプリントごとに更新される）</p>
<h1 id="まとめ">まとめ</h1>
<p><u>スクラムはあくまでフレームワークである。</p>
<p>銀の弾丸ではない。</u></p>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/%E3%82%B9%E3%82%AF%E3%83%A9%E3%83%A0" term="%E3%82%B9%E3%82%AF%E3%83%A9%E3%83%A0" label="スクラム"/><category scheme="https://yyh-gl.github.io/tech-blog/categories/%E5%85%A5%E9%96%80" term="%E5%85%A5%E9%96%80" label="入門"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">【Terraform + ECS + RDS】Terraform で ECS環境構築してみた</title><link href="https://yyh-gl.github.io/tech-blog/blog/terraform_ecs/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/android_push/?utm_source=atom_feed" rel="related" type="text/html" title="【Android + Kotlin + Firebase】Androidアプリにプッシュ通知を実装してみた"/><link href="https://yyh-gl.github.io/tech-blog/blog/engineering_organization_theory_mentoring/?utm_source=atom_feed" rel="related" type="text/html" title="【エンジニアリング組織論への招待】メンタリングの技術"/><link href="https://yyh-gl.github.io/tech-blog/blog/hello_world/?utm_source=atom_feed" rel="related" type="text/html" title="Hello Wolrd"/><id>https://yyh-gl.github.io/tech-blog/blog/terraform_ecs/</id><author><name>yyh-gl</name></author><published>2019-06-04T00:00:00+00:00</published><updated>2019-06-04T00:00:00+00:00</updated><content type="html"><![CDATA[<h1 id="terraform-とは">Terraform とは</h1>
<p>最近流行りの IaC です。</p>
<p>つまり、コードベースでインフラリソースを管理するためのツールです。</p>
<p>中でもTerraform はクラウドに特化した IaC ツールという立ち位置です。</p>
<p>AWSやGCP, Azure などの他に<a href="https://www.terraform.io/docs/providers/index.html" target="_blank" rel="noopener noreferrer">様々なクラウドプラットフォーム</a>
に対応しています。</p>
<p>（ちなみに、Vagrant 開発元の <a href="https://www.hashicorp.com/" target="_blank" rel="noopener noreferrer">HashiCorp</a>
 社が開発しています）</p>
<h1 id="今回やること">今回やること</h1>
<p>Terraform で AWS 上に下記のような環境を自動構築します。</p>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/06/terraform_ecs/architecture.png" width="600">
<br>
<p>ECS でデプロイされるサービスは ECR から引っ張ってくるようにします。</p>
<p>そして、そのサービスは Aurora を使うシステムを想定しています。</p>
<p><u>【⚠注意⚠】上記構成はお金が発生します！ まったくもって無料枠ではありません！</u></p>
<p>【⚠注意⚠】今回独自ドメインを使用していますが、ドメイン取得に関しては省略しています。</p>
<h2 id="今回やる内容は">今回やる内容は…</h2>
<p>僕が所属する会社の研修資料を参考に進めています。</p>
<p>資料を作成してくださった<a href="https://twitter.com/_y_ohgi" target="_blank" rel="noopener noreferrer">@_y_ohgi</a>
さんに感謝。</p>
<h1 id="自動構築プロセス全体で使用する共通設定を定義">自動構築プロセス全体で使用する共通設定を定義</h1>
<p>まず、 <code>main.tf</code> を作成し、以下のとおり共通設定を定義していきます。</p>
<pre><code># AWS を利用することを明示
provider &quot;aws&quot; {
    # リージョンを設定
    region = &quot;ap-northeast-1&quot;
}

# これから作成するリソースに付与する名前のプリフィックスを設定
# グローバル変数的な立ち位置で定義
variable &quot;prefix&quot; {
    default = &quot;sample-project&quot;
}
</code></pre>
<p><code>provider</code> で使用するクラウドを指定することができます。</p>
<p><code>variable</code> は変数定義です。</p>
<p><code>${var.prefix}</code> と書くことで <code>default</code> で指定した内容が展開されます。</p>
<p>（次の定義ファイルでも変数が出てくるので、そこで使いかたを見てみてください。）</p>
<p>なお、変数定義を別ファイルに切り出す方法もあるようですが、今回はやりません。</p>
<p>切り出す方法は<a href="https://qiita.com/ringo/items/3af1735cd833fb80da75#%E5%A4%89%E6%95%B0%E6%88%A6%E7%95%A5%E8%A8%AD%E8%A8%88" target="_blank" rel="noopener noreferrer">こちら</a>
が参考になると思います。</p>
<h1 id="route53-の設定">Route53 の設定</h1>
<p><code>route53_acm.tf</code> を作成し、以下のとおり定義します。</p>
<p>内部で ACM に関する定義も行っています。</p>
<p>以降、クラウドプラットフォームに依存しない設定に関しては【解説】コメントで解説を行っています。</p>
<p>各 resource の定義内容に関しては コメントにあるURLを参考にしてください。</p>
<blockquote>
<p>英語ではありますが、<a href="https://www.terraform.io/docs/providers/aws/index.html" target="_blank" rel="noopener noreferrer">公式ドキュメント</a>
がとても分かりやすいです</p>
</blockquote>
<pre><code># ドメイン名の設定
variable &quot;domain&quot; {
    description = &quot;「Route53で管理するドメイン」 などの説明文&quot;
    type        = &quot;string&quot;

    # みなさんが持つドメイン名にしてください
    default = &quot;example.com&quot;
}

# Route53 Hosted Zone
# https://www.terraform.io/docs/providers/aws/d/route53_zone.html
# 【解説】data で始まっていますが、これは読み取り専用のリソースであることを示します。
# すでにクラウド上に存在するリソースの値を参照するために使用します。
data &quot;aws_route53_zone&quot; &quot;main&quot; {
    name         = &quot;${var.domain}&quot; # 変数を展開しているところ、ここです
    private_zone = false
}

# ACM
# https://www.terraform.io/docs/providers/aws/r/acm_certificate.html
# 【解説】resource は作成するリソースを定義する場所です。
resource &quot;aws_acm_certificate&quot; &quot;main&quot; {
    domain_name = &quot;${var.domain}&quot;

    validation_method = &quot;DNS&quot;

    lifecycle {
        create_before_destroy = true
    }
}

# Route53 record
# ACMによる検証用レコード
# https://www.terraform.io/docs/providers/aws/r/route53_record.html
resource &quot;aws_route53_record&quot; &quot;validation&quot; {
    depends_on = [&quot;aws_acm_certificate.main&quot;]

    zone_id = &quot;${data.aws_route53_zone.main.id}&quot;

    ttl = 60

    name    = &quot;${aws_acm_certificate.main.domain_validation_options.0.resource_record_name}&quot;
    type    = &quot;${aws_acm_certificate.main.domain_validation_options.0.resource_record_type}&quot;
    records = [&quot;${aws_acm_certificate.main.domain_validation_options.0.resource_record_value}&quot;]
}

# ACM Validate
# https://www.terraform.io/docs/providers/aws/r/acm_certificate_validation.html
resource &quot;aws_acm_certificate_validation&quot; &quot;main&quot; {
    certificate_arn = &quot;${aws_acm_certificate.main.arn}&quot;

    validation_record_fqdns = [&quot;${aws_route53_record.validation.0.fqdn}&quot;]
}

# Route53 record
# https://www.terraform.io/docs/providers/aws/r/route53_record.html
resource &quot;aws_route53_record&quot; &quot;main&quot; {
    type = &quot;A&quot;

    name    = &quot;${var.domain}&quot;
    zone_id = &quot;${data.aws_route53_zone.main.id}&quot;

    alias = {
        name                   = &quot;${aws_lb.main.dns_name}&quot;
        zone_id                = &quot;${aws_lb.main.zone_id}&quot;
        evaluate_target_health = true
    }
}

# ALB Listener
# https://www.terraform.io/docs/providers/aws/r/lb_listener.html
resource &quot;aws_lb_listener&quot; &quot;https&quot; {
    load_balancer_arn = &quot;${aws_lb.main.arn}&quot;

    certificate_arn = &quot;${aws_acm_certificate.main.arn}&quot;

    port     = &quot;443&quot;
    protocol = &quot;HTTPS&quot;

    default_action {
        type             = &quot;forward&quot;
        target_group_arn = &quot;${aws_lb_target_group.main.id}&quot;
    }
}

# ALB Listener Rule
# https://www.terraform.io/docs/providers/aws/r/lb_listener_rule.html
resource &quot;aws_lb_listener_rule&quot; &quot;http_to_https&quot; {
    listener_arn = &quot;${aws_lb_listener.main.arn}&quot;

    priority = 99

    action {
        type = &quot;redirect&quot;

        redirect {
            port        = &quot;443&quot;
            protocol    = &quot;HTTPS&quot;
            status_code = &quot;HTTP_301&quot;
        }
    }

    condition {
        field  = &quot;host-header&quot;
        values = [&quot;${var.domain}&quot;]
    }
}

# Security Group Rule
# https://www.terraform.io/docs/providers/aws/r/security_group_rule.html
resource &quot;aws_security_group_rule&quot; &quot;alb_https&quot; {
    security_group_id = &quot;${aws_security_group.alb.id}&quot;

    type = &quot;ingress&quot;

    from_port = 443
    to_port   = 443
    protocol  = &quot;tcp&quot;

    cidr_blocks = [&quot;0.0.0.0/0&quot;]
}
</code></pre>
<h1 id="vpcの設定">VPCの設定</h1>
<p><code>vpc.tf</code> を以下のとおり定義します。</p>
<p>ここで、 <code>main.tf</code> で定義した変数が大活躍します。</p>
<pre><code># VPC
# https://www.terraform.io/docs/providers/aws/r/vpc.html
resource &quot;aws_vpc&quot; &quot;main&quot; {
	cidr_block = &quot;10.0.0.0/16&quot;

	tags = {
		Name = &quot;${var.prefix}-vpc&quot;
	}
}

# Public Subnet
# https://www.terraform.io/docs/providers/aws/r/subnet.html
resource &quot;aws_subnet&quot; &quot;public_1a&quot; {
	# 先程作成したVPCを参照し、そのVPC内にSubnetを立てる
	vpc_id = &quot;${aws_vpc.main.id}&quot;

	# Subnetを作成するAZ
	availability_zone = &quot;ap-northeast-1a&quot;

	cidr_block = &quot;10.0.1.0/24&quot;

	tags = {
		Name = &quot;${var.prefix}-public-1a&quot;
	}
}

resource &quot;aws_subnet&quot; &quot;public_1c&quot; {
	vpc_id = &quot;${aws_vpc.main.id}&quot;

	availability_zone = &quot;ap-northeast-1c&quot;

	cidr_block = &quot;10.0.2.0/24&quot;

	tags = {
		Name = &quot;${var.prefix}-public-1c&quot;
	}
}

resource &quot;aws_subnet&quot; &quot;public_1d&quot; {
	vpc_id = &quot;${aws_vpc.main.id}&quot;

	availability_zone = &quot;ap-northeast-1d&quot;

	cidr_block = &quot;10.0.3.0/24&quot;

	tags = {
		Name = &quot;${var.prefix}-public-1d&quot;
	}
}

# Private Subnets
resource &quot;aws_subnet&quot; &quot;private_1a&quot; {
	vpc_id = &quot;${aws_vpc.main.id}&quot;

	availability_zone = &quot;ap-northeast-1a&quot;

	cidr_block = &quot;10.0.10.0/24&quot;

	tags = {
		Name = &quot;${var.prefix}-private-1a&quot;
	}
}

resource &quot;aws_subnet&quot; &quot;private_1c&quot; {
	vpc_id = &quot;${aws_vpc.main.id}&quot;

	availability_zone = &quot;ap-northeast-1c&quot;

	cidr_block = &quot;10.0.20.0/24&quot;

	tags = {
		Name = &quot;${var.prefix}-private-1c&quot;
	}
}

resource &quot;aws_subnet&quot; &quot;private_1d&quot; {
	vpc_id = &quot;${aws_vpc.main.id}&quot;

	availability_zone = &quot;ap-northeast-1d&quot;

	cidr_block = &quot;10.0.30.0/24&quot;

	tags = {
		Name = &quot;${var.prefix}-private-1d&quot;
	}
}

# Internet Gateway
# https://www.terraform.io/docs/providers/aws/r/internet_gateway.html
resource &quot;aws_internet_gateway&quot; &quot;main&quot; {
	vpc_id = &quot;${aws_vpc.main.id}&quot;

	tags = {
		Name = &quot;${var.prefix}-igw&quot;
	}
}

# Elasti IP
# NAT Gateway には1つの Elastic IP が必要なので作成
# https://www.terraform.io/docs/providers/aws/r/eip.html
resource &quot;aws_eip&quot; &quot;nat_1a&quot; {
	vpc = true

	tags = {
		Name = &quot;${var.prefix}-eip-for-natgw-1a&quot;
	}
}

# NAT Gateway
# https://www.terraform.io/docs/providers/aws/r/nat_gateway.html
resource &quot;aws_nat_gateway&quot; &quot;nat_1a&quot; {
	subnet_id     = &quot;${aws_subnet.public_1a.id}&quot; # NAT Gatewayを配置するSubnetを指定
	allocation_id = &quot;${aws_eip.nat_1a.id}&quot;       # 紐付けるElasti IP

	tags = {
		Name = &quot;${var.prefix}-natgw-1a&quot;
	}
}

resource &quot;aws_eip&quot; &quot;nat_1c&quot; {
	vpc = true

	tags = {
		Name = &quot;${var.prefix}-eip-for-natgw-1c&quot;
	}
}

resource &quot;aws_nat_gateway&quot; &quot;nat_1c&quot; {
	subnet_id     = &quot;${aws_subnet.public_1c.id}&quot;
	allocation_id = &quot;${aws_eip.nat_1c.id}&quot;

	tags = {
		Name = &quot;${var.prefix}-natgw-1c&quot;
	}
}

resource &quot;aws_eip&quot; &quot;nat_1d&quot; {
	vpc = true

	tags = {
		Name = &quot;${var.prefix}-eip-for-natgw-1d&quot;
	}
}

resource &quot;aws_nat_gateway&quot; &quot;nat_1d&quot; {
	subnet_id     = &quot;${aws_subnet.public_1d.id}&quot;
	allocation_id = &quot;${aws_eip.nat_1d.id}&quot;

	tags = {
		Name = &quot;${var.prefix}-natgw-1d&quot;
	}
}

# Route Table
# https://www.terraform.io/docs/providers/aws/r/route_table.html
resource &quot;aws_route_table&quot; &quot;public&quot; {
	vpc_id = &quot;${aws_vpc.main.id}&quot;

	tags = {
		Name = &quot;${var.prefix}-public-route-table&quot;
	}
}

# Route
# https://www.terraform.io/docs/providers/aws/r/route.html
resource &quot;aws_route&quot; &quot;public&quot; {
	destination_cidr_block = &quot;0.0.0.0/0&quot;
	route_table_id         = &quot;${aws_route_table.public.id}&quot;
	gateway_id             = &quot;${aws_internet_gateway.main.id}&quot;
}

# Association
# https://www.terraform.io/docs/providers/aws/r/route_table_association.html
resource &quot;aws_route_table_association&quot; &quot;public_1a&quot; {
	subnet_id      = &quot;${aws_subnet.public_1a.id}&quot;
	route_table_id = &quot;${aws_route_table.public.id}&quot;
}

resource &quot;aws_route_table_association&quot; &quot;public_1c&quot; {
	subnet_id      = &quot;${aws_subnet.public_1c.id}&quot;
	route_table_id = &quot;${aws_route_table.public.id}&quot;
}

resource &quot;aws_route_table_association&quot; &quot;public_1d&quot; {
	subnet_id      = &quot;${aws_subnet.public_1d.id}&quot;
	route_table_id = &quot;${aws_route_table.public.id}&quot;
}

# Route Table (Private)
# https://www.terraform.io/docs/providers/aws/r/route_table.html
resource &quot;aws_route_table&quot; &quot;private_1a&quot; {
	vpc_id = &quot;${aws_vpc.main.id}&quot;

	tags = {
		Name = &quot;${var.prefix}--private-1a&quot;
	}
}

resource &quot;aws_route_table&quot; &quot;private_1c&quot; {
	vpc_id = &quot;${aws_vpc.main.id}&quot;

	tags = {
		Name = &quot;${var.prefix}--private-1c&quot;
	}
}

resource &quot;aws_route_table&quot; &quot;private_1d&quot; {
	vpc_id = &quot;${aws_vpc.main.id}&quot;

	tags = {
		Name = &quot;${var.prefix}--private-1d&quot;
	}
}

# Route (Private)
# https://www.terraform.io/docs/providers/aws/r/route.html
resource &quot;aws_route&quot; &quot;private_1a&quot; {
	destination_cidr_block = &quot;0.0.0.0/0&quot;
	route_table_id         = &quot;${aws_route_table.private_1a.id}&quot;
	nat_gateway_id         = &quot;${aws_nat_gateway.nat_1a.id}&quot;
}

resource &quot;aws_route&quot; &quot;private_1c&quot; {
	destination_cidr_block = &quot;0.0.0.0/0&quot;
	route_table_id         = &quot;${aws_route_table.private_1c.id}&quot;
	nat_gateway_id         = &quot;${aws_nat_gateway.nat_1c.id}&quot;
}

resource &quot;aws_route&quot; &quot;private_1d&quot; {
	destination_cidr_block = &quot;0.0.0.0/0&quot;
	route_table_id         = &quot;${aws_route_table.private_1d.id}&quot;
	nat_gateway_id         = &quot;${aws_nat_gateway.nat_1d.id}&quot;
}

# Association (Private)
# https://www.terraform.io/docs/providers/aws/r/route_table_association.html
resource &quot;aws_route_table_association&quot; &quot;private_1a&quot; {
	subnet_id      = &quot;${aws_subnet.private_1a.id}&quot;
	route_table_id = &quot;${aws_route_table.private_1a.id}&quot;
}

resource &quot;aws_route_table_association&quot; &quot;private_1c&quot; {
	subnet_id      = &quot;${aws_subnet.private_1c.id}&quot;
	route_table_id = &quot;${aws_route_table.private_1c.id}&quot;
}

resource &quot;aws_route_table_association&quot; &quot;private_1d&quot; {
	subnet_id      = &quot;${aws_subnet.private_1d.id}&quot;
	route_table_id = &quot;${aws_route_table.private_1d.id}&quot;
}
</code></pre>
<h1 id="ロードバランサの設定">ロードバランサの設定</h1>
<p>次は ALB の定義を作成します。</p>
<p><code>alb.tf</code> に以下のとおり定義します。</p>
<pre><code># SecurityGroup
# https://www.terraform.io/docs/providers/aws/r/security_group.html
resource &quot;aws_security_group&quot; &quot;alb&quot; {
    name        = &quot;${var.prefix}-alb&quot;
    description = &quot;${var.prefix} alb&quot;
    vpc_id      = &quot;${aws_vpc.main.id}&quot;

    # セキュリティグループ内のリソースからインターネットへのアクセスを許可する
    egress {
        from_port   = 0
        to_port     = 0
        protocol    = &quot;-1&quot;
        cidr_blocks = [&quot;0.0.0.0/0&quot;]
    }

    tags = {
        Name = &quot;${var.prefix}-alb&quot;
    }
}

# SecurityGroup Rule
# https://www.terraform.io/docs/providers/aws/r/security_group.html
resource &quot;aws_security_group_rule&quot; &quot;alb_http&quot; {
    security_group_id = &quot;${aws_security_group.alb.id}&quot;

    # セキュリティグループ内のリソースへインターネットからのアクセスを許可する
    type = &quot;ingress&quot;

    from_port = 80
    to_port   = 80
    protocol  = &quot;tcp&quot;

    cidr_blocks = [&quot;0.0.0.0/0&quot;]
}

# ALB
# https://www.terraform.io/docs/providers/aws/d/lb.html
resource &quot;aws_lb&quot; &quot;main&quot; {
    load_balancer_type = &quot;application&quot;
    name               = &quot;${var.prefix}&quot;

    security_groups = [&quot;${aws_security_group.alb.id}&quot;]
    subnets         = [&quot;${aws_subnet.public_1a.id}&quot;, &quot;${aws_subnet.public_1c.id}&quot;, &quot;${aws_subnet.public_1d.id}&quot;]
}

# Listener
# https://www.terraform.io/docs/providers/aws/r/lb_listener.html
resource &quot;aws_lb_listener&quot; &quot;main&quot; {
    # HTTPでのアクセスを受け付ける
    port              = &quot;80&quot;
    protocol          = &quot;HTTP&quot;

    # ALBのarnを指定します。
    load_balancer_arn = &quot;${aws_lb.main.arn}&quot;

    # &quot;ok&quot; という固定レスポンスを設定する
    default_action {
        type             = &quot;fixed-response&quot;

        fixed_response {
            content_type = &quot;text/plain&quot;
            status_code  = &quot;200&quot;
            message_body = &quot;ok&quot;
        }
    }
}
</code></pre>
<h1 id="ecsの設定">ECSの設定</h1>
<p><code>ecs.tf</code> はこんな感じです。</p>
<pre><code>resource &quot;aws_iam_role&quot; &quot;ecs_task_execution_role&quot; {
	name = &quot;ecs_task_execution_role&quot;
	assume_role_policy = &lt;&lt;EOF
{
  &quot;Version&quot;: &quot;2012-10-17&quot;,
  &quot;Statement&quot;: [
    {
      &quot;Sid&quot;: &quot;&quot;,
      &quot;Effect&quot;: &quot;Allow&quot;,
      &quot;Principal&quot;: {
        &quot;Service&quot;: [
          &quot;ecs-tasks.amazonaws.com&quot;
        ]
      },
      &quot;Action&quot;: &quot;sts:AssumeRole&quot;
    }
  ]
}
EOF
}

resource &quot;aws_iam_role_policy_attachment&quot; &quot;ecs-task-execution-policy&quot; {
	role = &quot;${aws_iam_role.ecs_task_execution_role.name}&quot;
	policy_arn = &quot;arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy&quot;
}

resource &quot;aws_iam_role_policy_attachment&quot; &quot;ecr-read-policy&quot; {
	role = &quot;${aws_iam_role.ecs_task_execution_role.name}&quot;
	policy_arn = &quot;arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess&quot;
}

# Task Definition
# https://www.terraform.io/docs/providers/aws/r/ecs_task_definition.html
resource &quot;aws_ecs_task_definition&quot; &quot;main&quot; {
	family = &quot;${var.prefix}&quot;

	# データプレーンの選択
	requires_compatibilities = [&quot;FARGATE&quot;]

	# ECSタスクが使用可能なリソースの上限
	# タスク内のコンテナはこの上限内に使用するリソースを収める必要があり
	# メモリが上限に達した場合OOM Killer にタスクがキルされる
	cpu    = &quot;256&quot;
	memory = &quot;512&quot;

	# ECSタスクのネットワークドライバ
	# Fargateを使用する場合は&quot;awsvpc&quot;決め打ち
	network_mode = &quot;awsvpc&quot;

	# ECRからDocker ImageをPULLするための権限
	execution_role_arn = &quot;${aws_iam_role.ecs_task_execution_role.arn}&quot;

	# 起動するコンテナの定義
	# 【解説1】JSONでコンテナを定義します
	# 【解説2】JSON内の environment で環境変数を設定します。
	# environment ではデータベースのホストを設定しています。
	# 機密情報（次の項目で設定します）として登録するか迷いましたが、
	# 機密情報だとパラメータストアを経由する必要があり、
	# 手動設定が必要になるので、環境変数にしました。
	# プライベートサブネットに入ってるので大丈夫だと考えています。
	# 【解説3】JSON内の secrets で機密情報を設定します。
	# 今回はよく使いそうなものを適当に定義しました。
	# 機密情報 は System Manager のパラメータストアから持ってきます。
	container_definitions = &lt;&lt;EOL
[
  {
    &quot;name&quot;: &quot;&lt;your repository name&gt;&quot;,
    &quot;image&quot;: &quot;&lt;your image name&gt;&quot;,
    &quot;portMappings&quot;: [
      {
        &quot;containerPort&quot;: 8080,
        &quot;hostPort&quot;: 8080
      }
    ],
    &quot;environment&quot;: [
        {
            &quot;name&quot;: &quot;MYSQL_HOST&quot;,
            &quot;value&quot;: &quot;${aws_rds_cluster.this.endpoint}&quot;
        }
    ],
    &quot;secrets&quot;: [
      {
        &quot;name&quot;: &quot;MYSQL_PASSWORD&quot;,
        &quot;valueFrom&quot;: &quot;arn:aws:ssm:ap-northeast-1:910114278227:parameter/MYSQL_PASSWORD&quot;
      },
      {
        &quot;name&quot;: &quot;MYSQL_USER&quot;,
        &quot;valueFrom&quot;: &quot;arn:aws:ssm:ap-northeast-1:910114278227:parameter/MYSQL_USER&quot;
      },
      {
        &quot;name&quot;: &quot;MYSQL_DATABASE&quot;,
        &quot;valueFrom&quot;: &quot;arn:aws:ssm:ap-northeast-1:910114278227:parameter/MYSQL_DATABASE&quot;
      },
      {
        &quot;name&quot;: &quot;AWS_ACCESS_KEY&quot;,
        &quot;valueFrom&quot;: &quot;arn:aws:ssm:ap-northeast-1:910114278227:parameter/ACCESS_KEY&quot;
      },
      {
        &quot;name&quot;: &quot;AWS_SECRET_KEY&quot;,
        &quot;valueFrom&quot;: &quot;arn:aws:ssm:ap-northeast-1:910114278227:parameter/SECRET_KEY&quot;
      },
      {
        &quot;name&quot;: &quot;S3_BUCKET_NAME&quot;,
        &quot;valueFrom&quot;: &quot;arn:aws:ssm:ap-northeast-1:910114278227:parameter/S3_BUCKET_NAME&quot;
      },
      {
        &quot;name&quot;: &quot;AUTH_SECRET&quot;,
        &quot;valueFrom&quot;: &quot;arn:aws:ssm:ap-northeast-1:910114278227:parameter/AUTH_SECRET&quot;
      }
    ]
  }
]
EOL
}

# ECS Cluster
# https://www.terraform.io/docs/providers/aws/r/ecs_cluster.html
resource &quot;aws_ecs_cluster&quot; &quot;main&quot; {
	name = &quot;${var.prefix}&quot;
}

# ELB Target Group
# https://www.terraform.io/docs/providers/aws/r/lb_target_group.html
resource &quot;aws_lb_target_group&quot; &quot;main&quot; {
	name = &quot;${var.prefix}&quot;

	# ターゲットグループを作成するVPC
	vpc_id = &quot;${aws_vpc.main.id}&quot;

	# ALBからECSタスクのコンテナへトラフィックを振り分ける設定
	port        = 8080
	protocol    = &quot;HTTP&quot;
	target_type = &quot;ip&quot;

	# コンテナへの死活監視設定
	health_check = {
		port = 8080
		path = &quot;/health&quot;
	}
}

# ALB Listener Rule
# https://www.terraform.io/docs/providers/aws/r/lb_listener_rule.html
resource &quot;aws_lb_listener_rule&quot; &quot;main&quot; {
	# ルールを追加するリスナー
	listener_arn = &quot;${aws_lb_listener.main.arn}&quot;

	# 受け取ったトラフィックをターゲットグループへ受け渡す
	action {
		type             = &quot;forward&quot;
		target_group_arn = &quot;${aws_lb_target_group.main.id}&quot;
	}

	# ターゲットグループへ受け渡すトラフィックの条件
	condition {
		field  = &quot;path-pattern&quot;
		values = [&quot;*&quot;]
	}
}

# SecurityGroup
# https://www.terraform.io/docs/providers/aws/r/security_group.html
resource &quot;aws_security_group&quot; &quot;ecs&quot; {
	name        = &quot;${var.prefix}-ecs&quot;
	description = &quot;${var.prefix} ecs&quot;

	# セキュリティグループを配置するVPC
	vpc_id      = &quot;${aws_vpc.main.id}&quot;

	# セキュリティグループ内のリソースからインターネットへのアクセス許可設定
	# 今回の場合DockerHubへのPullに使用する。
	egress {
		from_port   = 0
		to_port     = 0
		protocol    = &quot;-1&quot;
		cidr_blocks = [&quot;0.0.0.0/0&quot;]
	}

	tags = {
		Name = &quot;${var.prefix}-ecs&quot;
	}
}

# SecurityGroup Rule
# https://www.terraform.io/docs/providers/aws/r/security_group.html
resource &quot;aws_security_group_rule&quot; &quot;ecs&quot; {
	security_group_id = &quot;${aws_security_group.ecs.id}&quot;

	# インターネットからセキュリティグループ内のリソースへのアクセス許可設定
	type = &quot;ingress&quot;

	# TCPでの80ポートへのアクセスを許可する
	from_port = 80
	to_port   = 8080
	protocol  = &quot;tcp&quot;

	# 同一VPC内からのアクセスのみ許可
	cidr_blocks = [&quot;10.0.0.0/16&quot;]
}

# ECS Service
# https://www.terraform.io/docs/providers/aws/r/ecs_service.html
resource &quot;aws_ecs_service&quot; &quot;main&quot; {
	name = &quot;${var.prefix}&quot;

	# 依存関係の記述。
	# &quot;aws_lb_listener_rule.main&quot; リソースの作成が完了するのを待ってから当該リソースの作成を開始する。
	# &quot;depends_on&quot; は &quot;aws_ecs_service&quot; リソース専用のプロパティではなく、Terraformのシンタックスのため他の&quot;resource&quot;でも使用可能
	depends_on = [&quot;aws_lb_listener_rule.main&quot;]

	# 当該ECSサービスを配置するECSクラスターの指定
	cluster = &quot;${aws_ecs_cluster.main.name}&quot;

	# データプレーンとしてFargateを使用する
	launch_type = &quot;FARGATE&quot;

	# ECSタスクの起動数を定義
	desired_count = &quot;1&quot;

	# 起動するECSタスクのタスク定義
	task_definition = &quot;${aws_ecs_task_definition.main.arn}&quot;

	# ECSタスクへ設定するネットワークの設定
	network_configuration = {
		# タスクの起動を許可するサブネット
		subnets         = [&quot;${aws_subnet.private_1a.id}&quot;, &quot;${aws_subnet.private_1c.id}&quot;, &quot;${aws_subnet.private_1d.id}&quot;]
		# タスクに紐付けるセキュリティグループ
		security_groups = [&quot;${aws_security_group.ecs.id}&quot;]
	}

	# ECSタスクの起動後に紐付けるELBターゲットグループ
	load_balancer = [
		{
			target_group_arn = &quot;${aws_lb_target_group.main.arn}&quot;
			container_name   = &quot;&lt;your container name&gt;&quot;
			container_port   = &quot;8080&quot;
		},
	]
}
</code></pre>
<p>機密情報を渡すところに関しては <a href="https://khigashigashi.hatenablog.com/entry/2018/08/28/214417" target="_blank" rel="noopener noreferrer">こちら</a>
 の記事が分かりやすいです。</p>
<p>機密情報として設定する値は System Manager のパラメータストアにセットする必要があります。</p>
<h1 id="rdsの設定">RDSの設定</h1>
<p>最後に <code>rds.tf</code> を以下のとおり定義します。</p>
<pre><code># SSM Parameter data source
# https://www.terraform.io/docs/providers/aws/d/ssm_parameter.html
data &quot;aws_ssm_parameter&quot; &quot;database_name&quot; {
	name = &quot;MYSQL_DATABASE&quot;
}

data &quot;aws_ssm_parameter&quot; &quot;database_user&quot; {
	name = &quot;MYSQL_USER&quot;
}

data &quot;aws_ssm_parameter&quot; &quot;database_password&quot; {
	name = &quot;MYSQL_PASSWORD&quot;
}

# 【解説】locals は名前のとおりローカル変数です。
# variables だと `${}` 展開できないのでこちらを使用しました。
# 他にやり方があれば教えてほしいです。
locals {
	name = &quot;${var.prefix}-rds-mysql&quot;
}

resource &quot;aws_security_group&quot; &quot;this&quot; {
	name        = &quot;${local.name}&quot;
	description = &quot;${local.name}&quot;

	vpc_id = &quot;${aws_vpc.main.id}&quot;

  egress {
	  from_port   = 0
	  to_port     = 0
	  protocol    = &quot;-1&quot;
	  cidr_blocks = [&quot;0.0.0.0/0&quot;]
  }

  tags = {
	  Name = &quot;${local.name}&quot;
  }
}

resource &quot;aws_security_group_rule&quot; &quot;mysql&quot; {
	security_group_id = &quot;${aws_security_group.this.id}&quot;

	type = &quot;ingress&quot;

	from_port   = 3306
	to_port     = 3306
	protocol    = &quot;tcp&quot;
	cidr_blocks = [&quot;10.0.0.0/16&quot;]
}

resource &quot;aws_db_subnet_group&quot; &quot;this&quot; {
	name        = &quot;${local.name}&quot;
	description = &quot;${local.name}&quot;
	subnet_ids  = [
		&quot;${aws_subnet.private_1a.id}&quot;,
		&quot;${aws_subnet.private_1c.id}&quot;,
		&quot;${aws_subnet.private_1d.id}&quot;,
	]
}

# RDS Cluster
# https://www.terraform.io/docs/providers/aws/r/rds_cluster.html
resource &quot;aws_rds_cluster&quot; &quot;this&quot; {
	cluster_identifier = &quot;${local.name}&quot;

	db_subnet_group_name   = &quot;${aws_db_subnet_group.this.name}&quot;
	vpc_security_group_ids = [&quot;${aws_security_group.this.id}&quot;]

	engine = &quot;aurora-mysql&quot;
	port   = &quot;3306&quot;

	database_name   = &quot;${data.aws_ssm_parameter.database_name.value}&quot;
	master_username = &quot;${data.aws_ssm_parameter.database_user.value}&quot;
	master_password = &quot;${data.aws_ssm_parameter.database_password.value}&quot;

	# RDSインスタンス削除時のスナップショットの取得強制を無効化
	skip_final_snapshot = true

	# 使用する Parameter Group を指定
	db_cluster_parameter_group_name = &quot;${aws_rds_cluster_parameter_group.this.name}&quot;
}

# RDS Cluster Instance
# https://www.terraform.io/docs/providers/aws/r/rds_cluster_instance.html
resource &quot;aws_rds_cluster_instance&quot; &quot;this&quot; {
	identifier         = &quot;${local.name}&quot;
	cluster_identifier = &quot;${aws_rds_cluster.this.id}&quot;

	engine = &quot;aurora-mysql&quot;

	instance_class = &quot;db.t3.small&quot;
}

# RDS Cluster Parameter Group
# https://www.terraform.io/docs/providers/aws/r/rds_cluster_parameter_group.html
# 日本時間に変更 &amp; 日本語対応のために文字コードを変更
resource &quot;aws_rds_cluster_parameter_group&quot; &quot;this&quot; {
	name   = &quot;${local.name}&quot;
	family = &quot;aurora-mysql5.7&quot;

	parameter {
		name  = &quot;time_zone&quot;
		value = &quot;Asia/Tokyo&quot;
	}

	parameter {
		name  = &quot;character_set_client&quot;
		value = &quot;utf8mb4&quot;
	}

	parameter {
		name  = &quot;character_set_connection&quot;
		value = &quot;utf8mb4&quot;
	}

	parameter {
		name  = &quot;character_set_database&quot;
		value = &quot;utf8mb4&quot;
	}

	parameter {
		name  = &quot;character_set_results&quot;
		value = &quot;utf8mb4&quot;
	}

	parameter {
		name  = &quot;character_set_server&quot;
		value = &quot;utf8mb4&quot;
	}
}

# terraform applyコマンド完了時にコンソールにエンドポイントを表示
# 【解説】もしエンドポイントも機密情報として扱うのであれば
# ここで表示されたエンドポイントをパラメータストアに格納すればよい。
# 今回は紹介のために使用。
output &quot;rds_endpoint&quot; {
	value = &quot;${aws_rds_cluster.this.endpoint}&quot;
}
</code></pre>
<h1 id="テスト">テスト</h1>
<p>上記で作成してきた tfファイルたちを同じディレクトリに格納し、</p>
<p>そのディレクトリ内で下記コマンドを実行します。</p>
<p><code>AWS_ACCESS_KEY_ID=&lt;your access key&gt; AWS_SECRET_ACCESS_KEY=&lt;your secret access key&gt; terraform apply</code></p>
<p>アクセスキーとシークレットキーは IAM から取得してください。</p>
<p>terraform コマンドが入ってない人は brew やらなんやらでインストールお願いします。</p>
<br>
<p>実行して（かなり時間がかかりますが）下記のように出力されたら成功です！</p>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/06/terraform_ecs/terraform_apply_success.png" width="600">
<br>
<p>削除もやってみましょう。</p>
<p><code>AWS_ACCESS_KEY_ID=&lt;your access key&gt; AWS_SECRET_ACCESS_KEY=&lt;your secret access key&gt; terraform destroy</code></p>
<p>こちらもかなり時間がかかりますが、下記のようにリソースが削除されると思います。</p>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/06/terraform_ecs/terraform_destroy_success.png" width="600">
<h2 id="tfファイルの実行順">tfファイルの実行順</h2>
<p>tfファイル内で作成したリソースから取得した値を他のリソースで使用する場面がありました。</p>
<p>ここで気になるのが tfファイルの実行順番です。</p>
<p>実行順番次第では、取得したい値がまだできていないということも起こりそうです。</p>
<p>これに関して、結論から言うと僕たちが順番を考える必要はありません。</p>
<p>tfファイルを適当にディレクトリに突っ込んだだけですが、</p>
<p>terraform 側でよしなに順番を決めてやってくれます。</p>
<p>すごい。</p>
<h1 id="まとめ">まとめ</h1>
<p>Terraformすごい。</p>
<p>自動でここまでできてしまう。</p>
<p>しかも、コードで定義するからバージョン管理できる。</p>
<p>差分チェックできる。</p>
<p>「分かる、こいつ強い。」</p>
<br>
<p>今回はファイル分割しただけですが、モジュール分割とかもできるようなので今後やっていきます。</p>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/aws" term="aws" label="AWS"/><category scheme="https://yyh-gl.github.io/tech-blog/categories/terraform" term="terraform" label="Terraform"/><category scheme="https://yyh-gl.github.io/tech-blog/categories/ecs" term="ecs" label="ECS"/><category scheme="https://yyh-gl.github.io/tech-blog/categories/rds" term="rds" label="RDS"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">【Android + Kotlin + Firebase】Androidアプリにプッシュ通知を実装してみた</title><link href="https://yyh-gl.github.io/tech-blog/blog/android_push/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/engineering_organization_theory_mentoring/?utm_source=atom_feed" rel="related" type="text/html" title="【エンジニアリング組織論への招待】メンタリングの技術"/><link href="https://yyh-gl.github.io/tech-blog/blog/hello_world/?utm_source=atom_feed" rel="related" type="text/html" title="Hello Wolrd"/><id>https://yyh-gl.github.io/tech-blog/blog/android_push/</id><author><name>yyh-gl</name></author><published>2019-05-30T00:00:00+00:00</published><updated>2019-05-30T00:00:00+00:00</updated><content type="html"><![CDATA[<p>僕がひっかかった場所は 「つまづきポイント」 という章にまとめているので</p>
<p>なにか困ったときはそこを一度見てみてください。</p>
<h1 id="tldr">tl;dr</h1>
<ul>
<li>Firebase使ってAndroidアプリにプッシュ通知を実装した</li>
<li>フォアグラウンドとバックグラウンドで表示方法が異なる</li>
<li>めちゃくちゃ簡単</li>
</ul>
<h1 id="開発環境">開発環境</h1>
<ul>
<li>macOS Mojave 10.14.4</li>
<li>Android Studio 3.4.1</li>
<li>Gradle 3.4.1</li>
<li>Java 1.8.0_202</li>
<li>Kotlin 1.3.21</li>
</ul>
<h1 id="firebaseに登録">Firebaseに登録</h1>
<p>Firebaseを使用するためには登録が必要です。</p>
<p>Googleアカウントを持っている方なら<a href="https://firebase.google.com/?hl=ja" target="_blank" rel="noopener noreferrer">公式サイト</a>
から簡単に登録できます</p>
<h1 id="firebaseにプロジェクト作成">Firebaseにプロジェクト作成</h1>
<p><a href="https://console.firebase.google.com/" target="_blank" rel="noopener noreferrer">プロジェクト登録ページ</a>
でプロジェクトを登録します。</p>
<p>プロジェクト名は特に指定はありません。ご自由にどうぞ。</p>
<h1 id="アプリ情報を登録する">アプリ情報を登録する</h1>
<p>プロジェクト選択後のホーム画面より 「Project Overview」 をクリック。</p>
<p>画面の指示に従って進めていてください。</p>
<h2 id="デバッグ用の署名証明書-sha-1-の取得方法">デバッグ用の署名証明書 SHA-1 の取得方法</h2>
<ol>
<li>
<p>以下コマンドを実行</p>
<p>Mac/Linux</p>
<pre><code>keytool -list -v \
-alias androiddebugkey -keystore ~/.android/debug.keystore
</code></pre>
<p>Windows</p>
<pre><code>keytool -list -v \
-alias androiddebugkey -keystore %USERPROFILE%\.android\debug.keystore
</code></pre>
</li>
<li>
<p>パスワード入力</p>
<p>パスワードは <code>android</code> です。</p>
</li>
<li>
<p>表示される SHA-1 をメモ</p>
</li>
</ol>
<br>
<hr>
<p>ひととおり作業が進むと、↓このような画面が表示されます。</p>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/05/android_push/app-registering-complete.png" width="750">
<p>自分の環境では、登録したアプリがFirebaseと通信できているかのチェックに少し時間がかかりました。</p>
<p>エミュレータでもちゃんと通信してくれるか不安だったのですが大丈夫でした。</p>
<h1 id="firebase-関連のライブラリを追加">Firebase 関連のライブラリを追加</h1>
<p>アプリ情報の登録工程において、 <code>app/build.gradle</code> を触ったと思いますが、加えて、以下の追記が必要です。</p>
<pre><code class="language-gradle">dependencies {
    // ... 省略

    implementation 'com.google.firebase:firebase-messaging:18.0.0'
}
</code></pre>
<p>バージョン17.1.0 以降に関して、 <a href="https://qiita.com/taki4227/items/9d292c3badd2c4015061" target="_blank" rel="noopener noreferrer">こちらの記事</a>
にあるとおり、大きな変更が加わっています。</p>
<p>注意しましょう。</p>
<h1 id="通知時の見た目の設定バックグラウンド動作時">通知時の見た目の設定（バックグラウンド動作時）</h1>
<p><u>PUSH通知の見た目はバックグラウンドとフォアグラウンドで違います。</u></p>
<p>フォアグラウンドでのPUSH通知は自分のアプリの処理を通りますが、</p>
<p>バックグラウンドではアプリで定義した処理を通りません。</p>
<br>
<p>まずはバックグラウンドの見た目を設定していきます。</p>
<p><code>AndroidManifest.xml</code> に下記のとおり追記してください。</p>
<pre><code class="language-xml">&lt;application
    // ... 省略

&gt;

    // ... 省略

    &lt;meta-data
      android:name=&quot;com.google.firebase.messaging.default_notification_channel_id&quot;
      android:value=&quot;@string/channel_id&quot;/&gt;

    &lt;meta-data
      android:name=&quot;com.google.firebase.messaging.default_notification_icon&quot;
      android:resource=&quot;@drawable/ic_logo&quot; /&gt;

    &lt;meta-data
      android:name=&quot;com.google.firebase.messaging.default_notification_color&quot;
      android:resource=&quot;@color/background&quot; /&gt;
      
    // ... 省略
</code></pre>
<p>ここでチャンネルIDと通知アイコン、色を決定します。</p>
<p>各自で自由に設定してください。</p>
<blockquote>
<p>チャンネルID は Android 8.0（API レベル 26）以降で設定が必須となりました。</p>
</blockquote>
<blockquote>
<p>チャンネルを指定することで、ユーザーが任意の通知チャンネルを無効にすることが可能になります。</p>
</blockquote>
<blockquote>
<p><a href="https://developer.android.com/guide/topics/ui/notifiers/notifications#ManageChannels" target="_blank" rel="noopener noreferrer">参考サイト</a>
</p>
</blockquote>
<blockquote>
<p>★ Android 8.0 未満であれば気にしなくて大丈夫です。</p>
</blockquote>
<h1 id="動作テスト">動作テスト</h1>
<p>以上でバックグラウンドでの通知は受け取れるようになりました。</p>
<p>Cloud Messaging 画面に行き、「Send your first message」から通知を作成します。</p>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/05/android_push/send_notification.png" width="750">
<br>
<ol>
<li>
<p>通知のタイトルとメッセージを設定します。</p>
 <img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/05/android_push/create_message.png" width="750">
</li>
<li>
<p>ターゲットは自分のアプリを選択してください。</p>
</li>
<li>
<p>スケジュールは <code>Now</code> です。</p>
</li>
<li>
<p>今回はコンバージョンイベントはなにも触りません。</p>
</li>
<li>
<p>その他のオプションはチャンネルIDだけ設定します（Android8.0以上の人のみ）</p>
  <img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/05/android_push/other_option.png" width="750">
</li>
<li>
<p>「確認」 &gt; 「公開」 で通知が送られます。</p>
</li>
</ol>
<p>Android側で通知を受け取れているか確認しましょう。</p>
<p>注意としては、現状バックグラウンドでの処理しか記述していないので</p>
<p>アプリを開いていると通知を受け取れません。</p>
<p>アプリを閉じた状態で通知を送りましょう。</p>
<p>すると…</p>
<p>通知が来ましたね！ 音もついています。</p>
<div style="display:inline-block">
    <img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/05/android_push/top.png" width="250">
<pre><code>&lt;img src=&quot;https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/05/android_push/bar.png&quot; width=&quot;250&quot;&gt;

&lt;img src=&quot;https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/05/android_push/notification_center.png&quot; width=&quot;250&quot;&gt;
</code></pre>
</div>
<p>ステータスバーにもアイコンが表示されています（鳥のマークです）。</p>
<p>でも、アプリ立ち上げた状態（フォアグラウンド）だと通知来ないですよね？</p>
<p>表示できるようにしていきましょう。</p>
<h1 id="通知時の見た目の設定フォアグラウンド動作時">通知時の見た目の設定（フォアグラウンド動作時）</h1>
<p>各自の適当な場所に以下の Service を作成してください。</p>
<pre><code class="language-kotlin">package &lt;パッケージ名&gt;

import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.media.RingtoneManager
import android.os.Build
import androidx.core.app.NotificationCompat
import androidx.core.app.NotificationCompat.PRIORITY_MAX
import com.google.firebase.messaging.FirebaseMessagingService
import com.google.firebase.messaging.RemoteMessage
import java.util.*

class PushNotificationListenerService: FirebaseMessagingService() {

  // 新しいトークンが生成された時の処理
  // 中でサーバにトークンを送信する処理などを定義
  override fun onNewToken(p0: String?) {
    super.onNewToken(p0)

    // チャンネルidを設定
    addChannelId()
  }

  // 通知を受信したときの処理
  override fun onMessageReceived(message: RemoteMessage?) {
    super.onMessageReceived(message)

    // 今回は通知からタイトルと本文を取得
    val title: String = message?.notification?.title.toString()
    val text: String = message?.notification?.body.toString()

    // 通知表示
    sendNotification(title, text)
  }

  // 通知表示 および 見た目の設定
  private fun sendNotification(title: String, text: String) {
    // 通知タップ時に遷移するアクティビティを指定
    val intent = Intent(this, AllTimelineActivity::class.java)
    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)
    // 何度も遷移しないようにする（1度だけ！）
    val pendingIntent: PendingIntent = PendingIntent.getActivity(this,0, intent, PendingIntent.FLAG_ONE_SHOT)

    // 通知メッセージのスタイルを設定（改行表示に対応）
    val inboxStyle = NotificationCompat.InboxStyle()
    val messageArray: List&lt;String&gt; = text.split(&quot;\n&quot;)
    for (msg: String in messageArray) {
      inboxStyle.addLine(msg)
    }

    // 通知音の設定
    val defaultSoundUri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION)

    // 通知の見た目を設定
    val notificationBuilder
      = NotificationCompat.Builder(this, resources.getString(R.string.channel_id))
      .setContentTitle(title)
      .setContentText(text)
      // ステータスバーに表示されるアイコン
      .setSmallIcon(R.drawable.ic_notification_icon)
      // 上で設定したpendingIntentを設定
      .setContentIntent(pendingIntent)
      // 優先度を最大化
      .setPriority(PRIORITY_MAX)
      // 通知音を出すように設定
      .setSound(defaultSoundUri)

    // 通知を実施
    // UUIDを付与することで各通知をユニーク化
    val notificationManager: NotificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
    val uuid = UUID.randomUUID().hashCode()
    notificationManager.notify(uuid, notificationBuilder.build())

    // Android 8.0 以上はチャンネル設定 必須
    // strings.xml に channel_id を指定してください
    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {
      notificationBuilder.setChannelId(resources.getString(R.string.channel_id))
    }
  }

  // チャンネルの設定
  private fun addChannelId() {
    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {
      val manager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
      // ヘッドアップ通知を出す場合はチャンネルの重要度を最大にする必要がある
      val channel = NotificationChannel(
        resources.getString(R.string.channel_id),
        resources.getString(R.string.channel_name),
        NotificationManager.IMPORTANCE_HIGH
      )

      // ロック画面における表示レベル
      channel.lockscreenVisibility = Notification.VISIBILITY_PUBLIC
      // チャンネル登録
      manager.createNotificationChannel(channel)
    }
  }
}
</code></pre>
<p>上記コードは <a href="https://www.villness.com/2363" target="_blank" rel="noopener noreferrer">本サイト</a>
 を参考にしました。</p>
<p>古いバージョンの情報部分を書き換えたりしています。</p>
<h1 id="androidmanifest-を修正">AndroidManifest を修正</h1>
<p>↑で実装した Service をマニフェストに登録し、使えるようにします。</p>
<p><code>AndroidManifest.xml</code> に以下の設定を追記します。</p>
<pre><code class="language-xml">&lt;application
    // ... 省略
    &gt;

    &lt;service
      android:name=&quot;.PushNotificationListenerService&quot;&gt;
      &lt;intent-filter&gt;
        &lt;action android:name=&quot;com.google.firebase.MESSAGING_EVENT&quot; /&gt;
      &lt;/intent-filter&gt;
    &lt;/service&gt;
    
    // ... 省略
&lt;/application&gt;
</code></pre>
<p><code>android:name</code> は各自のディレクトリ構成とファイル名に合わせて変更してください。</p>
<h1 id="動作テスト-1">動作テスト</h1>
<p>以上でフォアグラウンドにおける通知の設定が完了しました。</p>
<p>通知を受け取れるかテストしてみましょう。</p>
<p>バックグラウンドでのテストと同様の手順で Cloud Messaging から通知を送ります。</p>
<p>すると…</p>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/05/android_push/foreground.png" width="280">
<p>無事表示できましたね！</p>
<p>ステータスバーにもアイコンが出ています。</p>
<blockquote>
<p>アプリ画面は見せれないので隠しています</p>
</blockquote>
<blockquote>
<p>ちょっとフォアグラウンドなのか分かりづらいと思いますが、 <u>フォアグラウンドです</u>。</p>
</blockquote>
<h1 id="つまづきポイント">つまづきポイント</h1>
<p>バックグラウンドとフォアグラウンドどちらにおいても、通知がうまく表示されないときがありました。</p>
<p>具体的には</p>
<ol>
<li>そもそも通知がこない</li>
<li>フォアグラウンドにて画面上部から通知がぴこって出てこない</li>
</ol>
<p>などです。</p>
<p>原因ですが、僕の結論は <u>エミュレータでテストしていたこと</u> です。</p>
<p>エミュレータで通知を受け取れない状況において、実機でも通知を受け取ってみたところ、</p>
<p>実機では正常に通知を受け取ることができました。</p>
<p>みなさんもエミュレータでテストするさいはお気をつけください。</p>
<p>（それにしてもなんで無理だったんだろうか… また調べてみよう）</p>
<h1 id="まとめ">まとめ</h1>
<p>PUSH通知実装いかかがだったでしょうか？</p>
<p>僕的にはとても簡単で驚きしかありませんでした。</p>
<p>Firebaseさまさまですね。</p>
<p>実際の業務に使えるかと言われると、また話が違ってくるのかもしれませんが、、、</p>
<h1 id="参考サイト">参考サイト</h1>
<ul>
<li><a href="https://firebase.google.com/docs/cloud-messaging?hl=ja" target="_blank" rel="noopener noreferrer">公式ドキュメント</a>
</li>
<li><a href="https://www.villness.com/2363" target="_blank" rel="noopener noreferrer">【Android】FCMを使ったpush通知の実装方法 - 株式会社Villness（ヴィルネス）</a>
</li>
</ul>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/android" term="android" label="Android"/><category scheme="https://yyh-gl.github.io/tech-blog/categories/kotlin" term="kotlin" label="Kotlin"/><category scheme="https://yyh-gl.github.io/tech-blog/categories/firebase" term="firebase" label="Firebase"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">【エンジニアリング組織論への招待】メンタリングの技術</title><link href="https://yyh-gl.github.io/tech-blog/blog/engineering_organization_theory_mentoring/?utm_source=atom_feed" rel="alternate" type="text/html"/><link href="https://yyh-gl.github.io/tech-blog/blog/hello_world/?utm_source=atom_feed" rel="related" type="text/html" title="Hello Wolrd"/><id>https://yyh-gl.github.io/tech-blog/blog/engineering_organization_theory_mentoring/</id><author><name>yyh-gl</name></author><published>2019-05-25T00:00:00+00:00</published><updated>2019-05-25T00:00:00+00:00</updated><content type="html"><![CDATA[<h1 id="概要">概要</h1>
<p>今回は、広木 大地さんが書かれた
『<a href="https://www.amazon.co.jp/%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%83%AA%E3%83%B3%E3%82%B0%E7%B5%84%E7%B9%94%E8%AB%96%E3%81%B8%E3%81%AE%E6%8B%9B%E5%BE%85-%E4%B8%8D%E7%A2%BA%E5%AE%9F%E6%80%A7%E3%81%AB%E5%90%91%E3%81%8D%E5%90%88%E3%81%86%E6%80%9D%E8%80%83%E3%81%A8%E7%B5%84%E7%B9%94%E3%81%AE%E3%83%AA%E3%83%95%E3%82%A1%E3%82%AF%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0-%E5%BA%83%E6%9C%A8-%E5%A4%A7%E5%9C%B0/dp/4774196053/ref=sr_1_1?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&crid=1RMF6RYJ2VXGL&keywords=%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%83%AA%E3%83%B3%E3%82%B0%E7%B5%84%E7%B9%94%E8%AB%96%E3%81%B8%E3%81%AE%E6%8B%9B%E5%BE%85&qid=1558967032&s=gateway&sprefix=%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%83%AA%E3%83%B3%E3%82%B0%2Caps%2C244&sr=8-1">エンジニアリング組織論への招待 不確実性に向き合う思考と組織のリファクタリング</a>』
という本から、</p>
<p>2章「メンタリングの技術」についてまとめます。</p>
<p>（初投稿の内容が技術系じゃなくてチームマネジメント系かよとか言わないでくださいね）</p>
<h2 id="最初に覚えておいてほしいこと">最初に覚えておいてほしいこと</h2>
<p>メンタリングは、自律的な人材を育むために行う。</p>
<p>そのために、下記3点の状態にメンティ自身からなれるように導く。</p>
<ul>
<li>自分の気がつかなかった問題に気がつくようになる</li>
<li>認知の歪みによる感情と問題の癒着を切り離せる</li>
<li>答えではなく、次の一手を生み出す行動が取れるようになる</li>
</ul>
<p>これらがとても重要です。</p>
<p>以下いろいろな話が出てきますが、結局は上記3点の状態を実現するための方法です。</p>
<p>ここをしっかりと意識して読んでいただければ、</p>
<p>より一層理解が深まると思います。</p>
<br>
<p>以下まとめ
（★マークは個人的解釈・感想です）</p>
<h1 id="そもそもメンタリングとは">そもそもメンタリングとは</h1>
<ul>
<li>相手を上から押し付けるような教育方法ではない</li>
<li>相手の考え方を少しずつ変えることで、問題解決の力を育む手法</li>
</ul>
<p>対話を通じて、以下の2点を行い、相手を成長させる。</p>
<ul>
<li>歪んだ認知を補正</li>
<li>次の行動を促進</li>
</ul>
<p>メンタリングと聞くと、</p>
<p>大学で何年も学ばないと身に着けられないような技術であると思いがちだが、</p>
<p><u>体得すればだれでもできるようになる。</u></p>
<h1 id="エンジニアリングにおけるメンタリングの重要性">エンジニアリングにおけるメンタリングの重要性</h1>
<h2 id="エンジニアリングは知識が全てではない">エンジニアリングは知識が全てではない</h2>
<p>エンジニアリングでは技術的な課題がよく取り上げられるが、</p>
<p><u>技術的な課題というのは心理的な課題と密接に関係</u>している。</p>
<p>例えば、</p>
<ul>
<li>ソフトウェア開発はチームプレイ</li>
</ul>
<blockquote>
<p>★ 技術的な課題解決だけでなく、人間関係とかもあるってことかな</p>
</blockquote>
<ul>
<li>各個人の開発における問題解決は、自分自身との対話によって制御するもの</li>
</ul>
<blockquote>
<p>★ 自身を制すものがエラーを制す</p>
</blockquote>
<p>上記のようにエンジニアリングには心理的な課題も存在する。</p>
<p>プロダクト開発では <u>不確実性を排除する</u> ことがとても重要である。</p>
<p>したがって、不確実性のひとつである心理的な課題は排除すべき対象である。</p>
<blockquote>
<p>★ だから、メンタリングが重要なんですね。</p>
</blockquote>
<br>
<h1 id="メンタリングは-u自ら考える人材を作るu-ためのテクニック">メンタリングは <u>自ら考える人材を作る</u> ためのテクニック</h1>
<h2 id="自立型人材と依存型人材">自立型人材と依存型人材</h2>
<p>自ら考える人材を自立型人材、そうでない人材を依存型人材とすると、</p>
<p>それぞれ下記のような特徴がある。</p>
<ul>
<li>自立型人材
<ul>
<li>自ら問題を発見し、解決することができる</li>
<li>問題について、自分ごととして捉えている</li>
<li>問題の根本的原因は自分にあると考える
<ul>
<li>改善のために行動できる</li>
</ul>
</li>
</ul>
</li>
<li>依存型人材
<ul>
<li>問題を与えられてから考える</li>
<li>問題と解決策を渡されてから動ける</li>
<li>問題の根本的原因は他人にあると考える
<ul>
<li>改善のために行動できず、他人のせいにしてしまう</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="両人材の境界線">両人材の境界線</h2>
<p>多くの人は時には自立型人材、しかし、ある場面では依存型人材になってしまう。</p>
<p>それが普通である。</p>
<p>大事なのは、 <u>上司と部下という関係における期待値を合わせておくこと</u>。</p>
<p>つまり、上司が 「ここまでは自律的に考えるのが自分の仕事だ」と考える期待値と、</p>
<p>部下の「ここまでは自律的に考えるのが自分の仕事だ」と考える2つの期待値が一致させておくことが重要ということ。</p>
<blockquote>
<p>★ 自分的にはここがとても大事だと思った。全部自律的に考えるなんて無理だと思う。人間だもの。でも、上司と部下、さらには企業と社員の関係性はこの期待値を合わせることがとても重要だと思う。</p>
</blockquote>
<p>したがって、2つの期待値に差異があるままに、</p>
<p>上司は部下を自律的でないと判断するのは誤っているし、</p>
<p>部下も上司を理不尽なことを言う人と判断してはいけない。</p>
<h1 id="コンフォートゾーン">コンフォートゾーン</h1>
<p>人は与えられた役割に対して、自分の思考を閉じてしまうという特徴を持つ。</p>
<p>そして、与えられた役割の中で、自分自身が心地よくいられる思考や行動の範囲のことを</p>
<p><u>コンフォートゾーン</u>という。</p>
<p>例えば、与えられた仕事は自律的に完璧にこなす人も、</p>
<p>選挙は他の人が投票してくれるからいいやと依存的になるなど。</p>
<blockquote>
<p>★ 難しいことを言っているように聞こえるが、
結局のところ、自分の役職や割り当てられたタスクの範囲内の仕事はしっかりとやるが、
範囲外のところに関しては一切やらない、ってことだと思う。</p>
</blockquote>
<p>人はコンフォートゾーンをなかなか変えることができない。</p>
<h2 id="コンフォートゾーンが変わる瞬間">コンフォートゾーンが変わる瞬間</h2>
<h3 id="自立型--依存型">自立型 → 依存型</h3>
<p>例えば、自律的にいろいろな提案をして熱意に燃えていた人が、</p>
<p>何度も提案を却下され、熱意を失い、</p>
<p>最終的に何をしても無駄だと考えるようになった結果、</p>
<p>依存型人材になることが考えられる。</p>
<p>このように負のフィードバックリサイクルの結果、</p>
<p>生まれてしまう無気力を「<u>学習性無気力</u>」という。</p>
<h3 id="依存型--自立型">依存型 → 自立型</h3>
<p>逆に、自ら動いた結果、評価されたり、周囲からの尊敬を集めるなど、</p>
<p>正のフィードバックの中に「自律的に動くことは楽しい」といった気持ちが芽生え、</p>
<p>自立型人材になることが考えられる。</p>
<p>このとき感じた「自律的に動くことは楽しい」という気持ちを「<u>自己効力感</u>」という。</p>
<blockquote>
<p>★ つまり、正のフィードバックサイクルがしっかりと回れば、自立型人材が増えてくるのか…どうすれば正のフィードバックサイクルを回せれるようになるんだろう。</p>
</blockquote>
<h1 id="無意識に可能性を狭めてしまう人々">無意識に可能性を狭めてしまう人々</h1>
<p>人は誰しも自分自身の思考の範囲を無意識に狭めてしまい、</p>
<p>その結果最適な解決策が見えなくなってしまう。</p>
<p>すなわち、閉じた世界の中での合理性（限定合理性）に人々は縛られている。</p>
<p><u>人は閉じた世界の中で考えることは「心地よい」と考える</u>。</p>
<blockquote>
<p>★ 与えられた仕事以外に変に手を出したら、やっかいごとが増えるし、
だったら、何もしないでおこうってなるよね</p>
</blockquote>
<h1 id="メンタリングによる世界可能性の拡張">メンタリングによる世界（可能性）の拡張</h1>
<p>メンタリングとは、<u>対話によって思考の範囲を限定する枠を取り外し、</p>
<p>その人が自らの力で問題解決できるように促す方法</u>である。</p>
<p>メンタリングを行う人は、自律的な思考を行うことの快感（自己効力感）が、</p>
<p>依存的な思考を行う快感（コンフォートゾーン）を上回るように導く。</p>
<h1 id="効果的なメンターとメンティの関係性">効果的なメンターとメンティの関係性</h1>
<blockquote>
<p>メンター：メンタリングする人</p>
</blockquote>
<blockquote>
<p>メンティ：メンタリングを受ける人</p>
</blockquote>
<p>以下の3点が守れている上で行うメンタリングが最も効果的</p>
<p>（頭文字をとって HRT（ハート）と呼ばれる）</p>
<ul>
<li>謙虚（Humility）：お互いに弱さを見せられる</li>
<li>敬意（Respect）：お互いに敬意を持っている</li>
<li>信頼（Trust）：お互いにメンティ（自身）の成長期待をもっている</li>
</ul>
<h1 id="形だけのメンタリング制度は不要">形だけのメンタリング制度は不要</h1>
<p>形だけのメンタリングは、</p>
<p>メンターが「なにか課題を指摘する」場になってしまうことが多い。</p>
<p>理想のメンタリングは、課題に一緒に向き合い成長を支援するというコミットが必要。</p>
<p>それがメンティに伝わらなければ、メンター自体が成長を阻害する可能性が出てくる。</p>
<h1 id="成長の手助けにおいて重要なこと">成長の手助けにおいて重要なこと</h1>
<p>メンターがメンティの成長を手助けするためには、次の3点をしっかりやることが必要。</p>
<ul>
<li>課題を認識させる
<ul>
<li>「課題があるよ」ではなく、「これは大丈夫？」と聞くことで、メンティ自身に課題を発見させる</li>
</ul>
</li>
<li>課題解決へのヒントを与える
<ul>
<li>課題解決までの道のりを一気にではなく、一歩ずつ確実に歩いている実感を与える</li>
</ul>
</li>
<li>課題解決したくなるようにする
<ul>
<li>小さな成長実感に加えて、大きな目標達成やゴールの認識を合わせる</li>
</ul>
</li>
</ul>
<h1 id="他者説得-ではなく-自己説得">他者説得 ではなく 自己説得</h1>
<p>メンタリングとティーチング（直接物事を教えること）を比べて優れている点は、</p>
<p>メンティに応用力がつくことである。</p>
<p>メンタリングでは、メンティが考え、自ら知識を獲得しることを促すため、応用力が身につく。</p>
<p>よって、メンタリングは人に与えられた説得による知識（他者説得）よりも、</p>
<p>自ら気づいたこと（自己説得）を重視する。</p>
<h2 id="メンターによる自己説得の促進">メンターによる自己説得の促進</h2>
<p>メンターは答えを言うのではなく質問を繰り返す。</p>
<p>そして、それらの質問からメンティ自身が答えを導き出す。</p>
<p>これが重要。</p>
<h1 id="考えると悩むの違い">「考える」と「悩む」の違い</h1>
<p>「考える」と「悩む」はどちらも問題に直面しているときに起こる行動であるが以下のような違いがある。</p>
<h2 id="考える">考える</h2>
<p>問題に対して「次にやるべき行動」がはっきりしているため、</p>
<p>ホワイトボードに課題を書き出し頭を整理するなどといった問題解決のための行動を取ることができる。</p>
<h2 id="悩む">悩む</h2>
<p>問題に対して「次にやるべき行動」がはっきりしていないため、</p>
<p>基本的には手が止まってしまう。</p>
<p>手が止まっている状況が続くようであれば、それは悩んでいる人である。</p>
<p>メンティが行動できていないときに、</p>
<p>メンターは <u>「悩み」を聞き出し、気づきを促して「考える」に変える</u> 必要がある。</p>
<h1 id="メンタリングの基本技術-傾聴">メンタリングの基本技術 「傾聴」</h1>
<p>よく悩み相談で「話したらすっきりした」という感想がでるのは、</p>
<p>人が話をするときは、必ず話すことを整理する必要があるため、</p>
<p>人に話すことで自然と頭の中が整理できるからである。</p>
<p>つまり、何に困っているのかが明確になり、次にやるべきことが見えてくる。</p>
<blockquote>
<p>★「悩む」から「考える」に変わるということですね。</p>
</blockquote>
<blockquote>
<p>もしかして、悩み相談ってメンタリングしてるだけ…？</p>
</blockquote>
<h2 id="傾聴">傾聴</h2>
<p>悩み相談の例のように、人の話を聞いてあげることで、その人の問題を解決することが可能。</p>
<p>しかし、「ただ話を聞くこと」と「傾聴」には違いがある。</p>
<ul>
<li>
<p>ただ話を聞くこと</p>
<ul>
<li>特に目的というものはなく、自分の意識を出してしまいがち
<ul>
<li>自分の意見を言う</li>
<li>自分の興味のあることを質問する</li>
<li>自分に興味のないことには興味がなさそうな素振りをする</li>
</ul>
</li>
</ul>
</li>
<li>
<p>傾聴</p>
<ul>
<li>相手の思考が整理され、前向きに考えられるように支援することが目的
<ul>
<li>相手の感情への共感を言動で表す</li>
<li>相手の話の内容を可視化する</li>
<li>相手の思考の盲点を探索しながら質問をする</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>話を聞くのが上手い人とは、 <u>相手の立場になって話を聞くことができる真摯さがある人</u>です。</p>
<h2 id="傾聴で重要な要素">傾聴で重要な要素</h2>
<ul>
<li>しぐさ・うなずき・座り方</li>
<li>表情</li>
<li>あいづち</li>
<li>気が付かない信号を指摘してもらう （★ 細かな気遣いをしようってことですかね）
<ul>
<li>PCでメモを取る前に一言いっておくなど</li>
</ul>
</li>
</ul>
<h2 id="共感と同感の違い">共感と同感の違い</h2>
<p><u>同感は相手と同じ気持ちになること。</u></p>
<p><u>共感とは相手を理解すること。</u></p>
<p>傾聴で重要なのは共感であり、「なるほど、だからあなたは今そのような感情なのですね」と</p>
<p>相手を理解してあげることが大事。</p>
<blockquote>
<p>★ めちゃくちゃなるほどって思った。</p>
</blockquote>
<blockquote>
<p>確かに話を聞くのがうまい人はよく共感してくれる。</p>
</blockquote>
<h1 id="問題の可視化と明晰化">問題の可視化と明晰化</h1>
<p>問題の可視化と明晰化は、メンターとメンティの対話を通じて、</p>
<p>簡単な問題に変換するためのテクニックである。</p>
<h2 id="可視化">可視化</h2>
<p>傾聴によりある程度問題の形が見えてきたら、次は問題を可視化する。</p>
<p>問題の可視化により、メンティは自分が抱えている問題を客観視することができる。</p>
<h2 id="明晰化">明晰化</h2>
<p>可視化の過程で、<u>感情的に固執してしまっている要素</u>を引き剥がし、</p>
<p>本来の問題が何であるのかをはっきりさせる。</p>
<h2 id="可視化と明晰化のテクニック">可視化と明晰化のテクニック</h2>
<h3 id="-事実と意見を分ける">・ 事実と意見を分ける</h3>
<p>可視化対象は事実だけでよい</p>
<h3 id="-フォーカスポイントを作る">・ フォーカスポイントを作る</h3>
<p>難しい問題も問題の範囲を限定し、ひとつずつ対処していく</p>
<h3 id="-比較可能な問題に変換">・ 比較可能な問題に変換</h3>
<p>複数の選択肢がある場合に「比較する軸」を示してあげることで、解決可能な問題に変える</p>
<h1 id="認知フレームとリフレミング">認知フレームとリフレミング</h1>
<h2 id="認知フレーム">認知フレーム</h2>
<p>人は物事を認知する枠組みを持っており、その枠組の中でしか情報を処理できない。</p>
<p>例えば、家の鍵をなくしたとき。本当はポケットに入っているのに、焦りから見つけることができない。</p>
<p>このような認知の枠組みを <u>認知フレーム</u> という。</p>
<p>この認知フレームが邪魔して、問題を解けない問題化してしまう人が多い。</p>
<p>このようなときには、後述するリフレミングにより認知フレームを変える必要がある。</p>
<blockquote>
<p>★ 認知フレームを変えることで、「解けない問題」を「解ける問題」に変換可能</p>
</blockquote>
<h2 id="リフレミング">リフレミング</h2>
<p>認知フレームは簡単に変えることが可能である。</p>
<p>例えば、先ほどの鍵をなくしたときの例で、鍵が緑色だとしたら、</p>
<p>「今、あなたの周りにある緑色のものを探してください」といえば、</p>
<p>さっきまで気にしていなかった緑色のものが目に入ってくるようになり、鍵が見つかるだろう。</p>
<p>このように、対話によって認知フレームは変えることが可能であり、</p>
<p>対話による認知フレームの変更をリフレーミングという。</p>
<h1 id="情報の非対称性の解消">情報の非対称性の解消</h1>
<p>情報の非対称性とは下記のような状況のことをいう。</p>
<ul>
<li>自分は分かっているが、相手は分かっていない</li>
<li>相手は分かっているかもしれないけど、自分はわかっていない</li>
</ul>
<p>これを解消するには、</p>
<ul>
<li>自分が持つ情報を相手に伝える</li>
<li>相手が持つ情報を自分が聞く</li>
</ul>
<p>ということをしっかりする。</p>
<p>（上記の行動はあたりまえのことですが、</p>
<p>「上司は優秀な人だから分かっているに違いない」といった認知フレームが邪魔してなかなかできません。）</p>
<h1 id="課題の分離">課題の分離</h1>
<p>1つの課題に見えても、本当は複数の課題の集合体であることがある。</p>
<p>このときメンターはメンティの思考の範囲をクリアに限定してあげる。</p>
<p>つまり、うまく問題を分割してあげることが大事</p>
<h1 id="心理的安全性">心理的安全性</h1>
<h2 id="心理的安全性とは">心理的安全性とは</h2>
<p>下記2つが守られている状況</p>
<ul>
<li>対人リスクを取っても問題ないという信念がチームで共有されている</li>
<li>自分のキャリアやステータス、セルフイメージにネガティブな影響を与える恐れがなく、自分を表現し働くことができる</li>
</ul>
<blockquote>
<p>★ 対人リスクを積極的に取れる環境が大事なんですね</p>
</blockquote>
<p>メンタリングを行ううえで、メンターとメンティ間の心理的安全性はとても重要。</p>
<h1 id="心理的安全性が高まるとどうなるのか">心理的安全性が高まるとどうなるのか</h1>
<p>心理的安全性を高めると次のような影響がチームに現れる。</p>
<ul>
<li>率直に話すようになる</li>
<li>考えが明晰になる</li>
<li>意義ある対立が後押しされる</li>
<li>失敗が緩和される
<ul>
<li>失敗の報告がしやすくなる</li>
</ul>
</li>
<li>イノベーションが促される
<ul>
<li>今までの前提にとらわれず、創造的な意見が出る</li>
</ul>
</li>
<li>組織内の障害でなく目標に集中できるようになる
<ul>
<li>組織内の理不尽を気にする必要がなくなる</li>
</ul>
</li>
<li>責任感が向上する</li>
</ul>
<h1 id="心理的安全性と責任">心理的安全性と責任</h1>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/05/engineering_organization_theory_mentoring/psychological_safety_and_responsibility.png" width="600">
<br>
<p>メンタリングにおいて重要なのは <u>ラーニングゾーン</u> である。</p>
<p>ラーニングゾーンとは、対人リスクを取りつつ、発展的議論ができる状況。</p>
<p>メンターはメンティをラーニングゾーンに導くことが大事。</p>
<h1 id="自己主張と同調圧力">自己主張と同調圧力</h1>
<p>アメリカでは、初頭教育から自己主張をしっかりすることが推奨されており、</p>
<p>自分の考えをしっかりと話す週間が身についている。</p>
<p>一方で、日本はできる限り周囲と同調しようとする。</p>
<p>つまり、同調圧力が強い民族である。</p>
<p>同調圧力の強いグループでは、意見が対立することを「仲が悪い」と捉えがちである。</p>
<p>このような雰囲気が蔓延すると、心理的安全性を脅かさないために意見を殺してしまう。</p>
<p>このような状況は生産性が下がってしまう原因になりがちなので改善が必要である。</p>
<blockquote>
<p>★ 日本人には同調圧力がしみついてしまっているから、この雰囲気を取り除くのはとても難しそう</p>
</blockquote>
<h1 id="メンタリングにおける心理的安全性">メンタリングにおける心理的安全性</h1>
<p>メンターとメンティは心理的安全性が高い、</p>
<p>つまり対人リスクを積極的に取れる関係性であることが望ましい。</p>
<p>したがって、メンタリングを効果的にするために下記のことを実施する。</p>
<ul>
<li>メンティの弱さ、メンティの失敗を開示してもらう</li>
<li>メンターの弱さ、メンターの失敗を開示する</li>
</ul>
<p>メンターは完璧な人間じゃなくてよい。</p>
<p>「こういう失敗をしたけど、そこからこういうことを学び、こうしたらうまくいって成長できた」</p>
<p>という姿を見せればよい。</p>
<p>このような見せ方（伝え方）を <u>ストーリーテリング</u> という。</p>
<h1 id="アクノレッジメント承認">アクノレッジメント（承認）</h1>
<p>メンターはメンティを「承認」してあげることが大事。</p>
<p>承認とは、<u>メンティがした行動に対して、理解し、受け入れ、感謝を伝える</u>ことであり、</p>
<p><u>褒めることではない</u>。</p>
<h2 id="アクノレッジメントの種類">アクノレッジメントの種類</h2>
<ul>
<li>存在承認
<ul>
<li>相手の存在を承認する（例：あいさつ や 頑張っている様子を見て、肩を叩いて励ます など）</li>
<li>傾聴も相手の存在を承認するひとつの方法</li>
</ul>
</li>
<li>行動承認
<ul>
<li>行動に対して承認する（例：「結論から話すようになった」と言う）</li>
</ul>
</li>
<li>結果承認
<ul>
<li>「褒める」に近いが、より広い範囲で承認を捉えて伝える（例：「〜〜はすごい成果だね」と言う）</li>
</ul>
</li>
</ul>
<p>つまり、あいさつや無視しない、感謝を伝えるなどといった当たり前のことしかない。</p>
<p><u>当たり前をきちんとしよう</u>という話。</p>
<h2 id="結果が出ないと承認できない">結果が出ないと承認できない？</h2>
<p>「結果が出ないと承認できない」というのは間違いである。</p>
<p>結果よりも行動、行動だけでなく存在への承認が重要。</p>
<br>
<h1 id="ストーリーテリング">ストーリーテリング</h1>
<p>ストーリーテリングの定義を明文化すると、メンターからメンティに対しての自己開示と表現できる。</p>
<p>ストーリーテリングで重要なのは、メンティに「メンターも自分と同じ人間である」という理解を獲得すること。</p>
<h2 id="ストーリーテリングの注意点">ストーリーテリングの注意点</h2>
<p><u>過去の自慢話にならないようにする。</u></p>
<p>そのために、以下のことをしっかりとやる。</p>
<ul>
<li>包み隠さず事実を伝える</li>
<li>その時の感情を伝える</li>
<li>伝えたい価値観を明確にする</li>
<li>返報性の原理を利用する
<ul>
<li>返報性原理：相手になにか施してもらったら、それに対して自分も何かお返しをしたくなる心理</li>
<li>メンターは自己開示することで、メンティが自己開示したくなるようにする</li>
</ul>
</li>
</ul>
<blockquote>
<p>★ 自己開示って自慢話（武勇伝）になりがちだから気をつけないと</p>
</blockquote>
<h1 id="youメッセージとiメッセージ">「Youメッセージ」と「Iメッセージ」</h1>
<p>Youメッセージとは、主語が「あなた」のメッセージ。</p>
<p>Iメッセージとは、主語が「わたし」のメッセージ。</p>
<p>Youメッセージは相手に誤解を生みやすいメッセージである。</p>
<p>例えば、「なぜ（あなたは）遅れたの？」と伝えたときに、</p>
<p>限外に「なぜ説明もなく遅れたの？」と責めるようなニュアンスが生まれてしまう。</p>
<p>これをIメッセージに変えると、「連絡がなかったから、（わたしは）心配したよ」となり、</p>
<p>責めるニュアンスは減り、存在を承認している。</p>
<h1 id="ジョハリの窓">ジョハリの窓</h1>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/05/engineering_organization_theory_mentoring/johari_window.png" width="600">
<br>
<br>
<p><u>成長とは開放の窓を広げる（つまり、未知の窓=自分に出会う）こと。</u></p>
<p>メンティはフィードバックを受けることで、</p>
<p>盲点の窓（自分が分かっていないこと）を開放の窓（自分が分かっていること）に変えることが可能。</p>
<p>さらに、メンティの自己開示により秘密の窓（自分だけが分かっていること）を</p>
<p>盲点の窓（自分も他人も分かっていること）にに変えることが可能。</p>
<p>メンターは「ストーリーテリング」や「アクノレッジメント」、</p>
<p>「傾聴」、「リフレーミング」により、メンティがフィードバックを受けやすく、</p>
<p>自己開示された状態へと導く。</p>
<h1 id="内心は見えないが行動は見える">内心は見えないが、行動は見える</h1>
<p>メンタリングの最終工程は「これからどうするか」である。</p>
<p>そのときに注意すべきは、内心的な要素を介入させないことである。</p>
<p>他人の内心は絶対に見えないので、内心からその人が次の目標に向けたアクションを</p>
<p>ちゃんと起こせているかなんてことは絶対に判断できない。</p>
<p>大事なのは次の目標に向けて <u>行動を起こせているか</u> である。</p>
<p>したがって、メンターは <u>次の行動を促す</u> ような指導をしなければいけない。</p>
<blockquote>
<p>★ 内心は見えない。まさにそのとおり。でも、現代にはまだまだ根性論とか存在しますよね。気をつけないと。</p>
</blockquote>
<h1 id="smartな行動">SMARTな行動</h1>
<p>「これからどうするか」について、メンターとメンティの認識を合わせる必要がある。</p>
<p>このとき注意すべきなのが、</p>
<p>「自分の言葉は自分の思ったように相手に伝わっているはず」と思わないことである。</p>
<p>絶対に正しく伝わらない。</p>
<p>メンターとメンティ間で認識の差異を生まないためには、<u>SMART原則</u> を意識するとよい。</p>
<ul>
<li><u>S</u>pecific（具体的な）：抽象的な表現は使わない</li>
<li><u>M</u>easureable（測定可能な）：次の行動が行われたかどうか、どのように確認するか決める</li>
<li><u>A</u>chievable（到達可能な）：達成可能な目標だけを設定する</li>
<li><u>R</u>elated（関連した）：メンティの課題と目標行動の関係性をメンティ自身が説明できるようにする</li>
<li><u>T</u>ime-Bound（時間制限のある）：期限を定める</li>
</ul>
<h1 id="能力と習慣をコントロールする">能力と習慣をコントロールする</h1>
<img src="https://yyh-gl.github.io/tech-blog/img/tech-blog/2019/05/engineering_organization_theory_mentoring/growth_cycle.png" width="600">
<br>
<br>
<p>人の成長は上図のように「行動・習慣・能力・成果」の4つの事柄のループである。</p>
<p>この4つの要素のうち基本的にコントロールできるのは「行動と習慣」のみである。</p>
<p>したがって、<u>メンタリングでは行動と習慣の成長を促す。</u></p>
<blockquote>
<p>★ 行動が習慣化するところまで見てあげることが大事なんですね</p>
</blockquote>
<h1 id="成長は行動変化の先にある">成長は行動変化の先にある</h1>
<p>結局のところ成長は行動しないと起き得ない。</p>
<p>では、なぜ行動できないのか。</p>
<p>それは「行動を促進する力」より「行動を阻害する力」が勝っているからである。</p>
<p>メンターは行動を促進する力を強めるために下記のような行動を行うべきである。</p>
<ul>
<li>フィードバックの機会を増やす</li>
<li>適切に承認する</li>
<li>「行動を阻害する要因」は環境や構造を変えるための行動に変換してあげる</li>
</ul>
<h1 id="適切な目標を決める">適切な目標を決める</h1>
<ul>
<li>自分の気がつかなかった問題に気がつくようになる</li>
<li>認知の歪みによる感情と問題の癒着を切り離せる</li>
<li>答えではなく、次の一手を生み出す行動が取れるようになる</li>
</ul>
<p>メンタリングのゴールである上記3点の状態に導くためには、</p>
<p><u>適切なゴール設定が必要</u>である。</p>
<p>ゴールを設定することで、認知フレームに変化が起き、見えなかったものが見えてくる。</p>
<p>ただし、闇雲にゴールを決めればよいわけではない。</p>
<p>後述するゴールのレベルが伴っていないといけない。</p>
<h2 id="ゴールのレベル">ゴールのレベル</h2>
<p>ゴールには下記のとおりレベルがある。</p>
<ul>
<li>レベル0 願望：漠然と思っているレベルのゴール
<ul>
<li>例：お金持ちだったらなぁ</li>
</ul>
</li>
<li>レベル1 義務：達成しなければならないと誰かに押し付けられたゴール
<ul>
<li>例：お金持ちにならないといけない</li>
</ul>
</li>
<li>レベル2 欲求：達成したいと自分で思って決めたゴール
<ul>
<li>例：お金持ちになりたい</li>
</ul>
</li>
<li>レベル3 意思：達成しようと決意をもって決めたゴール
<ul>
<li>例：お金持ちになるぞ</li>
</ul>
</li>
<li>レベル4 必然：達成しているという確信をもって行動できているゴール
<ul>
<li>例：お金持ちになっている</li>
</ul>
</li>
</ul>
<p>はじめは漠然とした夢であっても、レベルが上がっていくとともに</p>
<p>夢がはっきりとし、次に取るべき行動が明確になってくる。</p>
<p>レベル3では行動が変わり始める。</p>
<p>レベル4まで上がってくると、継続的な行動、つまり習慣が変化し始める。</p>
<p><u>メンターはレベルを上げる手助けを行う。</u></p>
<h1 id="セルフマスタリー">セルフマスタリー</h1>
<p>ゴールの設定、すなわち、未来の自分を設定し、</p>
<p>未来の自分から見て自身をメンタリングすることを「セルフマスタリー」という。</p>
<p>つまり、将来の自分から見て、今の自分に足りないものを見つけ、</p>
<p>そこを補うように行動することである。</p>
<p>メンタリングは、このセルフマスタリーを会得することで完結する。</p>
<p>メンティがセルフマスタリーを会得すれば、もうメンターは必要ない。</p>
<p>自走可能＝自立可能な人材の誕生である。</p>
<hr>
<p>以下感想</p>
<p>結局のところ、人が成長するにはその人自身が行動を起こすしかないわけですが、</p>
<p>「じゃあどうやって行動を促すのか」といったことはあまり考えたことがありませんでした。</p>
<p>本書は、論理的にどうやって行動を起こせるように導くのか、</p>
<p>その手法を事細かに説明されており、説得力のある内容でした。</p>
<p>今回は2章の「メンタリングの技術」だけを読みましたが、</p>
<p>今後他の章に関してもまとめて記事にしたいと思います。</p>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/%E3%83%81%E3%83%BC%E3%83%A0%E3%83%9E%E3%83%8D%E3%82%B8%E3%83%A1%E3%83%B3%E3%83%88" term="%E3%83%81%E3%83%BC%E3%83%A0%E3%83%9E%E3%83%8D%E3%82%B8%E3%83%A1%E3%83%B3%E3%83%88" label="チームマネジメント"/><category scheme="https://yyh-gl.github.io/tech-blog/categories/%E8%AA%AD%E6%9B%B8%E3%81%BE%E3%81%A8%E3%82%81" term="%E8%AA%AD%E6%9B%B8%E3%81%BE%E3%81%A8%E3%82%81" label="読書まとめ"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry><entry><title type="html">Hello Wolrd</title><link href="https://yyh-gl.github.io/tech-blog/blog/hello_world/?utm_source=atom_feed" rel="alternate" type="text/html"/><id>https://yyh-gl.github.io/tech-blog/blog/hello_world/</id><author><name>yyh-gl</name></author><published>2019-05-22T00:00:00+00:00</published><updated>2019-05-22T00:00:00+00:00</updated><content type="html"><![CDATA[<blockquote>【一文まとめ】技術ブログはじめます</blockquote><h1 id="技術ブログはじめます">技術ブログはじめます</h1>
<p>不定期で学んだことをアウトプットしていきます。</p>
<p>サーバサイドのネタを中心に、フロントやインフラ（クラウド）の話も書いていく予定です。</p>
<p>まさかり大歓迎です。</p>
<h1 id="自己紹介">自己紹介</h1>
<p>19新卒として社会人1年目を始めたエンジニアです。</p>
<p>学生時代はインターンやアルバイトで</p>
<p>ECサービスやスマホゲームのバックエンドなどを開発していました。</p>
<p>現在は、フルスタックエンジニア目指して、日々修行中。</p>
<p>（メインはサーバサイド）</p>
<p>学んだことをアウトプットする場として</p>
<p>本ブログを始めました。</p>
<p>頑張ります</p>
]]></content><category scheme="https://yyh-gl.github.io/tech-blog/categories/%E8%87%AA%E5%B7%B1%E7%B4%B9%E4%BB%8B" term="%E8%87%AA%E5%B7%B1%E7%B4%B9%E4%BB%8B" label="自己紹介"/><category scheme="https://yyh-gl.github.io/tech-blog/tags/tech" term="tech" label="Tech"/></entry></feed>