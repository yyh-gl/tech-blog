<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>読書まとめ on yyh-gl's Tech Blog</title><link>https://yyh-gl.github.io/tech-blog/categories/%E8%AA%AD%E6%9B%B8%E3%81%BE%E3%81%A8%E3%82%81/</link><description>Recent content in 読書まとめ on yyh-gl's Tech Blog</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Tue, 11 Jun 2019 00:00:00 +0900</lastBuildDate><atom:link href="https://yyh-gl.github.io/tech-blog/categories/%E8%AA%AD%E6%9B%B8%E3%81%BE%E3%81%A8%E3%82%81/index.xml" rel="self" type="application/rss+xml"/><item><title>【エリック・エヴァンスのドメイン駆動設計】DDD入門 Part 1</title><link>https://yyh-gl.github.io/tech-blog/blog/evans_ddd_1/</link><pubDate>Tue, 11 Jun 2019 00:00:00 +0900</pubDate><guid>https://yyh-gl.github.io/tech-blog/blog/evans_ddd_1/</guid><description>DDD の勉強始めます 新卒研修を受ける中で DDD が出てきて、勉強したくなったので、
『エリック・エヴァンスのドメイン駆動設計』（エリック・エヴァンス著，今関 剛 監訳，和智 右桂、牧野 祐子 訳） を読んでいこうと思います。
今回は第1部「ドメインモデルを機能させる」の 1章 と 2章 をまとめます。
注意： 僕の理解をそのままメモとして書き連ねていきます。
したがって、誤った理解もあると思うので、そのときはDMとかでご指摘お願いします！
1章 知識をかみ砕く ソフトウェアを作るときに、はじめから対象を十分に理解している開発者などいない。
対象 ＝ これから作るソフトウェアで実現する作業 ＝ ドメイン
したがって、対象について詳しい人（ドメインエキスパート）と開発者で 十分に話し合って理解を深めることが重要である。
理解したことはモデルとして書き出す。 そして、ドメインエキスパートは足りないところがあれば追加で説明する。
開発者は分からないところがあれば質問する。
上記工程を何度も繰り返し、その都度得た知識をモデルに落とし込んでいく。
→ 継続的学習（継続的学習は開発が始まった後でも行う）
はじめから対象を如実に表したモデルを作れることは滅多にない。
ドメインエキスパート と 開発者 では見ている視点が違うので少し話を聞いたぐらいで 完璧なモデルを作ることができないのは当たり前である。
だからこそ、対話を通して、互いに疑問点や不要な点を洗い出し、洗練する必要がある。
これが 知識のかみ砕き である。
1章 まとめ ドメインエキスパートと開発者が話し合ってドメインをモデルに落とし込んでいく 用語の説明や不足点の追加など とにかく話す ドメイン：ソフトウェア化する対象（業務やサービスなど、ソフトウェア化の対象となりうる万物） 一発で完璧なモデリングはできないから、継続的に改善していく 2章 コミュニケーションと言語の使い方 ドメインエキスパートが使う専門用語を開発者は理解できないし、
開発者が使う専門用語をドメインエキスパートは理解できない。
ドメインエキスパートと開発者の両者が同じ意味だと思って使っていたとしても たいていの場合、差異がある。
このような差異があると 通訳 が必要となる。
通訳はコミュニケーションを鈍らせ、知識のかみ砕きを沈滞させる。</description></item><item><title>【大規模サービス技術入門 5章】大規模データの処理方法についてまとめた</title><link>https://yyh-gl.github.io/tech-blog/blog/bigdata_processing/</link><pubDate>Mon, 10 Jun 2019 00:00:00 +0900</pubDate><guid>https://yyh-gl.github.io/tech-blog/blog/bigdata_processing/</guid><description>はじめに 社内で伊藤 直也さんと田中 慎司さんが書かれた
『Web開発者のための大規模サービス技術入門』 を輪読しました。
今回は、僕が担当した 第5回の「大規模データ処理[実践]入門」についてまとめます。
なお、本書は2010年に出版された本であるため、
少なくとも第5回の内容は今では当たり前のことという印象を受けました。
それでも、しっかりと文章で学んでおくことは大事だと思うのでまとめます。
★印は個人メモです。
以下まとめ
大量なデータを扱う場面 全文検索やデータマイニングなど RDBMSで処理できない規模のデータを
処理したい場面は多く存在します。
では、RDBMSが使えない規模のデータをどう処理すればいいでしょうか。
データを抽出 結論から言うと、RDBMSで扱うことができないデータは、適宜RDBMSから 抽出 して利用します。
具体的には バッチ処理でRDBMSからデータを抽出し、
別途インデックスサーバのようなものを作って、そこに入れていきます。
★ ここで言っているインデックスサーバというのは、例えば全文検索用であれば
「検索用にチューニングした（検索しやすくした）データ構造」と考えるべきでしょう。
★ 最近は、Fluentd を使用してログを外部に吐き出してから解析したりしますよね。
それと考え方は一緒だと思います。
インデックスサーバにはRPC（Remote Procedure Call）を使ってアクセスします。
（なお、RPCと言いましたが、現在では Web API でのアクセスが一般的なので、以降、 Web API を例に使用します）
イメージとしては下図のようになります。
用途特化型のインデクシング 上述した方法を、はてな社（著者がはてな社出身の方なのでよく出てきます）では、
用途特化型インデクシング と呼ぶそうです。
用途特化型インデクシングとRDBMS RDBMS はデータソートや統計処理、JOIN など、データに対して様々な処理を行うことができます。
しかし、汎用的故に、特定の目的だけに使うときには、それ用にチューニングしたデータ構造、
すなわち 用途特化型インデクシング を使う方が圧倒的に速くなります。
★ 先ほど言っていた Fluentd を用いたログ解析システム は ログ解析用にチューニングしたものと言えるでしょうか。</description></item><item><title>【エンジニアリング組織論への招待】メンタリングの技術</title><link>https://yyh-gl.github.io/tech-blog/blog/engineering_organization_theory_mentoring/</link><pubDate>Sat, 25 May 2019 00:00:00 +0900</pubDate><guid>https://yyh-gl.github.io/tech-blog/blog/engineering_organization_theory_mentoring/</guid><description>概要 今回は、広木 大地さんが書かれた 『エンジニアリング組織論への招待 不確実性に向き合う思考と組織のリファクタリング』 という本から、
2章「メンタリングの技術」についてまとめます。
（初投稿の内容が技術系じゃなくてチームマネジメント系かよとか言わないでくださいね）
最初に覚えておいてほしいこと メンタリングは、自律的な人材を育むために行う。
そのために、下記3点の状態にメンティ自身からなれるように導く。
自分の気がつかなかった問題に気がつくようになる 認知の歪みによる感情と問題の癒着を切り離せる 答えではなく、次の一手を生み出す行動が取れるようになる これらがとても重要です。
以下いろいろな話が出てきますが、結局は上記3点の状態を実現するための方法です。
ここをしっかりと意識して読んでいただければ、
より一層理解が深まると思います。
以下まとめ （★マークは個人的解釈・感想です）
そもそもメンタリングとは 相手を上から押し付けるような教育方法ではない 相手の考え方を少しずつ変えることで、問題解決の力を育む手法 対話を通じて、以下の2点を行い、相手を成長させる。
歪んだ認知を補正 次の行動を促進 メンタリングと聞くと、
大学で何年も学ばないと身に着けられないような技術であると思いがちだが、
体得すればだれでもできるようになる。
エンジニアリングにおけるメンタリングの重要性 エンジニアリングは知識が全てではない エンジニアリングでは技術的な課題がよく取り上げられるが、
技術的な課題というのは心理的な課題と密接に関係している。
例えば、
ソフトウェア開発はチームプレイ ★ 技術的な課題解決だけでなく、人間関係とかもあるってことかな
各個人の開発における問題解決は、自分自身との対話によって制御するもの ★ 自身を制すものがエラーを制す
上記のようにエンジニアリングには心理的な課題も存在する。
プロダクト開発では 不確実性を排除する ことがとても重要である。
したがって、不確実性のひとつである心理的な課題は排除すべき対象である。
★ だから、メンタリングが重要なんですね。
メンタリングは 自ら考える人材を作る ためのテクニック 自立型人材と依存型人材 自ら考える人材を自立型人材、そうでない人材を依存型人材とすると、
それぞれ下記のような特徴がある。
自立型人材 自ら問題を発見し、解決することができる 問題について、自分ごととして捉えている 問題の根本的原因は自分にあると考える 改善のために行動できる 依存型人材 問題を与えられてから考える 問題と解決策を渡されてから動ける 問題の根本的原因は他人にあると考える 改善のために行動できず、他人のせいにしてしまう 両人材の境界線 多くの人は時には自立型人材、しかし、ある場面では依存型人材になってしまう。</description></item></channel></rss>