<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>勉強メモ on yyh-gl's Tech Blog</title><link>https://tech.yyh-gl.dev/categories/%E5%8B%89%E5%BC%B7%E3%83%A1%E3%83%A2/</link><description>Recent content in 勉強メモ on yyh-gl's Tech Blog</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Sat, 28 Dec 2024 20:08:33 +0900</lastBuildDate><atom:link href="https://tech.yyh-gl.dev/categories/%E5%8B%89%E5%BC%B7%E3%83%A1%E3%83%A2/index.xml" rel="self" type="application/rss+xml"/><item><title>分散システムにおけるID採番の勉強メモ</title><link>https://tech.yyh-gl.dev/blog/unique-ids-in-distributed-systems/</link><pubDate>Sat, 28 Dec 2024 20:08:33 +0900</pubDate><guid>https://tech.yyh-gl.dev/blog/unique-ids-in-distributed-systems/</guid><description>はじめに 分散システムにおけるID採番方法について気になったので調べたときのメモ。
（UUIDおよびULIDはスキップ）
調査の中で興味を持ったのがSnowflakeだったので、ほぼSnowflakeの話。
Snowflake 分散システムにおけるID採番方式として有名なもののひとつ。
https://en.wikipedia.org/wiki/Snowflake_ID 64bitで構成されている。
（参照： https://en.wikipedia.org/wiki/Snowflake_ID ）
基本的に、上記のフォーマットで生成されたバイナリは10進数の数値に変換される。
timestampを含むので、時刻情報に基づいたソートが可能。
高い衝突体制を持つ。
timestampを含んでいることからも分かるとおり、SnowflakeはSystem Clockに依存している。
よって、時間が巻き戻ったりするとIDが重複する可能性がある。
ただし、時刻が巻き戻った場合にはID生成をストップする機構が組み込まれている。
（最後に生成したIDが示す時刻を超えるまで生成ストップ）
https://github.com/twitter-archive/snowflake/tree/snowflake-2010?tab=readme-ov-file#system-clock-dependency Xでも使われている（参考 ）。
現行のコードではないもののコードはこちら 。
今使われているのはSnowflakeの進化系？
The Snowflake we&amp;rsquo;re using internally is a full rewrite and heavily relies on existing infrastructure at Twitter to run.
Snowflakeとよく比較される対象 UUID ULID</description></item></channel></rss>