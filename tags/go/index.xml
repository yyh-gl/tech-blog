<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on yyh-gl's Tech Blog</title><link>https://yyh-gl.github.io/tech-blog/tags/go/</link><description>Recent content in Go on yyh-gl's Tech Blog</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Sat, 03 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://yyh-gl.github.io/tech-blog/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>【Go】Switch文のfallthroughに関するまとめ</title><link>https://yyh-gl.github.io/tech-blog/blog/go-switch-fallthrough/</link><pubDate>Sat, 03 Oct 2020 00:00:00 +0000</pubDate><guid>https://yyh-gl.github.io/tech-blog/blog/go-switch-fallthrough/</guid><description>fallthrough とは GoではSwitch文でfallthroughというキーワードが使用可能です。
機能としては、Switch文における次の節（caseやdefault）に移動するというものです。（参考）
言葉で説明するよりも、サンプルコードを見てもらった方がイメージがつきやすいと思います。
1package main 2 3import &amp;#34;fmt&amp;#34; 4 5func main() { 6 num := 1 7 switch num { 8 case 1: 9 fmt.Print(&amp;#34;I &amp;#34;) 10 fallthrough 11 case 2: 12 fmt.Print(&amp;#34;am &amp;#34;) 13 fallthrough 14 case 3: 15 fmt.Println(&amp;#34;yyh-gl.&amp;#34;) 16 // fallthrough // 次の節がなければコンパイルエラー 17 } 18} 19 20// 実行結果： 21// I am yyh-gl. Playground
defaultにも飛べるという例
fallthroughは、Go言語のORMライブラリとして有名な『GORM』でも使用されています。(使用箇所))</description></item><item><title>Goの参照渡しについて調べてみた</title><link>https://yyh-gl.github.io/tech-blog/blog/go-always-passing-by-value/</link><pubDate>Sun, 14 Jun 2020 00:00:00 +0000</pubDate><guid>https://yyh-gl.github.io/tech-blog/blog/go-always-passing-by-value/</guid><description>Goにおける参照渡し＝ポインタの値渡し Goでは関数にパラメータを渡すとき、全て値渡しで実現されています。
（C派生の言語はすべてそうらしいです）
じゃあ、参照渡しって何？ってなりますよね。
参照渡し＝ポインタの値渡しです。
つまり、ポインタそのものを渡しているわけではなく、ポインタのコピーを渡しています。
値渡しと参照渡しの差は、内部の値をコピーするかどうかです。
こちらについては後ほど例を交えて説明します。
今回の内容はGo公式ドキュメントの『Pointers and Allocation』の章に 詳細な記載があります。
本記事では、『Pointers and Allocation』から要点を抜粋して紹介します。
値渡しと参照渡しの違いは内部値のコピー有無 まずは、先述した
値渡しと参照渡しの差は、内部の値をコピーするかどうかです。
について詳しく見ていきます。
公式ドキュメント『When are function parameters passed by value?』の節に以下の記述があります。
For instance, passing an int value to a function makes a copy of the int, and passing a pointer value makes a copy of the pointer, but not the data it points to.
たとえば、int値を関数に渡すとintのコピーが作成され、ポインター値を渡すとポインターのコピーが作成されますが、ポインターが指すデータは作成されません。
つまり、</description></item></channel></rss>